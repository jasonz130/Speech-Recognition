
sd_card_1_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008934  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08008ae4  08008ae4  00018ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d84  08008d84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d8c  08008d8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d8c  08008d8c  00018d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d90  08008d90  00018d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000233c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  200023ac  200023ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001645d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034bb  00000000  00000000  000364fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  000399b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd8  00000000  00000000  0003a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026f7e  00000000  00000000  0003b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014571  00000000  00000000  0006246e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9ccf  00000000  00000000  000769df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001506ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040d0  00000000  00000000  00150704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008acc 	.word	0x08008acc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08008acc 	.word	0x08008acc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <sd_card_init>:
static FRESULT sd_result;
static FATFS sdCard;

static FIL testFile;

void sd_card_init() {
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
	uint8_t file_name[] = "test.txt";
 800058e:	4a2e      	ldr	r2, [pc, #184]	; (8000648 <sd_card_init+0xc0>)
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	ca07      	ldmia	r2, {r0, r1, r2}
 8000596:	c303      	stmia	r3!, {r0, r1}
 8000598:	701a      	strb	r2, [r3, #0]
	uint8_t temp_number;
	uint8_t test_text[] = "hello world there";
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <sd_card_init+0xc4>)
 800059c:	463c      	mov	r4, r7
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	682b      	ldr	r3, [r5, #0]
 80005a6:	8023      	strh	r3, [r4, #0]

	sd_result = f_mount(&sdCard, SDPath, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	4929      	ldr	r1, [pc, #164]	; (8000650 <sd_card_init+0xc8>)
 80005ac:	4829      	ldr	r0, [pc, #164]	; (8000654 <sd_card_init+0xcc>)
 80005ae:	f006 fde5 	bl	800717c <f_mount>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <sd_card_init+0xd0>)
 80005b8:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0){
 80005ba:	4b27      	ldr	r3, [pc, #156]	; (8000658 <sd_card_init+0xd0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d006      	beq.n	80005d0 <sd_card_init+0x48>
		printf("error in mounting an sd card: %d\n", sd_result);
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <sd_card_init+0xd0>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4824      	ldr	r0, [pc, #144]	; (800065c <sd_card_init+0xd4>)
 80005ca:	f007 fab3 	bl	8007b34 <iprintf>
 80005ce:	e002      	b.n	80005d6 <sd_card_init+0x4e>
//		while (1);
	}
	else {
		printf("succeeded in mounting the SD card\n");
 80005d0:	4823      	ldr	r0, [pc, #140]	; (8000660 <sd_card_init+0xd8>)
 80005d2:	f007 fb35 	bl	8007c40 <puts>
	}

	sd_result = f_open(&testFile, (void*)file_name, FA_WRITE|FA_CREATE_ALWAYS);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	220a      	movs	r2, #10
 80005dc:	4619      	mov	r1, r3
 80005de:	4821      	ldr	r0, [pc, #132]	; (8000664 <sd_card_init+0xdc>)
 80005e0:	f006 fe12 	bl	8007208 <f_open>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <sd_card_init+0xd0>)
 80005ea:	701a      	strb	r2, [r3, #0]
	if (sd_result != 0) {
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <sd_card_init+0xd0>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d006      	beq.n	8000602 <sd_card_init+0x7a>
		printf("error in creating a file: %d \n", sd_result);
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <sd_card_init+0xd0>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	481b      	ldr	r0, [pc, #108]	; (8000668 <sd_card_init+0xe0>)
 80005fc:	f007 fa9a 	bl	8007b34 <iprintf>
 8000600:	e002      	b.n	8000608 <sd_card_init+0x80>
//		while(1);
	}
	else {
		printf("succeeded in opening a file\n");
 8000602:	481a      	ldr	r0, [pc, #104]	; (800066c <sd_card_init+0xe4>)
 8000604:	f007 fb1c 	bl	8007c40 <puts>
	}

	sd_result = f_write(&testFile, (void*)test_text, (UINT)sizeof(test_text), (UINT*)&temp_number);
 8000608:	f107 0313 	add.w	r3, r7, #19
 800060c:	4639      	mov	r1, r7
 800060e:	2212      	movs	r2, #18
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <sd_card_init+0xdc>)
 8000612:	f006 ffc5 	bl	80075a0 <f_write>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <sd_card_init+0xd0>)
 800061c:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0){
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <sd_card_init+0xd0>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d006      	beq.n	8000634 <sd_card_init+0xac>
		printf("error in writing to the file: %d\n", sd_result);
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <sd_card_init+0xd0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <sd_card_init+0xe8>)
 800062e:	f007 fa81 	bl	8007b34 <iprintf>
 8000632:	e002      	b.n	800063a <sd_card_init+0xb2>
//		while (1);
	}
	else {
		printf("succeeded in writing to the file\n");
 8000634:	480f      	ldr	r0, [pc, #60]	; (8000674 <sd_card_init+0xec>)
 8000636:	f007 fb03 	bl	8007c40 <puts>
	}

	f_close(&testFile);
 800063a:	480a      	ldr	r0, [pc, #40]	; (8000664 <sd_card_init+0xdc>)
 800063c:	f007 f9c2 	bl	80079c4 <f_close>

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bdb0      	pop	{r4, r5, r7, pc}
 8000648:	08008bb0 	.word	0x08008bb0
 800064c:	08008bbc 	.word	0x08008bbc
 8000650:	20001334 	.word	0x20001334
 8000654:	20000090 	.word	0x20000090
 8000658:	2000008c 	.word	0x2000008c
 800065c:	08008ae4 	.word	0x08008ae4
 8000660:	08008b08 	.word	0x08008b08
 8000664:	200008c4 	.word	0x200008c4
 8000668:	08008b2c 	.word	0x08008b2c
 800066c:	08008b4c 	.word	0x08008b4c
 8000670:	08008b68 	.word	0x08008b68
 8000674:	08008b8c 	.word	0x08008b8c

08000678 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000680:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000684:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d013      	beq.n	80006b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000690:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000694:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000698:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00b      	beq.n	80006b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006a0:	e000      	b.n	80006a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f9      	beq.n	80006a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fbc2 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f81a 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f8f0 	bl	80008b8 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80006d8:	f000 f8ae 	bl	8000838 <MX_SDIO_SD_Init>
  MX_DMA_Init();
 80006dc:	f000 f8cc 	bl	8000878 <MX_DMA_Init>
  MX_I2S2_Init();
 80006e0:	f000 f87c 	bl	80007dc <MX_I2S2_Init>
  MX_FATFS_Init();
 80006e4:	f004 fd9a 	bl	800521c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s2, (uint8_t *)data_i2s, sizeof(data_i2s)/2);
 80006e8:	2264      	movs	r2, #100	; 0x64
 80006ea:	4905      	ldr	r1, [pc, #20]	; (8000700 <main+0x38>)
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <main+0x3c>)
 80006ee:	f001 fbcd 	bl	8001e8c <HAL_I2S_Receive_DMA>
  HAL_Delay(500);
 80006f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f6:	f000 fc1f 	bl	8000f38 <HAL_Delay>
  sd_card_init();
 80006fa:	f7ff ff45 	bl	8000588 <sd_card_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <main+0x36>
 8000700:	20001134 	.word	0x20001134
 8000704:	200012e4 	.word	0x200012e4

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f007 fa04 	bl	8007b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <SystemClock_Config+0xcc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000784:	2307      	movs	r3, #7
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f001 ffed 	bl	800276c <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 f908 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2105      	movs	r1, #5
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fa4e 	bl	8002c5c <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c6:	f000 f8f1 	bl	80009ac <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_I2S2_Init+0x54>)
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <MX_I2S2_Init+0x58>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2S2_Init+0x54>)
 80007e8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_I2S2_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_I2S2_Init+0x54>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_I2S2_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_I2S2_Init+0x54>)
 8000802:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000806:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_I2S2_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_I2S2_Init+0x54>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_I2S2_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_I2S2_Init+0x54>)
 800081c:	f001 f9f6 	bl	8001c0c <HAL_I2S_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000826:	f000 f8c1 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200012e4 	.word	0x200012e4
 8000834:	40003800 	.word	0x40003800

08000838 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_SDIO_SD_Init+0x38>)
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <MX_SDIO_SD_Init+0x3c>)
 8000840:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_SDIO_SD_Init+0x38>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_SDIO_SD_Init+0x38>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_SDIO_SD_Init+0x38>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_SDIO_SD_Init+0x38>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <MX_SDIO_SD_Init+0x38>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 14;
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <MX_SDIO_SD_Init+0x38>)
 8000862:	220e      	movs	r2, #14
 8000864:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	20001260 	.word	0x20001260
 8000874:	40012c00 	.word	0x40012c00

08000878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DMA_Init+0x3c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <MX_DMA_Init+0x3c>)
 8000888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DMA_Init+0x3c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	200e      	movs	r0, #14
 80008a0:	f000 fc49 	bl	8001136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008a4:	200e      	movs	r0, #14
 80008a6:	f000 fc62 	bl	800116e <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_GPIO_Init+0x8c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_GPIO_Init+0x8c>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_GPIO_Init+0x8c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_GPIO_Init+0x8c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <MX_GPIO_Init+0x8c>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_GPIO_Init+0x8c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_GPIO_Init+0x8c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <MX_GPIO_Init+0x8c>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_GPIO_Init+0x8c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000922:	2302      	movs	r3, #2
 8000924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_GPIO_Init+0x90>)
 8000936:	f000 ffa5 	bl	8001884 <HAL_GPIO_Init>

}
 800093a:	bf00      	nop
 800093c:	3720      	adds	r7, #32
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020c00 	.word	0x40020c00

0800094c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	e009      	b.n	8000972 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	60ba      	str	r2, [r7, #8]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe86 	bl	8000678 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	dbf1      	blt.n	800095e <_write+0x12>
	}
	return len;
 800097a:	687b      	ldr	r3, [r7, #4]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	sample_i2s = data_i2s[0];
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_I2S_RxCpltCallback+0x20>)
 800098e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_I2S_RxCpltCallback+0x24>)
 8000994:	801a      	strh	r2, [r3, #0]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20001134 	.word	0x20001134
 80009a8:	2000125c 	.word	0x2000125c

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <HAL_MspInit+0x4c>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b096      	sub	sp, #88	; 0x58
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2230      	movs	r2, #48	; 0x30
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f007 f87b 	bl	8007b24 <memset>
  if(hi2s->Instance==SPI2)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a49      	ldr	r2, [pc, #292]	; (8000b58 <HAL_I2S_MspInit+0x150>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	f040 808b 	bne.w	8000b50 <HAL_I2S_MspInit+0x148>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a3e:	23c0      	movs	r3, #192	; 0xc0
 8000a40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 face 	bl	8002fec <HAL_RCCEx_PeriphCLKConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000a56:	f7ff ffa9 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <HAL_I2S_MspInit+0x154>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a3e      	ldr	r2, [pc, #248]	; (8000b5c <HAL_I2S_MspInit+0x154>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <HAL_I2S_MspInit+0x154>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <HAL_I2S_MspInit+0x154>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a37      	ldr	r2, [pc, #220]	; (8000b5c <HAL_I2S_MspInit+0x154>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <HAL_I2S_MspInit+0x154>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <HAL_I2S_MspInit+0x154>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <HAL_I2S_MspInit+0x154>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <HAL_I2S_MspInit+0x154>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4825      	ldr	r0, [pc, #148]	; (8000b60 <HAL_I2S_MspInit+0x158>)
 8000aca:	f000 fedb 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ace:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481e      	ldr	r0, [pc, #120]	; (8000b64 <HAL_I2S_MspInit+0x15c>)
 8000aec:	f000 feca 	bl	8001884 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000af2:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <HAL_I2S_MspInit+0x164>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b36:	f000 fb35 	bl	80011a4 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000b40:	f7ff ff34 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b48:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_I2S_MspInit+0x160>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3758      	adds	r7, #88	; 0x58
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40003800 	.word	0x40003800
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40020400 	.word	0x40020400
 8000b68:	200011fc 	.word	0x200011fc
 8000b6c:	40026058 	.word	0x40026058

08000b70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <HAL_SD_MspInit+0xe4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d15b      	bne.n	8000c4a <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <HAL_SD_MspInit+0xe8>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <HAL_SD_MspInit+0xe8>)
 8000b9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <HAL_SD_MspInit+0xe8>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <HAL_SD_MspInit+0xe8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a28      	ldr	r2, [pc, #160]	; (8000c58 <HAL_SD_MspInit+0xe8>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_SD_MspInit+0xe8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <HAL_SD_MspInit+0xe8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <HAL_SD_MspInit+0xe8>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_SD_MspInit+0xe8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000be6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4816      	ldr	r0, [pc, #88]	; (8000c5c <HAL_SD_MspInit+0xec>)
 8000c04:	f000 fe3e 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <HAL_SD_MspInit+0xec>)
 8000c26:	f000 fe2d 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <HAL_SD_MspInit+0xf0>)
 8000c46:	f000 fe1d 	bl	8001884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40012c00 	.word	0x40012c00
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020800 	.word	0x40020800
 8000c60:	40020c00 	.word	0x40020c00

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f922 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <DMA1_Stream3_IRQHandler+0x10>)
 8000cbe:	f000 fb77 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200011fc 	.word	0x200011fc

08000ccc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e00a      	b.n	8000cf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cde:	f3af 8000 	nop.w
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf0      	blt.n	8000cde <_read+0x12>
	}

return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_isatty>:

int _isatty(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
	return 1;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f006 fe96 	bl	8007ad0 <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20030000 	.word	0x20030000
 8000dd0:	00004000 	.word	0x00004000
 8000dd4:	200010f4 	.word	0x200010f4
 8000dd8:	200023b0 	.word	0x200023b0

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e38 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e1c:	4c0b      	ldr	r4, [pc, #44]	; (8000e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e2a:	f7ff ffd7 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f006 fe55 	bl	8007adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fc49 	bl	80006c8 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e44:	08008d94 	.word	0x08008d94
  ldr r2, =_sbss
 8000e48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e4c:	200023ac 	.word	0x200023ac

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f94f 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	200f      	movs	r0, #15
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fd96 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f967 	bl	800118a <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f92f 	bl	8001136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	2000132c 	.word	0x2000132c

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2000132c 	.word	0x2000132c

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff29 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff3e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff31 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa2 	bl	80010dc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff feb6 	bl	8000f20 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e099      	b.n	80012f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2202      	movs	r2, #2
 80011c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e0:	e00f      	b.n	8001202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011e2:	f7ff fe9d 	bl	8000f20 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d908      	bls.n	8001202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2220      	movs	r2, #32
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2203      	movs	r2, #3
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e078      	b.n	80012f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e8      	bne.n	80011e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_DMA_Init+0x158>)
 800121c:	4013      	ands	r3, r2
 800121e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800122e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4313      	orrs	r3, r2
 8001252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	2b04      	cmp	r3, #4
 800125a:	d107      	bne.n	800126c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4313      	orrs	r3, r2
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f023 0307 	bic.w	r3, r3, #7
 8001282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	4313      	orrs	r3, r2
 800128c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	2b04      	cmp	r3, #4
 8001294:	d117      	bne.n	80012c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00e      	beq.n	80012c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 fa6f 	bl	800178c <DMA_CheckFifoParam>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2240      	movs	r2, #64	; 0x40
 80012b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012c2:	2301      	movs	r3, #1
 80012c4:	e016      	b.n	80012f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fa26 	bl	8001720 <DMA_CalcBaseAndBitshift>
 80012d4:	4603      	mov	r3, r0
 80012d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012dc:	223f      	movs	r2, #63	; 0x3f
 80012de:	409a      	lsls	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	f010803f 	.word	0xf010803f

08001300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_DMA_Start_IT+0x26>
 8001322:	2302      	movs	r3, #2
 8001324:	e040      	b.n	80013a8 <HAL_DMA_Start_IT+0xa8>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d12f      	bne.n	800139a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2202      	movs	r2, #2
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 f9b8 	bl	80016c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	223f      	movs	r2, #63	; 0x3f
 800135a:	409a      	lsls	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0216 	orr.w	r2, r2, #22
 800136e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0208 	orr.w	r2, r2, #8
 8001386:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e005      	b.n	80013a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013a2:	2302      	movs	r3, #2
 80013a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013bc:	4b92      	ldr	r3, [pc, #584]	; (8001608 <HAL_DMA_IRQHandler+0x258>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a92      	ldr	r2, [pc, #584]	; (800160c <HAL_DMA_IRQHandler+0x25c>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0a9b      	lsrs	r3, r3, #10
 80013c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013da:	2208      	movs	r2, #8
 80013dc:	409a      	lsls	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01a      	beq.n	800141c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0204 	bic.w	r2, r2, #4
 8001402:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	2208      	movs	r2, #8
 800140a:	409a      	lsls	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001414:	f043 0201 	orr.w	r2, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001420:	2201      	movs	r2, #1
 8001422:	409a      	lsls	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d012      	beq.n	8001452 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143e:	2201      	movs	r2, #1
 8001440:	409a      	lsls	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	f043 0202 	orr.w	r2, r3, #2
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	2204      	movs	r2, #4
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d012      	beq.n	8001488 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	2204      	movs	r2, #4
 8001476:	409a      	lsls	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	f043 0204 	orr.w	r2, r3, #4
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	2210      	movs	r2, #16
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d043      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03c      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	2210      	movs	r2, #16
 80014ac:	409a      	lsls	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d018      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d108      	bne.n	80014e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d024      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	4798      	blx	r3
 80014de:	e01f      	b.n	8001520 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01b      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
 80014f0:	e016      	b.n	8001520 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d107      	bne.n	8001510 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0208 	bic.w	r2, r2, #8
 800150e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2220      	movs	r2, #32
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 808e 	beq.w	800164e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8086 	beq.w	800164e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2220      	movs	r2, #32
 8001548:	409a      	lsls	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b05      	cmp	r3, #5
 8001558:	d136      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0216 	bic.w	r2, r2, #22
 8001568:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001578:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d103      	bne.n	800158a <HAL_DMA_IRQHandler+0x1da>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0208 	bic.w	r2, r2, #8
 8001598:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	223f      	movs	r2, #63	; 0x3f
 80015a0:	409a      	lsls	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d07d      	beq.n	80016ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4798      	blx	r3
        }
        return;
 80015c6:	e078      	b.n	80016ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d01c      	beq.n	8001610 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d108      	bne.n	80015f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d030      	beq.n	800164e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
 80015f4:	e02b      	b.n	800164e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d027      	beq.n	800164e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
 8001606:	e022      	b.n	800164e <HAL_DMA_IRQHandler+0x29e>
 8001608:	20000000 	.word	0x20000000
 800160c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0210 	bic.w	r2, r2, #16
 800162c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	2b00      	cmp	r3, #0
 8001654:	d032      	beq.n	80016bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d022      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2205      	movs	r2, #5
 8001666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0201 	bic.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3301      	adds	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	429a      	cmp	r2, r3
 8001684:	d307      	bcc.n	8001696 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f2      	bne.n	800167a <HAL_DMA_IRQHandler+0x2ca>
 8001694:	e000      	b.n	8001698 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001696:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
 80016b8:	e000      	b.n	80016bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80016ba:	bf00      	nop
    }
  }
}
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop

080016c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b40      	cmp	r3, #64	; 0x40
 80016f0:	d108      	bne.n	8001704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001702:	e007      	b.n	8001714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	60da      	str	r2, [r3, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3b10      	subs	r3, #16
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <DMA_CalcBaseAndBitshift+0x64>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800173a:	4a13      	ldr	r2, [pc, #76]	; (8001788 <DMA_CalcBaseAndBitshift+0x68>)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d909      	bls.n	8001762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	1d1a      	adds	r2, r3, #4
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	659a      	str	r2, [r3, #88]	; 0x58
 8001760:	e007      	b.n	8001772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800176a:	f023 0303 	bic.w	r3, r3, #3
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	aaaaaaab 	.word	0xaaaaaaab
 8001788:	08008c50 	.word	0x08008c50

0800178c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d11f      	bne.n	80017e6 <DMA_CheckFifoParam+0x5a>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d856      	bhi.n	800185a <DMA_CheckFifoParam+0xce>
 80017ac:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <DMA_CheckFifoParam+0x28>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	080017c5 	.word	0x080017c5
 80017b8:	080017d7 	.word	0x080017d7
 80017bc:	080017c5 	.word	0x080017c5
 80017c0:	0800185b 	.word	0x0800185b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d046      	beq.n	800185e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d4:	e043      	b.n	800185e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017de:	d140      	bne.n	8001862 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e4:	e03d      	b.n	8001862 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ee:	d121      	bne.n	8001834 <DMA_CheckFifoParam+0xa8>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d837      	bhi.n	8001866 <DMA_CheckFifoParam+0xda>
 80017f6:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <DMA_CheckFifoParam+0x70>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	08001813 	.word	0x08001813
 8001804:	0800180d 	.word	0x0800180d
 8001808:	08001825 	.word	0x08001825
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
      break;
 8001810:	e030      	b.n	8001874 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d025      	beq.n	800186a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001822:	e022      	b.n	800186a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800182c:	d11f      	bne.n	800186e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001832:	e01c      	b.n	800186e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d903      	bls.n	8001842 <DMA_CheckFifoParam+0xb6>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d003      	beq.n	8001848 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001840:	e018      	b.n	8001874 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
      break;
 8001846:	e015      	b.n	8001874 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00e      	beq.n	8001872 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
      break;
 8001858:	e00b      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
      break;
 800185a:	bf00      	nop
 800185c:	e00a      	b.n	8001874 <DMA_CheckFifoParam+0xe8>
      break;
 800185e:	bf00      	nop
 8001860:	e008      	b.n	8001874 <DMA_CheckFifoParam+0xe8>
      break;
 8001862:	bf00      	nop
 8001864:	e006      	b.n	8001874 <DMA_CheckFifoParam+0xe8>
      break;
 8001866:	bf00      	nop
 8001868:	e004      	b.n	8001874 <DMA_CheckFifoParam+0xe8>
      break;
 800186a:	bf00      	nop
 800186c:	e002      	b.n	8001874 <DMA_CheckFifoParam+0xe8>
      break;   
 800186e:	bf00      	nop
 8001870:	e000      	b.n	8001874 <DMA_CheckFifoParam+0xe8>
      break;
 8001872:	bf00      	nop
    }
  } 
  
  return status; 
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e177      	b.n	8001b90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8166 	bne.w	8001b8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d005      	beq.n	80018d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d130      	bne.n	8001938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b03      	cmp	r3, #3
 8001942:	d017      	beq.n	8001974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80c0 	beq.w	8001b8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a65      	ldr	r2, [pc, #404]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b63      	ldr	r3, [pc, #396]	; (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a26:	4a61      	ldr	r2, [pc, #388]	; (8001bac <HAL_GPIO_Init+0x328>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_GPIO_Init+0x32c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d037      	beq.n	8001ac2 <HAL_GPIO_Init+0x23e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_GPIO_Init+0x330>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d031      	beq.n	8001abe <HAL_GPIO_Init+0x23a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a56      	ldr	r2, [pc, #344]	; (8001bb8 <HAL_GPIO_Init+0x334>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d02b      	beq.n	8001aba <HAL_GPIO_Init+0x236>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a55      	ldr	r2, [pc, #340]	; (8001bbc <HAL_GPIO_Init+0x338>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d025      	beq.n	8001ab6 <HAL_GPIO_Init+0x232>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a54      	ldr	r2, [pc, #336]	; (8001bc0 <HAL_GPIO_Init+0x33c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01f      	beq.n	8001ab2 <HAL_GPIO_Init+0x22e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_GPIO_Init+0x340>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x22a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_GPIO_Init+0x344>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x226>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a51      	ldr	r2, [pc, #324]	; (8001bcc <HAL_GPIO_Init+0x348>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x222>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a50      	ldr	r2, [pc, #320]	; (8001bd0 <HAL_GPIO_Init+0x34c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x21e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4f      	ldr	r2, [pc, #316]	; (8001bd4 <HAL_GPIO_Init+0x350>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x21a>
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	e012      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	e010      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e00e      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e00c      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aaa:	2306      	movs	r3, #6
 8001aac:	e00a      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aae:	2305      	movs	r3, #5
 8001ab0:	e008      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e004      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f002 0203 	and.w	r2, r2, #3
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	4093      	lsls	r3, r2
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad4:	4935      	ldr	r1, [pc, #212]	; (8001bac <HAL_GPIO_Init+0x328>)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b06:	4a34      	ldr	r2, [pc, #208]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b0c:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b30:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	f67f ae84 	bls.w	80018a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40013800 	.word	0x40013800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020c00 	.word	0x40020c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40021400 	.word	0x40021400
 8001bc8:	40021800 	.word	0x40021800
 8001bcc:	40021c00 	.word	0x40021c00
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40022400 	.word	0x40022400
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e128      	b.n	8001e70 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <HAL_I2S_Init+0x26c>)
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7fe fee5 	bl	8000a08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2202      	movs	r2, #2
 8001c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c54:	f023 030f 	bic.w	r3, r3, #15
 8001c58:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d060      	beq.n	8001d2c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001c72:	2310      	movs	r3, #16
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e001      	b.n	8001c7c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d802      	bhi.n	8001c8a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f001 fb6c 	bl	8003368 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c90:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9a:	d125      	bne.n	8001ce8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	3305      	adds	r3, #5
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	e01f      	b.n	8001d06 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	3305      	adds	r3, #5
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e00e      	b.n	8001d06 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	3305      	adds	r3, #5
 8001d04:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4a5c      	ldr	r2, [pc, #368]	; (8001e7c <HAL_I2S_Init+0x270>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	e003      	b.n	8001d34 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d902      	bls.n	8001d40 <HAL_I2S_Init+0x134>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	2bff      	cmp	r3, #255	; 0xff
 8001d3e:	d907      	bls.n	8001d50 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	f043 0210 	orr.w	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e08f      	b.n	8001e70 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	ea42 0103 	orr.w	r1, r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d6e:	f023 030f 	bic.w	r3, r3, #15
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6851      	ldr	r1, [r2, #4]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6892      	ldr	r2, [r2, #8]
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	68d2      	ldr	r2, [r2, #12]
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6992      	ldr	r2, [r2, #24]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d92:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d161      	bne.n	8001e60 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a38      	ldr	r2, [pc, #224]	; (8001e80 <HAL_I2S_Init+0x274>)
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a37      	ldr	r2, [pc, #220]	; (8001e84 <HAL_I2S_Init+0x278>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d101      	bne.n	8001db0 <HAL_I2S_Init+0x1a4>
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_I2S_Init+0x27c>)
 8001dae:	e001      	b.n	8001db4 <HAL_I2S_Init+0x1a8>
 8001db0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	4932      	ldr	r1, [pc, #200]	; (8001e84 <HAL_I2S_Init+0x278>)
 8001dbc:	428a      	cmp	r2, r1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_I2S_Init+0x1b8>
 8001dc0:	4a31      	ldr	r2, [pc, #196]	; (8001e88 <HAL_I2S_Init+0x27c>)
 8001dc2:	e001      	b.n	8001dc8 <HAL_I2S_Init+0x1bc>
 8001dc4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001dc8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001dcc:	f023 030f 	bic.w	r3, r3, #15
 8001dd0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a2b      	ldr	r2, [pc, #172]	; (8001e84 <HAL_I2S_Init+0x278>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_I2S_Init+0x1d4>
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_I2S_Init+0x27c>)
 8001dde:	e001      	b.n	8001de4 <HAL_I2S_Init+0x1d8>
 8001de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001de4:	2202      	movs	r2, #2
 8001de6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <HAL_I2S_Init+0x278>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_I2S_Init+0x1ea>
 8001df2:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_I2S_Init+0x27c>)
 8001df4:	e001      	b.n	8001dfa <HAL_I2S_Init+0x1ee>
 8001df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e06:	d003      	beq.n	8001e10 <HAL_I2S_Init+0x204>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	e001      	b.n	8001e1c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e26:	4313      	orrs	r3, r2
 8001e28:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	897b      	ldrh	r3, [r7, #10]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e48:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <HAL_I2S_Init+0x278>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_I2S_Init+0x24c>
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_I2S_Init+0x27c>)
 8001e56:	e001      	b.n	8001e5c <HAL_I2S_Init+0x250>
 8001e58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e5c:	897a      	ldrh	r2, [r7, #10]
 8001e5e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	080021a5 	.word	0x080021a5
 8001e7c:	cccccccd 	.word	0xcccccccd
 8001e80:	080022b9 	.word	0x080022b9
 8001e84:	40003800 	.word	0x40003800
 8001e88:	40003400 	.word	0x40003400

08001e8c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_I2S_Receive_DMA+0x1a>
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0a1      	b.n	8001fee <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_I2S_Receive_DMA+0x2e>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e099      	b.n	8001fee <HAL_I2S_Receive_DMA+0x162>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d005      	beq.n	8001eda <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e089      	b.n	8001fee <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2204      	movs	r2, #4
 8001ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d002      	beq.n	8001f06 <HAL_I2S_Receive_DMA+0x7a>
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d10a      	bne.n	8001f1c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	865a      	strh	r2, [r3, #50]	; 0x32
 8001f1a:	e005      	b.n	8001f28 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	88fa      	ldrh	r2, [r7, #6]
 8001f20:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	88fa      	ldrh	r2, [r7, #6]
 8001f26:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	4a32      	ldr	r2, [pc, #200]	; (8001ff8 <HAL_I2S_Receive_DMA+0x16c>)
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	4a31      	ldr	r2, [pc, #196]	; (8001ffc <HAL_I2S_Receive_DMA+0x170>)
 8001f36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	4a30      	ldr	r2, [pc, #192]	; (8002000 <HAL_I2S_Receive_DMA+0x174>)
 8001f3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f4e:	d10a      	bne.n	8001f66 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	330c      	adds	r3, #12
 8001f70:	4619      	mov	r1, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001f7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001f7e:	f7ff f9bf 	bl	8001300 <HAL_DMA_Start_IT>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00f      	beq.n	8001fa8 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f043 0208 	orr.w	r2, r3, #8
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e022      	b.n	8001fee <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d107      	bne.n	8001fc6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69da      	ldr	r2, [r3, #28]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fc4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08002083 	.word	0x08002083
 8001ffc:	08002041 	.word	0x08002041
 8002000:	0800209f 	.word	0x0800209f

08002004 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10e      	bne.n	8002074 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7fe fc85 	bl	8000984 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff ffc1 	bl	8002018 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0203 	bic.w	r2, r2, #3
 80020ba:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	f043 0208 	orr.w	r2, r3, #8
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff ffa5 	bl	800202c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	881a      	ldrh	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c9a      	adds	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10e      	bne.n	800213e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800212e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff63 	bl	8002004 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	b292      	uxth	r2, r2
 800215a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	1c9a      	adds	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10e      	bne.n	800219c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800218c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fbf4 	bl	8000984 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d13a      	bne.n	8002236 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d109      	bne.n	80021de <I2S_IRQHandler+0x3a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d102      	bne.n	80021de <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ffb4 	bl	8002146 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d126      	bne.n	8002236 <I2S_IRQHandler+0x92>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d11f      	bne.n	8002236 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002204:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f043 0202 	orr.w	r2, r3, #2
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff fefb 	bl	800202c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b03      	cmp	r3, #3
 8002240:	d136      	bne.n	80022b0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b02      	cmp	r3, #2
 800224a:	d109      	bne.n	8002260 <I2S_IRQHandler+0xbc>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	2b80      	cmp	r3, #128	; 0x80
 8002258:	d102      	bne.n	8002260 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff45 	bl	80020ea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b08      	cmp	r3, #8
 8002268:	d122      	bne.n	80022b0 <I2S_IRQHandler+0x10c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b20      	cmp	r3, #32
 8002276:	d11b      	bne.n	80022b0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002286:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff febe 	bl	800202c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4aa2      	ldr	r2, [pc, #648]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80022d2:	4ba2      	ldr	r3, [pc, #648]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022d4:	e001      	b.n	80022da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80022d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a9b      	ldr	r2, [pc, #620]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80022f0:	4b9a      	ldr	r3, [pc, #616]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022f2:	e001      	b.n	80022f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80022f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002304:	d004      	beq.n	8002310 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8099 	bne.w	8002442 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d107      	bne.n	800232a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f925 	bl	8002574 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d107      	bne.n	8002344 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f9c8 	bl	80026d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d13a      	bne.n	80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d035      	beq.n	80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a7e      	ldr	r2, [pc, #504]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002362:	4b7e      	ldr	r3, [pc, #504]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002364:	e001      	b.n	800236a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4979      	ldr	r1, [pc, #484]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002372:	428b      	cmp	r3, r1
 8002374:	d101      	bne.n	800237a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002376:	4b79      	ldr	r3, [pc, #484]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002378:	e001      	b.n	800237e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800237a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800237e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002382:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002392:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f043 0202 	orr.w	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fe34 	bl	800202c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	f040 80be 	bne.w	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80b8 	beq.w	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80023f6:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023f8:	e001      	b.n	80023fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80023fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4954      	ldr	r1, [pc, #336]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002406:	428b      	cmp	r3, r1
 8002408:	d101      	bne.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800240a:	4b54      	ldr	r3, [pc, #336]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800240c:	e001      	b.n	8002412 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800240e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002412:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002416:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f043 0204 	orr.w	r2, r3, #4
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fdf6 	bl	800202c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002440:	e084      	b.n	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b02      	cmp	r3, #2
 800244a:	d107      	bne.n	800245c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8be 	bl	80025d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8fd 	bl	8002670 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d12f      	bne.n	80024e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02a      	beq.n	80024e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002498:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2e      	ldr	r2, [pc, #184]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d101      	bne.n	80024a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024a6:	e001      	b.n	80024ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80024a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4929      	ldr	r1, [pc, #164]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024b4:	428b      	cmp	r3, r1
 80024b6:	d101      	bne.n	80024bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80024b8:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80024ba:	e001      	b.n	80024c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80024bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f043 0202 	orr.w	r2, r3, #2
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fda6 	bl	800202c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d131      	bne.n	800254e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02c      	beq.n	800254e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002500:	e001      	b.n	8002506 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4912      	ldr	r1, [pc, #72]	; (8002558 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800250e:	428b      	cmp	r3, r1
 8002510:	d101      	bne.n	8002516 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002514:	e001      	b.n	800251a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800251a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800251e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800252e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f043 0204 	orr.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fd71 	bl	800202c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800254a:	e000      	b.n	800254e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800254c:	bf00      	nop
}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40003800 	.word	0x40003800
 800255c:	40003400 	.word	0x40003400

08002560 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	1c99      	adds	r1, r3, #2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6251      	str	r1, [r2, #36]	; 0x24
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d113      	bne.n	80025ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d106      	bne.n	80025ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ffc9 	bl	8002560 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c99      	adds	r1, r3, #2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6251      	str	r1, [r2, #36]	; 0x24
 80025ea:	8819      	ldrh	r1, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1d      	ldr	r2, [pc, #116]	; (8002668 <I2SEx_TxISR_I2SExt+0x90>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <I2SEx_TxISR_I2SExt+0x22>
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <I2SEx_TxISR_I2SExt+0x94>)
 80025f8:	e001      	b.n	80025fe <I2SEx_TxISR_I2SExt+0x26>
 80025fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025fe:	460a      	mov	r2, r1
 8002600:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d121      	bne.n	800265e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <I2SEx_TxISR_I2SExt+0x90>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <I2SEx_TxISR_I2SExt+0x50>
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <I2SEx_TxISR_I2SExt+0x94>)
 8002626:	e001      	b.n	800262c <I2SEx_TxISR_I2SExt+0x54>
 8002628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	490d      	ldr	r1, [pc, #52]	; (8002668 <I2SEx_TxISR_I2SExt+0x90>)
 8002634:	428b      	cmp	r3, r1
 8002636:	d101      	bne.n	800263c <I2SEx_TxISR_I2SExt+0x64>
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <I2SEx_TxISR_I2SExt+0x94>)
 800263a:	e001      	b.n	8002640 <I2SEx_TxISR_I2SExt+0x68>
 800263c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002640:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002644:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff81 	bl	8002560 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40003800 	.word	0x40003800
 800266c:	40003400 	.word	0x40003400

08002670 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68d8      	ldr	r0, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002682:	1c99      	adds	r1, r3, #2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002688:	b282      	uxth	r2, r0
 800268a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d113      	bne.n	80026cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ff4a 	bl	8002560 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a20      	ldr	r2, [pc, #128]	; (8002764 <I2SEx_RxISR_I2SExt+0x90>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d101      	bne.n	80026ea <I2SEx_RxISR_I2SExt+0x16>
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <I2SEx_RxISR_I2SExt+0x94>)
 80026e8:	e001      	b.n	80026ee <I2SEx_RxISR_I2SExt+0x1a>
 80026ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ee:	68d8      	ldr	r0, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	1c99      	adds	r1, r3, #2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80026fa:	b282      	uxth	r2, r0
 80026fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d121      	bne.n	800275a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <I2SEx_RxISR_I2SExt+0x90>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <I2SEx_RxISR_I2SExt+0x50>
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <I2SEx_RxISR_I2SExt+0x94>)
 8002722:	e001      	b.n	8002728 <I2SEx_RxISR_I2SExt+0x54>
 8002724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	490d      	ldr	r1, [pc, #52]	; (8002764 <I2SEx_RxISR_I2SExt+0x90>)
 8002730:	428b      	cmp	r3, r1
 8002732:	d101      	bne.n	8002738 <I2SEx_RxISR_I2SExt+0x64>
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <I2SEx_RxISR_I2SExt+0x94>)
 8002736:	e001      	b.n	800273c <I2SEx_RxISR_I2SExt+0x68>
 8002738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800273c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002740:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff03 	bl	8002560 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40003800 	.word	0x40003800
 8002768:	40003400 	.word	0x40003400

0800276c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e264      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d075      	beq.n	8002876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278a:	4ba3      	ldr	r3, [pc, #652]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d00c      	beq.n	80027b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002796:	4ba0      	ldr	r3, [pc, #640]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d112      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a2:	4b9d      	ldr	r3, [pc, #628]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ae:	d10b      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	4b99      	ldr	r3, [pc, #612]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d05b      	beq.n	8002874 <HAL_RCC_OscConfig+0x108>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d157      	bne.n	8002874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e23f      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d0:	d106      	bne.n	80027e0 <HAL_RCC_OscConfig+0x74>
 80027d2:	4b91      	ldr	r3, [pc, #580]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a90      	ldr	r2, [pc, #576]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x98>
 80027ea:	4b8b      	ldr	r3, [pc, #556]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a8a      	ldr	r2, [pc, #552]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b88      	ldr	r3, [pc, #544]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a87      	ldr	r2, [pc, #540]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 8002804:	4b84      	ldr	r3, [pc, #528]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a83      	ldr	r2, [pc, #524]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b81      	ldr	r3, [pc, #516]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a80      	ldr	r2, [pc, #512]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fb7c 	bl	8000f20 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fb78 	bl	8000f20 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e204      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xc0>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe fb68 	bl	8000f20 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe fb64 	bl	8000f20 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1f0      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0xe8>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d063      	beq.n	800294a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002882:	4b65      	ldr	r3, [pc, #404]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b62      	ldr	r3, [pc, #392]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b5c      	ldr	r3, [pc, #368]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1c4      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4952      	ldr	r1, [pc, #328]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b4f      	ldr	r3, [pc, #316]	; (8002a1c <HAL_RCC_OscConfig+0x2b0>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fb1d 	bl	8000f20 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe fb19 	bl	8000f20 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1a5      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4940      	ldr	r1, [pc, #256]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <HAL_RCC_OscConfig+0x2b0>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fafc 	bl	8000f20 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe faf8 	bl	8000f20 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e184      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d030      	beq.n	80029b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <HAL_RCC_OscConfig+0x2b4>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fadc 	bl	8000f20 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe fad8 	bl	8000f20 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e164      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x200>
 800298a:	e015      	b.n	80029b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x2b4>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fe fac5 	bl	8000f20 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299a:	f7fe fac1 	bl	8000f20 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e14d      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a0 	beq.w	8002b06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c6:	2300      	movs	r3, #0
 80029c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f2:	2301      	movs	r3, #1
 80029f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x2b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d121      	bne.n	8002a46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_RCC_OscConfig+0x2b8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <HAL_RCC_OscConfig+0x2b8>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fa87 	bl	8000f20 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	e011      	b.n	8002a3a <HAL_RCC_OscConfig+0x2ce>
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	42470000 	.word	0x42470000
 8002a20:	42470e80 	.word	0x42470e80
 8002a24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fe fa7a 	bl	8000f20 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e106      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b85      	ldr	r3, [pc, #532]	; (8002c50 <HAL_RCC_OscConfig+0x4e4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d106      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
 8002a4e:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a80      	ldr	r2, [pc, #512]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5a:	e01c      	b.n	8002a96 <HAL_RCC_OscConfig+0x32a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d10c      	bne.n	8002a7e <HAL_RCC_OscConfig+0x312>
 8002a64:	4b7b      	ldr	r3, [pc, #492]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	4a7a      	ldr	r2, [pc, #488]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a70:	4b78      	ldr	r3, [pc, #480]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a77      	ldr	r2, [pc, #476]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	e00b      	b.n	8002a96 <HAL_RCC_OscConfig+0x32a>
 8002a7e:	4b75      	ldr	r3, [pc, #468]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a74      	ldr	r2, [pc, #464]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8a:	4b72      	ldr	r3, [pc, #456]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a71      	ldr	r2, [pc, #452]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d015      	beq.n	8002aca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fa3f 	bl	8000f20 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe fa3b 	bl	8000f20 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e0c5      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abc:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ee      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x33a>
 8002ac8:	e014      	b.n	8002af4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aca:	f7fe fa29 	bl	8000f20 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fa25 	bl	8000f20 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e0af      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae8:	4b5a      	ldr	r3, [pc, #360]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1ee      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d105      	bne.n	8002b06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afa:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a55      	ldr	r2, [pc, #340]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 809b 	beq.w	8002c46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b10:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d05c      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d141      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b24:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <HAL_RCC_OscConfig+0x4ec>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe f9f9 	bl	8000f20 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe f9f5 	bl	8000f20 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e081      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b44:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	019b      	lsls	r3, r3, #6
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	061b      	lsls	r3, r3, #24
 8002b74:	4937      	ldr	r1, [pc, #220]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_RCC_OscConfig+0x4ec>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe f9ce 	bl	8000f20 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe f9ca 	bl	8000f20 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e056      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x41c>
 8002ba6:	e04e      	b.n	8002c46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_OscConfig+0x4ec>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe f9b7 	bl	8000f20 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe f9b3 	bl	8000f20 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e03f      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc8:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x44a>
 8002bd4:	e037      	b.n	8002c46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e032      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be2:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <HAL_RCC_OscConfig+0x4e8>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d028      	beq.n	8002c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d121      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d11a      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d111      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40007000 	.word	0x40007000
 8002c54:	40023800 	.word	0x40023800
 8002c58:	42470060 	.word	0x42470060

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0cc      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b68      	ldr	r3, [pc, #416]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d90c      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b63      	ldr	r3, [pc, #396]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b8      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	494d      	ldr	r1, [pc, #308]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d044      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d119      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e07f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e067      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4934      	ldr	r1, [pc, #208]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fe f8e8 	bl	8000f20 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fe f8e4 	bl	8000f20 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e04f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d20c      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4916      	ldr	r1, [pc, #88]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	490e      	ldr	r1, [pc, #56]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002de2:	f000 f821 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	490a      	ldr	r1, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	5ccb      	ldrb	r3, [r1, r3]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe f848 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	08008c40 	.word	0x08008c40
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e40:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d00d      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x40>
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	f200 80bd 	bhi.w	8002fcc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x34>
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d003      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5a:	e0b7      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e5e:	60bb      	str	r3, [r7, #8]
       break;
 8002e60:	e0b7      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e62:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e64:	60bb      	str	r3, [r7, #8]
      break;
 8002e66:	e0b4      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e68:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e72:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d04d      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7e:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	461a      	mov	r2, r3
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	ea02 0800 	and.w	r8, r2, r0
 8002e96:	ea03 0901 	and.w	r9, r3, r1
 8002e9a:	4640      	mov	r0, r8
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	014b      	lsls	r3, r1, #5
 8002ea8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002eac:	0142      	lsls	r2, r0, #5
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	ebb0 0008 	subs.w	r0, r0, r8
 8002eb6:	eb61 0109 	sbc.w	r1, r1, r9
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	018b      	lsls	r3, r1, #6
 8002ec4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ec8:	0182      	lsls	r2, r0, #6
 8002eca:	1a12      	subs	r2, r2, r0
 8002ecc:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed0:	f04f 0000 	mov.w	r0, #0
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	00d9      	lsls	r1, r3, #3
 8002eda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ede:	00d0      	lsls	r0, r2, #3
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	eb12 0208 	adds.w	r2, r2, r8
 8002ee8:	eb43 0309 	adc.w	r3, r3, r9
 8002eec:	f04f 0000 	mov.w	r0, #0
 8002ef0:	f04f 0100 	mov.w	r1, #0
 8002ef4:	0259      	lsls	r1, r3, #9
 8002ef6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002efa:	0250      	lsls	r0, r2, #9
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f7fd f9c0 	bl	8000290 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e04a      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	461a      	mov	r2, r3
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	ea02 0400 	and.w	r4, r2, r0
 8002f32:	ea03 0501 	and.w	r5, r3, r1
 8002f36:	4620      	mov	r0, r4
 8002f38:	4629      	mov	r1, r5
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	014b      	lsls	r3, r1, #5
 8002f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f48:	0142      	lsls	r2, r0, #5
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	1b00      	subs	r0, r0, r4
 8002f50:	eb61 0105 	sbc.w	r1, r1, r5
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	018b      	lsls	r3, r1, #6
 8002f5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f62:	0182      	lsls	r2, r0, #6
 8002f64:	1a12      	subs	r2, r2, r0
 8002f66:	eb63 0301 	sbc.w	r3, r3, r1
 8002f6a:	f04f 0000 	mov.w	r0, #0
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	00d9      	lsls	r1, r3, #3
 8002f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f78:	00d0      	lsls	r0, r2, #3
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	1912      	adds	r2, r2, r4
 8002f80:	eb45 0303 	adc.w	r3, r5, r3
 8002f84:	f04f 0000 	mov.w	r0, #0
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	0299      	lsls	r1, r3, #10
 8002f8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f92:	0290      	lsls	r0, r2, #10
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	f7fd f974 	bl	8000290 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4613      	mov	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	60bb      	str	r3, [r7, #8]
      break;
 8002fca:	e002      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fcc:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fce:	60bb      	str	r3, [r7, #8]
      break;
 8002fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10b      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800301c:	2b00      	cmp	r3, #0
 800301e:	d075      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003020:	4bad      	ldr	r3, [pc, #692]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003026:	f7fd ff7b 	bl	8000f20 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800302e:	f7fd ff77 	bl	8000f20 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e18b      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003040:	4ba6      	ldr	r3, [pc, #664]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f0      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	019a      	lsls	r2, r3, #6
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	071b      	lsls	r3, r3, #28
 8003064:	499d      	ldr	r1, [pc, #628]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01f      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003078:	4b98      	ldr	r3, [pc, #608]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800307a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307e:	0f1b      	lsrs	r3, r3, #28
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	019a      	lsls	r2, r3, #6
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	431a      	orrs	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	071b      	lsls	r3, r3, #28
 8003098:	4990      	ldr	r1, [pc, #576]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030a0:	4b8e      	ldr	r3, [pc, #568]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a6:	f023 021f 	bic.w	r2, r3, #31
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	498a      	ldr	r1, [pc, #552]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	019a      	lsls	r2, r3, #6
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	071b      	lsls	r3, r3, #28
 80030d8:	4980      	ldr	r1, [pc, #512]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030e0:	4b7d      	ldr	r3, [pc, #500]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030e6:	f7fd ff1b 	bl	8000f20 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ee:	f7fd ff17 	bl	8000f20 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e12b      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003100:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003120:	2b00      	cmp	r3, #0
 8003122:	d079      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003124:	4b6e      	ldr	r3, [pc, #440]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800312a:	f7fd fef9 	bl	8000f20 <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003132:	f7fd fef5 	bl	8000f20 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e109      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003144:	4b65      	ldr	r3, [pc, #404]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800314c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003150:	d0ef      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d020      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800315e:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003164:	0f1b      	lsrs	r3, r3, #28
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	019a      	lsls	r2, r3, #6
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	431a      	orrs	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	4957      	ldr	r1, [pc, #348]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003186:	4b55      	ldr	r3, [pc, #340]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800318c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	3b01      	subs	r3, #1
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	4950      	ldr	r1, [pc, #320]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01e      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ac:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	0e1b      	lsrs	r3, r3, #24
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	019a      	lsls	r2, r3, #6
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	061b      	lsls	r3, r3, #24
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	071b      	lsls	r3, r3, #28
 80031cc:	4943      	ldr	r1, [pc, #268]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031d4:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	493e      	ldr	r1, [pc, #248]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031f0:	f7fd fe96 	bl	8000f20 <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031f8:	f7fd fe92 	bl	8000f20 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e0a6      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003216:	d1ef      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 808d 	beq.w	8003340 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800324e:	f7fd fe67 	bl	8000f20 <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003256:	f7fd fe63 	bl	8000f20 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e077      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d039      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	429a      	cmp	r2, r3
 8003290:	d032      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032a8:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d11e      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fd fe31 	bl	8000f20 <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	e014      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fd fe2d 	bl	8000f20 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d90b      	bls.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e03f      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80032d8:	42470068 	.word	0x42470068
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470070 	.word	0x42470070
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0e4      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003304:	d10d      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331a:	4911      	ldr	r1, [pc, #68]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800331c:	4313      	orrs	r3, r2
 800331e:	608b      	str	r3, [r1, #8]
 8003320:	e005      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003328:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800332c:	6093      	str	r3, [r2, #8]
 800332e:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003330:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333a:	4909      	ldr	r1, [pc, #36]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800333c:	4313      	orrs	r3, r2
 800333e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003354:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	424711e0 	.word	0x424711e0

08003368 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d13e      	bne.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d12f      	bne.n	80033fc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800339e:	617b      	str	r3, [r7, #20]
          break;
 80033a0:	e02f      	b.n	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033a2:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ae:	d108      	bne.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033b0:	4b18      	ldr	r3, [pc, #96]	; (8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b8:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e007      	b.n	80033d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ca:	4a15      	ldr	r2, [pc, #84]	; (8003420 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80033e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ec:	0f1b      	lsrs	r3, r3, #28
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
          break;
 80033fa:	e002      	b.n	8003402 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
          break;
 8003400:	bf00      	nop
        }
      }
      break;
 8003402:	bf00      	nop
    }
  }
  return frequency;
 8003404:	697b      	ldr	r3, [r7, #20]
}
 8003406:	4618      	mov	r0, r3
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	00bb8000 	.word	0x00bb8000
 800341c:	007a1200 	.word	0x007a1200
 8003420:	00f42400 	.word	0x00f42400

08003424 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7fd fb91 	bl	8000b70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2203      	movs	r2, #3
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f814 	bl	8003484 <HAL_SD_InitCard>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e00a      	b.n	800347c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003484:	b5b0      	push	{r4, r5, r7, lr}
 8003486:	b08e      	sub	sp, #56	; 0x38
 8003488:	af04      	add	r7, sp, #16
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80034a0:	2376      	movs	r3, #118	; 0x76
 80034a2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681d      	ldr	r5, [r3, #0]
 80034a8:	466c      	mov	r4, sp
 80034aa:	f107 0314 	add.w	r3, r7, #20
 80034ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034bc:	4628      	mov	r0, r5
 80034be:	f001 f938 	bl	8004732 <SDIO_Init>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80034c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e04c      	b.n	800356e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80034d4:	4b28      	ldr	r3, [pc, #160]	; (8003578 <HAL_SD_InitCard+0xf4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 f970 	bl	80047c4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80034e4:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_SD_InitCard+0xf4>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 ff02 	bl	80042f4 <SD_PowerON>
 80034f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e02e      	b.n	800356e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fe23 	bl	800415c <SD_InitCard>
 8003516:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e01b      	b.n	800356e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800353e:	4618      	mov	r0, r3
 8003540:	f001 f9d3 	bl	80048ea <SDMMC_CmdBlockLength>
 8003544:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00f      	beq.n	800356c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	; (800357c <HAL_SD_InitCard+0xf8>)
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3728      	adds	r7, #40	; 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bdb0      	pop	{r4, r5, r7, pc}
 8003576:	bf00      	nop
 8003578:	422580a0 	.word	0x422580a0
 800357c:	004005ff 	.word	0x004005ff

08003580 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b092      	sub	sp, #72	; 0x48
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800358e:	f7fd fcc7 	bl	8000f20 <HAL_GetTick>
 8003592:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e1bd      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	f040 81b0 	bne.w	8003920 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80035c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	441a      	add	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d907      	bls.n	80035e4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e1a4      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2203      	movs	r2, #3
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2200      	movs	r2, #0
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d002      	beq.n	8003602 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	025b      	lsls	r3, r3, #9
 8003600:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	025b      	lsls	r3, r3, #9
 800360c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800360e:	2390      	movs	r3, #144	; 0x90
 8003610:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003612:	2302      	movs	r3, #2
 8003614:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800361a:	2301      	movs	r3, #1
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f107 0214 	add.w	r2, r7, #20
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f001 f932 	bl	8004892 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d90a      	bls.n	800364a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2202      	movs	r2, #2
 8003638:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f996 	bl	8004972 <SDMMC_CmdReadMultiBlock>
 8003646:	6478      	str	r0, [r7, #68]	; 0x44
 8003648:	e009      	b.n	800365e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f969 	bl	800492e <SDMMC_CmdReadSingleBlock>
 800365c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800365e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a7a      	ldr	r2, [pc, #488]	; (8003854 <HAL_SD_ReadBlocks+0x2d4>)
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003672:	431a      	orrs	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e151      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800368e:	e061      	b.n	8003754 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03c      	beq.n	8003718 <HAL_SD_ReadBlocks+0x198>
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d039      	beq.n	8003718 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
 80036a8:	e033      	b.n	8003712 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f86a 	bl	8004788 <SDIO_ReadFIFO>
 80036b4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80036be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c0:	3301      	adds	r3, #1
 80036c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c6:	3b01      	subs	r3, #1
 80036c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	3301      	adds	r3, #1
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	3b01      	subs	r3, #1
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80036ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ec:	3301      	adds	r3, #1
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80036f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f2:	3b01      	subs	r3, #1
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	0e1b      	lsrs	r3, r3, #24
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	3301      	adds	r3, #1
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003708:	3b01      	subs	r3, #1
 800370a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800370c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370e:	3301      	adds	r3, #1
 8003710:	643b      	str	r3, [r7, #64]	; 0x40
 8003712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003714:	2b07      	cmp	r3, #7
 8003716:	d9c8      	bls.n	80036aa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003718:	f7fd fc02 	bl	8000f20 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003724:	429a      	cmp	r2, r3
 8003726:	d902      	bls.n	800372e <HAL_SD_ReadBlocks+0x1ae>
 8003728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372a:	2b00      	cmp	r3, #0
 800372c:	d112      	bne.n	8003754 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a48      	ldr	r2, [pc, #288]	; (8003854 <HAL_SD_ReadBlocks+0x2d4>)
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0ec      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375a:	f240 332a 	movw	r3, #810	; 0x32a
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d095      	beq.n	8003690 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d022      	beq.n	80037b8 <HAL_SD_ReadBlocks+0x238>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d91f      	bls.n	80037b8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	2b03      	cmp	r3, #3
 800377e:	d01b      	beq.n	80037b8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f001 f95b 	bl	8004a40 <SDMMC_CmdStopTransfer>
 800378a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800378c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378e:	2b00      	cmp	r3, #0
 8003790:	d012      	beq.n	80037b8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a2f      	ldr	r2, [pc, #188]	; (8003854 <HAL_SD_ReadBlocks+0x2d4>)
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0ba      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d012      	beq.n	80037ec <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_SD_ReadBlocks+0x2d4>)
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	f043 0208 	orr.w	r2, r3, #8
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0a0      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a15      	ldr	r2, [pc, #84]	; (8003854 <HAL_SD_ReadBlocks+0x2d4>)
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	f043 0202 	orr.w	r2, r3, #2
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e086      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d063      	beq.n	80038f6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a08      	ldr	r2, [pc, #32]	; (8003854 <HAL_SD_ReadBlocks+0x2d4>)
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e06c      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
 8003854:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 ff93 	bl	8004788 <SDIO_ReadFIFO>
 8003862:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	b2da      	uxtb	r2, r3
 8003868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	3301      	adds	r3, #1
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003874:	3b01      	subs	r3, #1
 8003876:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	b2da      	uxtb	r2, r3
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003884:	3301      	adds	r3, #1
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388a:	3b01      	subs	r3, #1
 800388c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	b2da      	uxtb	r2, r3
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	3301      	adds	r3, #1
 800389c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	3b01      	subs	r3, #1
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	0e1b      	lsrs	r3, r3, #24
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80038ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b0:	3301      	adds	r3, #1
 80038b2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80038b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b6:	3b01      	subs	r3, #1
 80038b8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80038ba:	f7fd fb31 	bl	8000f20 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d902      	bls.n	80038d0 <HAL_SD_ReadBlocks+0x350>
 80038ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d112      	bne.n	80038f6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a18      	ldr	r2, [pc, #96]	; (8003938 <HAL_SD_ReadBlocks+0x3b8>)
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e01b      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_SD_ReadBlocks+0x38a>
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1a6      	bne.n	8003858 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003912:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e006      	b.n	800392e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3748      	adds	r7, #72	; 0x48
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	004005ff 	.word	0x004005ff

0800393c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b092      	sub	sp, #72	; 0x48
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800394a:	f7fd fae9 	bl	8000f20 <HAL_GetTick>
 800394e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e166      	b.n	8003c3c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	f040 8159 	bne.w	8003c2e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	441a      	add	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	429a      	cmp	r2, r3
 800398e:	d907      	bls.n	80039a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e14d      	b.n	8003c3c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2203      	movs	r2, #3
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2200      	movs	r2, #0
 80039ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d002      	beq.n	80039be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80039b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ba:	025b      	lsls	r3, r3, #9
 80039bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
 80039c2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	025b      	lsls	r3, r3, #9
 80039c8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80039ca:	2390      	movs	r3, #144	; 0x90
 80039cc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80039ce:	2300      	movs	r3, #0
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f107 0218 	add.w	r2, r7, #24
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 ff54 	bl	8004892 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d90a      	bls.n	8003a06 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fffc 	bl	80049fa <SDMMC_CmdWriteMultiBlock>
 8003a02:	6478      	str	r0, [r7, #68]	; 0x44
 8003a04:	e009      	b.n	8003a1a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 ffcf 	bl	80049b6 <SDMMC_CmdWriteSingleBlock>
 8003a18:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a87      	ldr	r2, [pc, #540]	; (8003c44 <HAL_SD_WriteBlocks+0x308>)
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0fa      	b.n	8003c3c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003a4a:	e065      	b.n	8003b18 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d040      	beq.n	8003adc <HAL_SD_WriteBlocks+0x1a0>
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d03d      	beq.n	8003adc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003a60:	2300      	movs	r3, #0
 8003a62:	643b      	str	r3, [r7, #64]	; 0x40
 8003a64:	e037      	b.n	8003ad6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6e:	3301      	adds	r3, #1
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a74:	3b01      	subs	r3, #1
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a86:	3301      	adds	r3, #1
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	041a      	lsls	r2, r3, #16
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	061a      	lsls	r2, r3, #24
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abc:	3b01      	subs	r3, #1
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f107 0214 	add.w	r2, r7, #20
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fe69 	bl	80047a2 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad8:	2b07      	cmp	r3, #7
 8003ada:	d9c4      	bls.n	8003a66 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003adc:	f7fd fa20 	bl	8000f20 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d902      	bls.n	8003af2 <HAL_SD_WriteBlocks+0x1b6>
 8003aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d112      	bne.n	8003b18 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a53      	ldr	r2, [pc, #332]	; (8003c44 <HAL_SD_WriteBlocks+0x308>)
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e091      	b.n	8003c3c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1e:	f240 331a 	movw	r3, #794	; 0x31a
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d091      	beq.n	8003a4c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d022      	beq.n	8003b7c <HAL_SD_WriteBlocks+0x240>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d91f      	bls.n	8003b7c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d01b      	beq.n	8003b7c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 ff79 	bl	8004a40 <SDMMC_CmdStopTransfer>
 8003b4e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d012      	beq.n	8003b7c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a3a      	ldr	r2, [pc, #232]	; (8003c44 <HAL_SD_WriteBlocks+0x308>)
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e05f      	b.n	8003c3c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d012      	beq.n	8003bb0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2d      	ldr	r2, [pc, #180]	; (8003c44 <HAL_SD_WriteBlocks+0x308>)
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	f043 0208 	orr.w	r2, r3, #8
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e045      	b.n	8003c3c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d012      	beq.n	8003be4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <HAL_SD_WriteBlocks+0x308>)
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	f043 0202 	orr.w	r2, r3, #2
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e02b      	b.n	8003c3c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d012      	beq.n	8003c18 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <HAL_SD_WriteBlocks+0x308>)
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	f043 0210 	orr.w	r2, r3, #16
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e011      	b.n	8003c3c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e006      	b.n	8003c3c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3748      	adds	r7, #72	; 0x48
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	004005ff 	.word	0x004005ff

08003c48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c56:	0f9b      	lsrs	r3, r3, #30
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c62:	0e9b      	lsrs	r3, r3, #26
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c74:	0e1b      	lsrs	r3, r3, #24
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca8:	0d1b      	lsrs	r3, r3, #20
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc6:	0bdb      	lsrs	r3, r3, #15
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd8:	0b9b      	lsrs	r3, r3, #14
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cea:	0b5b      	lsrs	r3, r3, #13
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cfc:	0b1b      	lsrs	r3, r3, #12
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d163      	bne.n	8003de0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d1c:	009a      	lsls	r2, r3, #2
 8003d1e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d22:	4013      	ands	r3, r2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003d28:	0f92      	lsrs	r2, r2, #30
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d34:	0edb      	lsrs	r3, r3, #27
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d46:	0e1b      	lsrs	r3, r3, #24
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d58:	0d5b      	lsrs	r3, r3, #21
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6a:	0c9b      	lsrs	r3, r3, #18
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7c:	0bdb      	lsrs	r3, r3, #15
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	7e1b      	ldrb	r3, [r3, #24]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	3302      	adds	r3, #2
 8003da0:	2201      	movs	r2, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003daa:	fb02 f203 	mul.w	r2, r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	7a1b      	ldrb	r3, [r3, #8]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003dcc:	0a52      	lsrs	r2, r2, #9
 8003dce:	fb02 f203 	mul.w	r2, r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ddc:	661a      	str	r2, [r3, #96]	; 0x60
 8003dde:	e031      	b.n	8003e44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d11d      	bne.n	8003e24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dec:	041b      	lsls	r3, r3, #16
 8003dee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df6:	0c1b      	lsrs	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	3301      	adds	r3, #1
 8003e04:	029a      	lsls	r2, r3, #10
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e18:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	661a      	str	r2, [r3, #96]	; 0x60
 8003e22:	e00f      	b.n	8003e44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <HAL_SD_GetCardCSD+0x344>)
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e09d      	b.n	8003f80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e48:	0b9b      	lsrs	r3, r3, #14
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5a:	09db      	lsrs	r3, r3, #7
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	0fdb      	lsrs	r3, r3, #31
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	0f5b      	lsrs	r3, r3, #29
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	0e9b      	lsrs	r3, r3, #26
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	0d9b      	lsrs	r3, r3, #22
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	0d5b      	lsrs	r3, r3, #21
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	0bdb      	lsrs	r3, r3, #15
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	0b9b      	lsrs	r3, r3, #14
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	0b5b      	lsrs	r3, r3, #13
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	0b1b      	lsrs	r3, r3, #12
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3e:	0a9b      	lsrs	r3, r3, #10
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	004005ff 	.word	0x004005ff

08003f90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	b08e      	sub	sp, #56	; 0x38
 8003fec:	af04      	add	r7, sp, #16
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	2b03      	cmp	r3, #3
 8004006:	d02e      	beq.n	8004066 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400e:	d106      	bne.n	800401e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
 800401c:	e029      	b.n	8004072 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004024:	d10a      	bne.n	800403c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa1a 	bl	8004460 <SD_WideBus_Enable>
 800402c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
 800403a:	e01a      	b.n	8004072 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa57 	bl	80044f6 <SD_WideBus_Disable>
 8004048:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	639a      	str	r2, [r3, #56]	; 0x38
 8004056:	e00c      	b.n	8004072 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
 8004064:	e005      	b.n	8004072 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a26      	ldr	r2, [pc, #152]	; (8004118 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004090:	e01f      	b.n	80040d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681d      	ldr	r5, [r3, #0]
 80040b8:	466c      	mov	r4, sp
 80040ba:	f107 0314 	add.w	r3, r7, #20
 80040be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040cc:	4628      	mov	r0, r5
 80040ce:	f000 fb30 	bl	8004732 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fc05 	bl	80048ea <SDMMC_CmdBlockLength>
 80040e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00c      	beq.n	8004102 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0a      	ldr	r2, [pc, #40]	; (8004118 <HAL_SD_ConfigWideBusOperation+0x130>)
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800410a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800410e:	4618      	mov	r0, r3
 8004110:	3728      	adds	r7, #40	; 0x28
 8004112:	46bd      	mov	sp, r7
 8004114:	bdb0      	pop	{r4, r5, r7, pc}
 8004116:	bf00      	nop
 8004118:	004005ff 	.word	0x004005ff

0800411c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f96e 	bl	8004410 <SD_SendStatus>
 8004134:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	0a5b      	lsrs	r3, r3, #9
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004152:	693b      	ldr	r3, [r7, #16]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800415c:	b5b0      	push	{r4, r5, r7, lr}
 800415e:	b094      	sub	sp, #80	; 0x50
 8004160:	af04      	add	r7, sp, #16
 8004162:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004164:	2301      	movs	r3, #1
 8004166:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fb38 	bl	80047e2 <SDIO_GetPowerState>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004178:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800417c:	e0b6      	b.n	80042ec <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	2b03      	cmp	r3, #3
 8004184:	d02f      	beq.n	80041e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fd62 	bl	8004c54 <SDMMC_CmdSendCID>
 8004190:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <SD_InitCard+0x40>
    {
      return errorstate;
 8004198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419a:	e0a7      	b.n	80042ec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fb62 	bl	800486c <SDIO_GetResponse>
 80041a8:	4602      	mov	r2, r0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2104      	movs	r1, #4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fb59 	bl	800486c <SDIO_GetResponse>
 80041ba:	4602      	mov	r2, r0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2108      	movs	r1, #8
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fb50 	bl	800486c <SDIO_GetResponse>
 80041cc:	4602      	mov	r2, r0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	210c      	movs	r1, #12
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fb47 	bl	800486c <SDIO_GetResponse>
 80041de:	4602      	mov	r2, r0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d00d      	beq.n	800420a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f107 020e 	add.w	r2, r7, #14
 80041f6:	4611      	mov	r1, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fd68 	bl	8004cce <SDMMC_CmdSetRelAdd>
 80041fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <SD_InitCard+0xae>
    {
      return errorstate;
 8004206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004208:	e070      	b.n	80042ec <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	2b03      	cmp	r3, #3
 8004210:	d036      	beq.n	8004280 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004212:	89fb      	ldrh	r3, [r7, #14]
 8004214:	461a      	mov	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f000 fd32 	bl	8004c90 <SDMMC_CmdSendCSD>
 800422c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800422e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004236:	e059      	b.n	80042ec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fb14 	bl	800486c <SDIO_GetResponse>
 8004244:	4602      	mov	r2, r0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2104      	movs	r1, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fb0b 	bl	800486c <SDIO_GetResponse>
 8004256:	4602      	mov	r2, r0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2108      	movs	r1, #8
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fb02 	bl	800486c <SDIO_GetResponse>
 8004268:	4602      	mov	r2, r0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	210c      	movs	r1, #12
 8004274:	4618      	mov	r0, r3
 8004276:	f000 faf9 	bl	800486c <SDIO_GetResponse>
 800427a:	4602      	mov	r2, r0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2104      	movs	r1, #4
 8004286:	4618      	mov	r0, r3
 8004288:	f000 faf0 	bl	800486c <SDIO_GetResponse>
 800428c:	4603      	mov	r3, r0
 800428e:	0d1a      	lsrs	r2, r3, #20
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004294:	f107 0310 	add.w	r3, r7, #16
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff fcd4 	bl	8003c48 <HAL_SD_GetCardCSD>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042aa:	e01f      	b.n	80042ec <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	461a      	mov	r2, r3
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	4608      	mov	r0, r1
 80042be:	f000 fbe1 	bl	8004a84 <SDMMC_CmdSelDesel>
 80042c2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80042c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <SD_InitCard+0x172>
  {
    return errorstate;
 80042ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042cc:	e00e      	b.n	80042ec <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681d      	ldr	r5, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	466c      	mov	r4, sp
 80042d6:	f103 0210 	add.w	r2, r3, #16
 80042da:	ca07      	ldmia	r2, {r0, r1, r2}
 80042dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042e0:	3304      	adds	r3, #4
 80042e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 fa24 	bl	8004732 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3740      	adds	r7, #64	; 0x40
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bdb0      	pop	{r4, r5, r7, pc}

080042f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fbdc 	bl	8004aca <SDMMC_CmdGoIdleState>
 8004312:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <SD_PowerON+0x2a>
  {
    return errorstate;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	e072      	b.n	8004404 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fbef 	bl	8004b06 <SDMMC_CmdOperCond>
 8004328:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fbc5 	bl	8004aca <SDMMC_CmdGoIdleState>
 8004340:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	e05b      	b.n	8004404 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004356:	2b01      	cmp	r3, #1
 8004358:	d137      	bne.n	80043ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fbef 	bl	8004b44 <SDMMC_CmdAppCommand>
 8004366:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d02d      	beq.n	80043ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800436e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004372:	e047      	b.n	8004404 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fbe2 	bl	8004b44 <SDMMC_CmdAppCommand>
 8004380:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <SD_PowerON+0x98>
    {
      return errorstate;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	e03b      	b.n	8004404 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	491e      	ldr	r1, [pc, #120]	; (800440c <SD_PowerON+0x118>)
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fbf8 	bl	8004b88 <SDMMC_CmdAppOperCommand>
 8004398:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043a4:	e02e      	b.n	8004404 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fa5d 	bl	800486c <SDIO_GetResponse>
 80043b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	0fdb      	lsrs	r3, r3, #31
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <SD_PowerON+0xcc>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <SD_PowerON+0xce>
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]

    count++;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d802      	bhi.n	80043da <SD_PowerON+0xe6>
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0cc      	beq.n	8004374 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d902      	bls.n	80043ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80043e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043e8:	e00c      	b.n	8004404 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
 80043fa:	e002      	b.n	8004402 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	c1100000 	.word	0xc1100000

08004410 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004420:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004424:	e018      	b.n	8004458 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f000 fc6c 	bl	8004d10 <SDMMC_CmdSendStatus>
 8004438:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	e009      	b.n	8004458 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fa0e 	bl	800486c <SDIO_GetResponse>
 8004450:	4602      	mov	r2, r0
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f000 f9f8 	bl	800486c <SDIO_GetResponse>
 800447c:	4603      	mov	r3, r0
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004486:	d102      	bne.n	800448e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800448c:	e02f      	b.n	80044ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f879 	bl	800458c <SD_FindSCR>
 800449a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	e023      	b.n	80044ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01c      	beq.n	80044ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f000 fb41 	bl	8004b44 <SDMMC_CmdAppCommand>
 80044c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	e00f      	b.n	80044ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2102      	movs	r1, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fb7a 	bl	8004bce <SDMMC_CmdBusWidth>
 80044da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	e003      	b.n	80044ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e001      	b.n	80044ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80044ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b086      	sub	sp, #24
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2100      	movs	r1, #0
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f9ad 	bl	800486c <SDIO_GetResponse>
 8004512:	4603      	mov	r3, r0
 8004514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800451c:	d102      	bne.n	8004524 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800451e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004522:	e02f      	b.n	8004584 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f82e 	bl	800458c <SD_FindSCR>
 8004530:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	e023      	b.n	8004584 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01c      	beq.n	8004580 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454e:	041b      	lsls	r3, r3, #16
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f000 faf6 	bl	8004b44 <SDMMC_CmdAppCommand>
 8004558:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	e00f      	b.n	8004584 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fb2f 	bl	8004bce <SDMMC_CmdBusWidth>
 8004570:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	e003      	b.n	8004584 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800457c:	2300      	movs	r3, #0
 800457e:	e001      	b.n	8004584 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004580:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800458c:	b590      	push	{r4, r7, lr}
 800458e:	b08f      	sub	sp, #60	; 0x3c
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004596:	f7fc fcc3 	bl	8000f20 <HAL_GetTick>
 800459a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80045a0:	2300      	movs	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2108      	movs	r1, #8
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f999 	bl	80048ea <SDMMC_CmdBlockLength>
 80045b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	e0b2      	b.n	800472a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	4619      	mov	r1, r3
 80045d0:	4610      	mov	r0, r2
 80045d2:	f000 fab7 	bl	8004b44 <SDMMC_CmdAppCommand>
 80045d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	e0a3      	b.n	800472a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80045e2:	f04f 33ff 	mov.w	r3, #4294967295
 80045e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80045e8:	2308      	movs	r3, #8
 80045ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80045ec:	2330      	movs	r3, #48	; 0x30
 80045ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80045f0:	2302      	movs	r3, #2
 80045f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f107 0210 	add.w	r2, r7, #16
 8004604:	4611      	mov	r1, r2
 8004606:	4618      	mov	r0, r3
 8004608:	f000 f943 	bl	8004892 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fafe 	bl	8004c12 <SDMMC_CmdSendSCR>
 8004616:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461a:	2b00      	cmp	r3, #0
 800461c:	d02a      	beq.n	8004674 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	e083      	b.n	800472a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00f      	beq.n	8004650 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	f107 0208 	add.w	r2, r7, #8
 800463c:	18d4      	adds	r4, r2, r3
 800463e:	4608      	mov	r0, r1
 8004640:	f000 f8a2 	bl	8004788 <SDIO_ReadFIFO>
 8004644:	4603      	mov	r3, r0
 8004646:	6023      	str	r3, [r4, #0]
      index++;
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	3301      	adds	r3, #1
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
 800464e:	e006      	b.n	800465e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d012      	beq.n	8004684 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800465e:	f7fc fc5f 	bl	8000f20 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466c:	d102      	bne.n	8004674 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800466e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004672:	e05a      	b.n	800472a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0cf      	beq.n	8004622 <SD_FindSCR+0x96>
 8004682:	e000      	b.n	8004686 <SD_FindSCR+0xfa>
      break;
 8004684:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2208      	movs	r2, #8
 800469a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800469c:	2308      	movs	r3, #8
 800469e:	e044      	b.n	800472a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2202      	movs	r2, #2
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80046b6:	2302      	movs	r3, #2
 80046b8:	e037      	b.n	800472a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2220      	movs	r2, #32
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80046d0:	2320      	movs	r3, #32
 80046d2:	e02a      	b.n	800472a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	061a      	lsls	r2, r3, #24
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80046f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	0e1b      	lsrs	r3, r3, #24
 80046fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	601a      	str	r2, [r3, #0]
    scr++;
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	3304      	adds	r3, #4
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	061a      	lsls	r2, r3, #24
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004712:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800471c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0e1b      	lsrs	r3, r3, #24
 8004722:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	373c      	adds	r7, #60	; 0x3c
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}

08004732 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004732:	b084      	sub	sp, #16
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	f107 001c 	add.w	r0, r7, #28
 8004740:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004748:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800474a:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800474c:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004750:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004754:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004758:	431a      	orrs	r2, r3
             Init.ClockDiv
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800475c:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800476c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	b004      	add	sp, #16
 8004786:	4770      	bx	lr

08004788 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2203      	movs	r2, #3
 80047d0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80047d2:	2002      	movs	r0, #2
 80047d4:	f7fc fbb0 	bl	8000f38 <HAL_Delay>
  
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0303 	and.w	r3, r3, #3
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800481c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004822:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004828:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004838:	f023 030f 	bic.w	r3, r3, #15
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	b2db      	uxtb	r3, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3314      	adds	r3, #20
 800487a:	461a      	mov	r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	4413      	add	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
}  
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048b8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80048be:	431a      	orrs	r2, r3
                       Data->DPSM);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80048c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0

}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b088      	sub	sp, #32
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80048f8:	2310      	movs	r3, #16
 80048fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048fc:	2340      	movs	r3, #64	; 0x40
 80048fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004908:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800490a:	f107 0308 	add.w	r3, r7, #8
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff74 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004916:	f241 3288 	movw	r2, #5000	; 0x1388
 800491a:	2110      	movs	r1, #16
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fa45 	bl	8004dac <SDMMC_GetCmdResp1>
 8004922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004924:	69fb      	ldr	r3, [r7, #28]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b088      	sub	sp, #32
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800493c:	2311      	movs	r3, #17
 800493e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800494c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800494e:	f107 0308 	add.w	r3, r7, #8
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ff52 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	2111      	movs	r1, #17
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fa23 	bl	8004dac <SDMMC_GetCmdResp1>
 8004966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004968:	69fb      	ldr	r3, [r7, #28]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b088      	sub	sp, #32
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004980:	2312      	movs	r3, #18
 8004982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004984:	2340      	movs	r3, #64	; 0x40
 8004986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800498c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004992:	f107 0308 	add.w	r3, r7, #8
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff30 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800499e:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a2:	2112      	movs	r1, #18
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa01 	bl	8004dac <SDMMC_GetCmdResp1>
 80049aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ac:	69fb      	ldr	r3, [r7, #28]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b088      	sub	sp, #32
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80049c4:	2318      	movs	r3, #24
 80049c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049c8:	2340      	movs	r3, #64	; 0x40
 80049ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049d6:	f107 0308 	add.w	r3, r7, #8
 80049da:	4619      	mov	r1, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff0e 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	2118      	movs	r1, #24
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f9df 	bl	8004dac <SDMMC_GetCmdResp1>
 80049ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049f0:	69fb      	ldr	r3, [r7, #28]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b088      	sub	sp, #32
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004a08:	2319      	movs	r3, #25
 8004a0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a0c:	2340      	movs	r3, #64	; 0x40
 8004a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a1a:	f107 0308 	add.w	r3, r7, #8
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff feec 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2a:	2119      	movs	r1, #25
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f9bd 	bl	8004dac <SDMMC_GetCmdResp1>
 8004a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a34:	69fb      	ldr	r3, [r7, #28]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004a4c:	230c      	movs	r3, #12
 8004a4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a50:	2340      	movs	r3, #64	; 0x40
 8004a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff feca 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004a6a:	4a05      	ldr	r2, [pc, #20]	; (8004a80 <SDMMC_CmdStopTransfer+0x40>)
 8004a6c:	210c      	movs	r1, #12
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f99c 	bl	8004dac <SDMMC_GetCmdResp1>
 8004a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a76:	69fb      	ldr	r3, [r7, #28]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	05f5e100 	.word	0x05f5e100

08004a84 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a94:	2307      	movs	r3, #7
 8004a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a98:	2340      	movs	r3, #64	; 0x40
 8004a9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aa6:	f107 0310 	add.w	r3, r7, #16
 8004aaa:	4619      	mov	r1, r3
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff fea6 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	2107      	movs	r1, #7
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f977 	bl	8004dac <SDMMC_GetCmdResp1>
 8004abe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3728      	adds	r7, #40	; 0x28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b088      	sub	sp, #32
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ae8:	f107 0308 	add.w	r3, r7, #8
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fe85 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f92d 	bl	8004d54 <SDMMC_GetCmdError>
 8004afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004afc:	69fb      	ldr	r3, [r7, #28]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b088      	sub	sp, #32
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004b0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004b14:	2308      	movs	r3, #8
 8004b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b18:	2340      	movs	r3, #64	; 0x40
 8004b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b26:	f107 0308 	add.w	r3, r7, #8
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fe66 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fb24 	bl	8005180 <SDMMC_GetCmdResp7>
 8004b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004b52:	2337      	movs	r3, #55	; 0x37
 8004b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b64:	f107 0308 	add.w	r3, r7, #8
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fe47 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	2137      	movs	r1, #55	; 0x37
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f918 	bl	8004dac <SDMMC_GetCmdResp1>
 8004b7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b9e:	2329      	movs	r3, #41	; 0x29
 8004ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ba2:	2340      	movs	r3, #64	; 0x40
 8004ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff fe21 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa2b 	bl	8005018 <SDMMC_GetCmdResp3>
 8004bc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b088      	sub	sp, #32
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004bdc:	2306      	movs	r3, #6
 8004bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004be0:	2340      	movs	r3, #64	; 0x40
 8004be2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fe02 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfe:	2106      	movs	r1, #6
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f8d3 	bl	8004dac <SDMMC_GetCmdResp1>
 8004c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c08:	69fb      	ldr	r3, [r7, #28]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b088      	sub	sp, #32
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004c1e:	2333      	movs	r3, #51	; 0x33
 8004c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c22:	2340      	movs	r3, #64	; 0x40
 8004c24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c30:	f107 0308 	add.w	r3, r7, #8
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff fde1 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	2133      	movs	r1, #51	; 0x33
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8b2 	bl	8004dac <SDMMC_GetCmdResp1>
 8004c48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3720      	adds	r7, #32
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004c60:	2302      	movs	r3, #2
 8004c62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c64:	23c0      	movs	r3, #192	; 0xc0
 8004c66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c72:	f107 0308 	add.w	r3, r7, #8
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fdc0 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f982 	bl	8004f88 <SDMMC_GetCmdResp2>
 8004c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c86:	69fb      	ldr	r3, [r7, #28]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004c9e:	2309      	movs	r3, #9
 8004ca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ca2:	23c0      	movs	r3, #192	; 0xc0
 8004ca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cb0:	f107 0308 	add.w	r3, r7, #8
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fda1 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f963 	bl	8004f88 <SDMMC_GetCmdResp2>
 8004cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b088      	sub	sp, #32
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ce0:	2340      	movs	r3, #64	; 0x40
 8004ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cee:	f107 0308 	add.w	r3, r7, #8
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fd82 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	2103      	movs	r1, #3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f9c8 	bl	8005094 <SDMMC_GetCmdResp6>
 8004d04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d06:	69fb      	ldr	r3, [r7, #28]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004d1e:	230d      	movs	r3, #13
 8004d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d22:	2340      	movs	r3, #64	; 0x40
 8004d24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d30:	f107 0308 	add.w	r3, r7, #8
 8004d34:	4619      	mov	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff fd61 	bl	80047fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	210d      	movs	r1, #13
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f832 	bl	8004dac <SDMMC_GetCmdResp1>
 8004d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3720      	adds	r7, #32
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d5c:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <SDMMC_GetCmdError+0x50>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a11      	ldr	r2, [pc, #68]	; (8004da8 <SDMMC_GetCmdError+0x54>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	0a5b      	lsrs	r3, r3, #9
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1e5a      	subs	r2, r3, #1
 8004d76:	60fa      	str	r2, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d80:	e009      	b.n	8004d96 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f1      	beq.n	8004d72 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	22c5      	movs	r2, #197	; 0xc5
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000000 	.word	0x20000000
 8004da8:	10624dd3 	.word	0x10624dd3

08004dac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	460b      	mov	r3, r1
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004dba:	4b70      	ldr	r3, [pc, #448]	; (8004f7c <SDMMC_GetCmdResp1+0x1d0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a70      	ldr	r2, [pc, #448]	; (8004f80 <SDMMC_GetCmdResp1+0x1d4>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	0a5a      	lsrs	r2, r3, #9
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	1e5a      	subs	r2, r3, #1
 8004dd2:	61fa      	str	r2, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004dd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ddc:	e0c9      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ef      	beq.n	8004dce <SDMMC_GetCmdResp1+0x22>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ea      	bne.n	8004dce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2204      	movs	r2, #4
 8004e08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	e0b1      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d004      	beq.n	8004e24 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0a6      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	22c5      	movs	r2, #197	; 0xc5
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff fd11 	bl	8004852 <SDIO_GetCommandResponse>
 8004e30:	4603      	mov	r3, r0
 8004e32:	461a      	mov	r2, r3
 8004e34:	7afb      	ldrb	r3, [r7, #11]
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d001      	beq.n	8004e3e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e099      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004e3e:	2100      	movs	r1, #0
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fd13 	bl	800486c <SDIO_GetResponse>
 8004e46:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4b4e      	ldr	r3, [pc, #312]	; (8004f84 <SDMMC_GetCmdResp1+0x1d8>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e08d      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	da02      	bge.n	8004e62 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004e5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e60:	e087      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004e6c:	2340      	movs	r3, #64	; 0x40
 8004e6e:	e080      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	e079      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e8c:	e071      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e9c:	e069      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eac:	e061      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ebc:	e059      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ecc:	e051      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004edc:	e049      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004ee8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004eec:	e041      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efc:	e039      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f0c:	e031      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004f18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f1c:	e029      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004f28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f2c:	e021      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004f38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f3c:	e019      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004f48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004f4c:	e011      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004f58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f5c:	e009      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004f68:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004f6c:	e001      	b.n	8004f72 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000000 	.word	0x20000000
 8004f80:	10624dd3 	.word	0x10624dd3
 8004f84:	fdffe008 	.word	0xfdffe008

08004f88 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f90:	4b1f      	ldr	r3, [pc, #124]	; (8005010 <SDMMC_GetCmdResp2+0x88>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <SDMMC_GetCmdResp2+0x8c>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	0a5b      	lsrs	r3, r3, #9
 8004f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa0:	fb02 f303 	mul.w	r3, r2, r3
 8004fa4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1e5a      	subs	r2, r3, #1
 8004faa:	60fa      	str	r2, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004fb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fb4:	e026      	b.n	8005004 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0ef      	beq.n	8004fa6 <SDMMC_GetCmdResp2+0x1e>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1ea      	bne.n	8004fa6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2204      	movs	r2, #4
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	e00e      	b.n	8005004 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e003      	b.n	8005004 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	22c5      	movs	r2, #197	; 0xc5
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000000 	.word	0x20000000
 8005014:	10624dd3 	.word	0x10624dd3

08005018 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <SDMMC_GetCmdResp3+0x74>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1a      	ldr	r2, [pc, #104]	; (8005090 <SDMMC_GetCmdResp3+0x78>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	0a5b      	lsrs	r3, r3, #9
 800502c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005030:	fb02 f303 	mul.w	r3, r2, r3
 8005034:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	60fa      	str	r2, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005044:	e01b      	b.n	800507e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0ef      	beq.n	8005036 <SDMMC_GetCmdResp3+0x1e>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ea      	bne.n	8005036 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2204      	movs	r2, #4
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005072:	2304      	movs	r3, #4
 8005074:	e003      	b.n	800507e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	22c5      	movs	r2, #197	; 0xc5
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000000 	.word	0x20000000
 8005090:	10624dd3 	.word	0x10624dd3

08005094 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	460b      	mov	r3, r1
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050a2:	4b35      	ldr	r3, [pc, #212]	; (8005178 <SDMMC_GetCmdResp6+0xe4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a35      	ldr	r2, [pc, #212]	; (800517c <SDMMC_GetCmdResp6+0xe8>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	0a5b      	lsrs	r3, r3, #9
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	1e5a      	subs	r2, r3, #1
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050c6:	e052      	b.n	800516e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0ef      	beq.n	80050b8 <SDMMC_GetCmdResp6+0x24>
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ea      	bne.n	80050b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2204      	movs	r2, #4
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050f4:	2304      	movs	r3, #4
 80050f6:	e03a      	b.n	800516e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800510a:	2301      	movs	r3, #1
 800510c:	e02f      	b.n	800516e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fb9f 	bl	8004852 <SDIO_GetCommandResponse>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	4293      	cmp	r3, r2
 800511c:	d001      	beq.n	8005122 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800511e:	2301      	movs	r3, #1
 8005120:	e025      	b.n	800516e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	22c5      	movs	r2, #197	; 0xc5
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005128:	2100      	movs	r1, #0
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fb9e 	bl	800486c <SDIO_GetResponse>
 8005130:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005146:	2300      	movs	r3, #0
 8005148:	e011      	b.n	800516e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005158:	e009      	b.n	800516e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005168:	e001      	b.n	800516e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800516a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000000 	.word	0x20000000
 800517c:	10624dd3 	.word	0x10624dd3

08005180 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005188:	4b22      	ldr	r3, [pc, #136]	; (8005214 <SDMMC_GetCmdResp7+0x94>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a22      	ldr	r2, [pc, #136]	; (8005218 <SDMMC_GetCmdResp7+0x98>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	0a5b      	lsrs	r3, r3, #9
 8005194:	f241 3288 	movw	r2, #5000	; 0x1388
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1e5a      	subs	r2, r3, #1
 80051a2:	60fa      	str	r2, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051ac:	e02c      	b.n	8005208 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0ef      	beq.n	800519e <SDMMC_GetCmdResp7+0x1e>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1ea      	bne.n	800519e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2204      	movs	r2, #4
 80051d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051da:	2304      	movs	r3, #4
 80051dc:	e014      	b.n	8005208 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d004      	beq.n	80051f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e009      	b.n	8005208 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2240      	movs	r2, #64	; 0x40
 8005204:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005206:	2300      	movs	r3, #0
  
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	20000000 	.word	0x20000000
 8005218:	10624dd3 	.word	0x10624dd3

0800521c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005220:	4904      	ldr	r1, [pc, #16]	; (8005234 <MX_FATFS_Init+0x18>)
 8005222:	4805      	ldr	r0, [pc, #20]	; (8005238 <MX_FATFS_Init+0x1c>)
 8005224:	f002 fc44 	bl	8007ab0 <FATFS_LinkDriver>
 8005228:	4603      	mov	r3, r0
 800522a:	461a      	mov	r2, r3
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <MX_FATFS_Init+0x20>)
 800522e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005230:	bf00      	nop
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20001334 	.word	0x20001334
 8005238:	08008c58 	.word	0x08008c58
 800523c:	20001330 	.word	0x20001330

08005240 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005244:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005246:	4618      	mov	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800525a:	f000 f889 	bl	8005370 <BSP_SD_IsDetected>
 800525e:	4603      	mov	r3, r0
 8005260:	2b01      	cmp	r3, #1
 8005262:	d001      	beq.n	8005268 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e01e      	b.n	80052a6 <BSP_SD_Init+0x56>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005268:	4811      	ldr	r0, [pc, #68]	; (80052b0 <BSP_SD_Init+0x60>)
 800526a:	f7fe f8db 	bl	8003424 <HAL_SD_Init>
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d109      	bne.n	800528c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800527c:	480c      	ldr	r0, [pc, #48]	; (80052b0 <BSP_SD_Init+0x60>)
 800527e:	f7fe feb3 	bl	8003fe8 <HAL_SD_ConfigWideBusOperation>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	71fb      	strb	r3, [r7, #7]

    }
  }
  printf("BSP_SD_IsDetected() = %d\n", BSP_SD_IsDetected());
 800528c:	f000 f870 	bl	8005370 <BSP_SD_IsDetected>
 8005290:	4603      	mov	r3, r0
 8005292:	4619      	mov	r1, r3
 8005294:	4807      	ldr	r0, [pc, #28]	; (80052b4 <BSP_SD_Init+0x64>)
 8005296:	f002 fc4d 	bl	8007b34 <iprintf>
  printf("sd_state = %d\n", sd_state);
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	4619      	mov	r1, r3
 800529e:	4806      	ldr	r0, [pc, #24]	; (80052b8 <BSP_SD_Init+0x68>)
 80052a0:	f002 fc48 	bl	8007b34 <iprintf>

  return sd_state;
 80052a4:	79fb      	ldrb	r3, [r7, #7]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20001260 	.word	0x20001260
 80052b4:	08008bd0 	.word	0x08008bd0
 80052b8:	08008bec 	.word	0x08008bec

080052bc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	4806      	ldr	r0, [pc, #24]	; (80052f4 <BSP_SD_ReadBlocks+0x38>)
 80052da:	f7fe f951 	bl	8003580 <HAL_SD_ReadBlocks>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20001260 	.word	0x20001260

080052f8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	68f9      	ldr	r1, [r7, #12]
 8005314:	4806      	ldr	r0, [pc, #24]	; (8005330 <BSP_SD_WriteBlocks+0x38>)
 8005316:	f7fe fb11 	bl	800393c <HAL_SD_WriteBlocks>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20001260 	.word	0x20001260

08005334 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005338:	4805      	ldr	r0, [pc, #20]	; (8005350 <BSP_SD_GetCardState+0x1c>)
 800533a:	f7fe feef 	bl	800411c <HAL_SD_GetCardState>
 800533e:	4603      	mov	r3, r0
 8005340:	2b04      	cmp	r3, #4
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
}
 800534a:	4618      	mov	r0, r3
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20001260 	.word	0x20001260

08005354 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4803      	ldr	r0, [pc, #12]	; (800536c <BSP_SD_GetCardInfo+0x18>)
 8005360:	f7fe fe16 	bl	8003f90 <HAL_SD_GetCardInfo>
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20001260 	.word	0x20001260

08005370 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005376:	2301      	movs	r3, #1
 8005378:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800537a:	f000 f80b 	bl	8005394 <BSP_PlatformIsDetected>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005384:	2300      	movs	r3, #0
 8005386:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	b2db      	uxtb	r3, r3
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800539a:	2301      	movs	r3, #1
 800539c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800539e:	2102      	movs	r1, #2
 80053a0:	4806      	ldr	r0, [pc, #24]	; (80053bc <BSP_PlatformIsDetected+0x28>)
 80053a2:	f7fc fc1b 	bl	8001bdc <HAL_GPIO_ReadPin>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80053ac:	2300      	movs	r3, #0
 80053ae:	71fb      	strb	r3, [r7, #7]
    }

    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80053b0:	79fb      	ldrb	r3, [r7, #7]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40020c00 	.word	0x40020c00

080053c0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80053ca:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <SD_CheckStatus+0x38>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80053d0:	f7ff ffb0 	bl	8005334 <BSP_SD_GetCardState>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d107      	bne.n	80053ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80053da:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <SD_CheckStatus+0x38>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	4b04      	ldr	r3, [pc, #16]	; (80053f8 <SD_CheckStatus+0x38>)
 80053e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80053ea:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <SD_CheckStatus+0x38>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	b2db      	uxtb	r3, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20000009 	.word	0x20000009

080053fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <SD_initialize+0x38>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800540c:	f7ff ff20 	bl	8005250 <BSP_SD_Init>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d107      	bne.n	8005426 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff ffd1 	bl	80053c0 <SD_CheckStatus>
 800541e:	4603      	mov	r3, r0
 8005420:	461a      	mov	r2, r3
 8005422:	4b04      	ldr	r3, [pc, #16]	; (8005434 <SD_initialize+0x38>)
 8005424:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005426:	4b03      	ldr	r3, [pc, #12]	; (8005434 <SD_initialize+0x38>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	b2db      	uxtb	r3, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000009 	.word	0x20000009

08005438 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff ffbb 	bl	80053c0 <SD_CheckStatus>
 800544a:	4603      	mov	r3, r0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005468:	f04f 33ff 	mov.w	r3, #4294967295
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	68b8      	ldr	r0, [r7, #8]
 8005472:	f7ff ff23 	bl	80052bc <BSP_SD_ReadBlocks>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800547c:	bf00      	nop
 800547e:	f7ff ff59 	bl	8005334 <BSP_SD_GetCardState>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1fa      	bne.n	800547e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800548c:	7dfb      	ldrb	r3, [r7, #23]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b086      	sub	sp, #24
 800549a:	af00      	add	r7, sp, #0
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	4603      	mov	r3, r0
 80054a4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	68b8      	ldr	r0, [r7, #8]
 80054b4:	f7ff ff20 	bl	80052f8 <BSP_SD_WriteBlocks>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d107      	bne.n	80054ce <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80054be:	bf00      	nop
 80054c0:	f7ff ff38 	bl	8005334 <BSP_SD_GetCardState>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1fa      	bne.n	80054c0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08c      	sub	sp, #48	; 0x30
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	603a      	str	r2, [r7, #0]
 80054e2:	71fb      	strb	r3, [r7, #7]
 80054e4:	460b      	mov	r3, r1
 80054e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80054ee:	4b25      	ldr	r3, [pc, #148]	; (8005584 <SD_ioctl+0xac>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <SD_ioctl+0x28>
 80054fc:	2303      	movs	r3, #3
 80054fe:	e03c      	b.n	800557a <SD_ioctl+0xa2>

  switch (cmd)
 8005500:	79bb      	ldrb	r3, [r7, #6]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d834      	bhi.n	8005570 <SD_ioctl+0x98>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <SD_ioctl+0x34>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	0800551d 	.word	0x0800551d
 8005510:	08005525 	.word	0x08005525
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005557 	.word	0x08005557
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005522:	e028      	b.n	8005576 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005524:	f107 030c 	add.w	r3, r7, #12
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff ff13 	bl	8005354 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800552e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800553a:	e01c      	b.n	8005576 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800553c:	f107 030c 	add.w	r3, r7, #12
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff ff07 	bl	8005354 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	b29a      	uxth	r2, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005554:	e00f      	b.n	8005576 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005556:	f107 030c 	add.w	r3, r7, #12
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fefa 	bl	8005354 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	0a5a      	lsrs	r2, r3, #9
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800556e:	e002      	b.n	8005576 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005570:	2304      	movs	r3, #4
 8005572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800557a:	4618      	mov	r0, r3
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000009 	.word	0x20000009

08005588 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <disk_status+0x30>)
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	79fa      	ldrb	r2, [r7, #7]
 80055a0:	4905      	ldr	r1, [pc, #20]	; (80055b8 <disk_status+0x30>)
 80055a2:	440a      	add	r2, r1
 80055a4:	7a12      	ldrb	r2, [r2, #8]
 80055a6:	4610      	mov	r0, r2
 80055a8:	4798      	blx	r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20001120 	.word	0x20001120

080055bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	4a0d      	ldr	r2, [pc, #52]	; (8005604 <disk_initialize+0x48>)
 80055ce:	5cd3      	ldrb	r3, [r2, r3]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d111      	bne.n	80055f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	4a0b      	ldr	r2, [pc, #44]	; (8005604 <disk_initialize+0x48>)
 80055d8:	2101      	movs	r1, #1
 80055da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <disk_initialize+0x48>)
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	79fa      	ldrb	r2, [r7, #7]
 80055ea:	4906      	ldr	r1, [pc, #24]	; (8005604 <disk_initialize+0x48>)
 80055ec:	440a      	add	r2, r1
 80055ee:	7a12      	ldrb	r2, [r2, #8]
 80055f0:	4610      	mov	r0, r2
 80055f2:	4798      	blx	r3
 80055f4:	4603      	mov	r3, r0
 80055f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20001120 	.word	0x20001120

08005608 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <disk_read+0x3c>)
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	689c      	ldr	r4, [r3, #8]
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	4a07      	ldr	r2, [pc, #28]	; (8005644 <disk_read+0x3c>)
 8005628:	4413      	add	r3, r2
 800562a:	7a18      	ldrb	r0, [r3, #8]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	47a0      	blx	r4
 8005634:	4603      	mov	r3, r0
 8005636:	75fb      	strb	r3, [r7, #23]
  return res;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
}
 800563a:	4618      	mov	r0, r3
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd90      	pop	{r4, r7, pc}
 8005642:	bf00      	nop
 8005644:	20001120 	.word	0x20001120

08005648 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4603      	mov	r3, r0
 8005656:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <disk_write+0x3c>)
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68dc      	ldr	r4, [r3, #12]
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	4a07      	ldr	r2, [pc, #28]	; (8005684 <disk_write+0x3c>)
 8005668:	4413      	add	r3, r2
 800566a:	7a18      	ldrb	r0, [r3, #8]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	47a0      	blx	r4
 8005674:	4603      	mov	r3, r0
 8005676:	75fb      	strb	r3, [r7, #23]
  return res;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
}
 800567a:	4618      	mov	r0, r3
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	bd90      	pop	{r4, r7, pc}
 8005682:	bf00      	nop
 8005684:	20001120 	.word	0x20001120

08005688 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	603a      	str	r2, [r7, #0]
 8005692:	71fb      	strb	r3, [r7, #7]
 8005694:	460b      	mov	r3, r1
 8005696:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <disk_ioctl+0x38>)
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	79fa      	ldrb	r2, [r7, #7]
 80056a6:	4906      	ldr	r1, [pc, #24]	; (80056c0 <disk_ioctl+0x38>)
 80056a8:	440a      	add	r2, r1
 80056aa:	7a10      	ldrb	r0, [r2, #8]
 80056ac:	79b9      	ldrb	r1, [r7, #6]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	4798      	blx	r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20001120 	.word	0x20001120

080056c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3301      	adds	r3, #1
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80056d4:	89fb      	ldrh	r3, [r7, #14]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	b21a      	sxth	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	b21b      	sxth	r3, r3
 80056e0:	4313      	orrs	r3, r2
 80056e2:	b21b      	sxth	r3, r3
 80056e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80056e6:	89fb      	ldrh	r3, [r7, #14]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3303      	adds	r3, #3
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	3202      	adds	r2, #2
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	3201      	adds	r2, #1
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
	return rv;
 800572c:	68fb      	ldr	r3, [r7, #12]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	887a      	ldrh	r2, [r7, #2]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	887a      	ldrh	r2, [r7, #2]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	0a1b      	lsrs	r3, r3, #8
 800579c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00d      	beq.n	80057fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	1c53      	adds	r3, r2, #1
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1c59      	adds	r1, r3, #1
 80057ec:	6179      	str	r1, [r7, #20]
 80057ee:	7812      	ldrb	r2, [r2, #0]
 80057f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	607b      	str	r3, [r7, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f1      	bne.n	80057e2 <mem_cpy+0x1a>
	}
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800580a:	b480      	push	{r7}
 800580c:	b087      	sub	sp, #28
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	617a      	str	r2, [r7, #20]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3b01      	subs	r3, #1
 800582a:	607b      	str	r3, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f3      	bne.n	800581a <mem_set+0x10>
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	61fa      	str	r2, [r7, #28]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	4619      	mov	r1, r3
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	61ba      	str	r2, [r7, #24]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	1acb      	subs	r3, r1, r3
 800586c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3b01      	subs	r3, #1
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <mem_cmp+0x40>
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0eb      	beq.n	8005858 <mem_cmp+0x18>

	return r;
 8005880:	697b      	ldr	r3, [r7, #20]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3724      	adds	r7, #36	; 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005898:	e002      	b.n	80058a0 <chk_chr+0x12>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3301      	adds	r3, #1
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <chk_chr+0x26>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d1f2      	bne.n	800589a <chk_chr+0xc>
	return *str;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	781b      	ldrb	r3, [r3, #0]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80058ce:	2300      	movs	r3, #0
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	e029      	b.n	800592c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80058d8:	4a27      	ldr	r2, [pc, #156]	; (8005978 <chk_lock+0xb4>)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	4413      	add	r3, r2
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01d      	beq.n	8005922 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80058e6:	4a24      	ldr	r2, [pc, #144]	; (8005978 <chk_lock+0xb4>)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	4413      	add	r3, r2
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d116      	bne.n	8005926 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80058f8:	4a1f      	ldr	r2, [pc, #124]	; (8005978 <chk_lock+0xb4>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	4413      	add	r3, r2
 8005900:	3304      	adds	r3, #4
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005908:	429a      	cmp	r2, r3
 800590a:	d10c      	bne.n	8005926 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800590c:	4a1a      	ldr	r2, [pc, #104]	; (8005978 <chk_lock+0xb4>)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	4413      	add	r3, r2
 8005914:	3308      	adds	r3, #8
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800591c:	429a      	cmp	r2, r3
 800591e:	d102      	bne.n	8005926 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005920:	e007      	b.n	8005932 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005922:	2301      	movs	r3, #1
 8005924:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3301      	adds	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d9d2      	bls.n	80058d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d109      	bne.n	800594c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <chk_lock+0x80>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d101      	bne.n	8005948 <chk_lock+0x84>
 8005944:	2300      	movs	r3, #0
 8005946:	e010      	b.n	800596a <chk_lock+0xa6>
 8005948:	2312      	movs	r3, #18
 800594a:	e00e      	b.n	800596a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d108      	bne.n	8005964 <chk_lock+0xa0>
 8005952:	4a09      	ldr	r2, [pc, #36]	; (8005978 <chk_lock+0xb4>)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	4413      	add	r3, r2
 800595a:	330c      	adds	r3, #12
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d101      	bne.n	8005968 <chk_lock+0xa4>
 8005964:	2310      	movs	r3, #16
 8005966:	e000      	b.n	800596a <chk_lock+0xa6>
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20001100 	.word	0x20001100

0800597c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
 8005986:	e002      	b.n	800598e <enq_lock+0x12>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3301      	adds	r3, #1
 800598c:	607b      	str	r3, [r7, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d806      	bhi.n	80059a2 <enq_lock+0x26>
 8005994:	4a09      	ldr	r2, [pc, #36]	; (80059bc <enq_lock+0x40>)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	4413      	add	r3, r2
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f2      	bne.n	8005988 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20001100 	.word	0x20001100

080059c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	e01f      	b.n	8005a10 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80059d0:	4a41      	ldr	r2, [pc, #260]	; (8005ad8 <inc_lock+0x118>)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	4413      	add	r3, r2
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d113      	bne.n	8005a0a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80059e2:	4a3d      	ldr	r2, [pc, #244]	; (8005ad8 <inc_lock+0x118>)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	4413      	add	r3, r2
 80059ea:	3304      	adds	r3, #4
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d109      	bne.n	8005a0a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80059f6:	4a38      	ldr	r2, [pc, #224]	; (8005ad8 <inc_lock+0x118>)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	4413      	add	r3, r2
 80059fe:	3308      	adds	r3, #8
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d006      	beq.n	8005a18 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d9dc      	bls.n	80059d0 <inc_lock+0x10>
 8005a16:	e000      	b.n	8005a1a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005a18:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d132      	bne.n	8005a86 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e002      	b.n	8005a2c <inc_lock+0x6c>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d806      	bhi.n	8005a40 <inc_lock+0x80>
 8005a32:	4a29      	ldr	r2, [pc, #164]	; (8005ad8 <inc_lock+0x118>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	4413      	add	r3, r2
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f2      	bne.n	8005a26 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d101      	bne.n	8005a4a <inc_lock+0x8a>
 8005a46:	2300      	movs	r3, #0
 8005a48:	e040      	b.n	8005acc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4922      	ldr	r1, [pc, #136]	; (8005ad8 <inc_lock+0x118>)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	440b      	add	r3, r1
 8005a56:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	491e      	ldr	r1, [pc, #120]	; (8005ad8 <inc_lock+0x118>)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	440b      	add	r3, r1
 8005a64:	3304      	adds	r3, #4
 8005a66:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	491a      	ldr	r1, [pc, #104]	; (8005ad8 <inc_lock+0x118>)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	440b      	add	r3, r1
 8005a74:	3308      	adds	r3, #8
 8005a76:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005a78:	4a17      	ldr	r2, [pc, #92]	; (8005ad8 <inc_lock+0x118>)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	4413      	add	r3, r2
 8005a80:	330c      	adds	r3, #12
 8005a82:	2200      	movs	r2, #0
 8005a84:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <inc_lock+0xe0>
 8005a8c:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <inc_lock+0x118>)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	4413      	add	r3, r2
 8005a94:	330c      	adds	r3, #12
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <inc_lock+0xe0>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e015      	b.n	8005acc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <inc_lock+0xf8>
 8005aa6:	4a0c      	ldr	r2, [pc, #48]	; (8005ad8 <inc_lock+0x118>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	4413      	add	r3, r2
 8005aae:	330c      	adds	r3, #12
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	e001      	b.n	8005abc <inc_lock+0xfc>
 8005ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005abc:	4906      	ldr	r1, [pc, #24]	; (8005ad8 <inc_lock+0x118>)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	440b      	add	r3, r1
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	20001100 	.word	0x20001100

08005adc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	607b      	str	r3, [r7, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d825      	bhi.n	8005b3c <dec_lock+0x60>
		n = Files[i].ctr;
 8005af0:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <dec_lock+0x74>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	4413      	add	r3, r2
 8005af8:	330c      	adds	r3, #12
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005afe:	89fb      	ldrh	r3, [r7, #14]
 8005b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b04:	d101      	bne.n	8005b0a <dec_lock+0x2e>
 8005b06:	2300      	movs	r3, #0
 8005b08:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005b0a:	89fb      	ldrh	r3, [r7, #14]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <dec_lock+0x3a>
 8005b10:	89fb      	ldrh	r3, [r7, #14]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005b16:	4a0e      	ldr	r2, [pc, #56]	; (8005b50 <dec_lock+0x74>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	4413      	add	r3, r2
 8005b1e:	330c      	adds	r3, #12
 8005b20:	89fa      	ldrh	r2, [r7, #14]
 8005b22:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005b24:	89fb      	ldrh	r3, [r7, #14]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <dec_lock+0x5a>
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <dec_lock+0x74>)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	4413      	add	r3, r2
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	737b      	strb	r3, [r7, #13]
 8005b3a:	e001      	b.n	8005b40 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005b40:	7b7b      	ldrb	r3, [r7, #13]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	20001100 	.word	0x20001100

08005b54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e010      	b.n	8005b84 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b62:	4a0d      	ldr	r2, [pc, #52]	; (8005b98 <clear_lock+0x44>)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	4413      	add	r3, r2
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d105      	bne.n	8005b7e <clear_lock+0x2a>
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <clear_lock+0x44>)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	4413      	add	r3, r2
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d9eb      	bls.n	8005b62 <clear_lock+0xe>
	}
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20001100 	.word	0x20001100

08005b9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	78db      	ldrb	r3, [r3, #3]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d034      	beq.n	8005c1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	7858      	ldrb	r0, [r3, #1]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	f7ff fd40 	bl	8005648 <disk_write>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
 8005bd2:	e022      	b.n	8005c1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	1ad2      	subs	r2, r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d217      	bcs.n	8005c1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	789b      	ldrb	r3, [r3, #2]
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	e010      	b.n	8005c14 <sync_window+0x78>
					wsect += fs->fsize;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7858      	ldrb	r0, [r3, #1]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005c06:	2301      	movs	r3, #1
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	f7ff fd1d 	bl	8005648 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d8eb      	bhi.n	8005bf2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d01b      	beq.n	8005c74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ffad 	bl	8005b9c <sync_window>
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d113      	bne.n	8005c74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7858      	ldrb	r0, [r3, #1]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005c56:	2301      	movs	r3, #1
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	f7ff fcd5 	bl	8005608 <disk_read>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005c64:	f04f 33ff 	mov.w	r3, #4294967295
 8005c68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff ff87 	bl	8005b9c <sync_window>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d159      	bne.n	8005d4c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d149      	bne.n	8005d34 <sync_fs+0xb4>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	791b      	ldrb	r3, [r3, #4]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d145      	bne.n	8005d34 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	899b      	ldrh	r3, [r3, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	f7ff fda8 	bl	800580a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3334      	adds	r3, #52	; 0x34
 8005cbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005cc2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fd37 	bl	800573a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3334      	adds	r3, #52	; 0x34
 8005cd0:	4921      	ldr	r1, [pc, #132]	; (8005d58 <sync_fs+0xd8>)
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff fd4c 	bl	8005770 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3334      	adds	r3, #52	; 0x34
 8005cdc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ce0:	491e      	ldr	r1, [pc, #120]	; (8005d5c <sync_fs+0xdc>)
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff fd44 	bl	8005770 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3334      	adds	r3, #52	; 0x34
 8005cec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f7ff fd3a 	bl	8005770 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3334      	adds	r3, #52	; 0x34
 8005d00:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f7ff fd30 	bl	8005770 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7858      	ldrb	r0, [r3, #1]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f7ff fc8d 	bl	8005648 <disk_write>
			fs->fsi_flag = 0;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fca3 	bl	8005688 <disk_ioctl>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <sync_fs+0xcc>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	41615252 	.word	0x41615252
 8005d5c:	61417272 	.word	0x61417272

08005d60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	3b02      	subs	r3, #2
 8005d6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	3b02      	subs	r3, #2
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d301      	bcc.n	8005d80 <clust2sect+0x20>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e008      	b.n	8005d92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	895b      	ldrh	r3, [r3, #10]
 8005d84:	461a      	mov	r2, r3
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	fb03 f202 	mul.w	r2, r3, r2
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	4413      	add	r3, r2
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b086      	sub	sp, #24
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d904      	bls.n	8005dbe <get_fat+0x20>
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d302      	bcc.n	8005dc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e0bb      	b.n	8005f3c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	f000 8083 	beq.w	8005eda <get_fat+0x13c>
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	f300 80a7 	bgt.w	8005f28 <get_fat+0x18a>
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d002      	beq.n	8005de4 <get_fat+0x46>
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d056      	beq.n	8005e90 <get_fat+0xf2>
 8005de2:	e0a1      	b.n	8005f28 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	899b      	ldrh	r3, [r3, #12]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e02:	4413      	add	r3, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	6938      	ldr	r0, [r7, #16]
 8005e08:	f7ff ff0c 	bl	8005c24 <move_window>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f040 808d 	bne.w	8005f2e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	60fa      	str	r2, [r7, #12]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	8992      	ldrh	r2, [r2, #12]
 8005e1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e22:	fb02 f201 	mul.w	r2, r2, r1
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	899b      	ldrh	r3, [r3, #12]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e42:	4413      	add	r3, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	6938      	ldr	r0, [r7, #16]
 8005e48:	f7ff feec 	bl	8005c24 <move_window>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d16f      	bne.n	8005f32 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	899b      	ldrh	r3, [r3, #12]
 8005e56:	461a      	mov	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e5e:	fb02 f201 	mul.w	r2, r2, r1
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <get_fat+0xe8>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	e002      	b.n	8005e8c <get_fat+0xee>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8c:	617b      	str	r3, [r7, #20]
			break;
 8005e8e:	e055      	b.n	8005f3c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	899b      	ldrh	r3, [r3, #12]
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6938      	ldr	r0, [r7, #16]
 8005eaa:	f7ff febb 	bl	8005c24 <move_window>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d140      	bne.n	8005f36 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	8992      	ldrh	r2, [r2, #12]
 8005ec2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ec6:	fb02 f200 	mul.w	r2, r2, r0
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	440b      	add	r3, r1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff fbf8 	bl	80056c4 <ld_word>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	617b      	str	r3, [r7, #20]
			break;
 8005ed8:	e030      	b.n	8005f3c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	899b      	ldrh	r3, [r3, #12]
 8005ee2:	089b      	lsrs	r3, r3, #2
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eee:	4413      	add	r3, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6938      	ldr	r0, [r7, #16]
 8005ef4:	f7ff fe96 	bl	8005c24 <move_window>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d11d      	bne.n	8005f3a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	8992      	ldrh	r2, [r2, #12]
 8005f0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f10:	fb02 f200 	mul.w	r2, r2, r0
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	440b      	add	r3, r1
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fbeb 	bl	80056f4 <ld_dword>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f24:	617b      	str	r3, [r7, #20]
			break;
 8005f26:	e009      	b.n	8005f3c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005f28:	2301      	movs	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e006      	b.n	8005f3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f2e:	bf00      	nop
 8005f30:	e004      	b.n	8005f3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f32:	bf00      	nop
 8005f34:	e002      	b.n	8005f3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f36:	bf00      	nop
 8005f38:	e000      	b.n	8005f3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f3a:	bf00      	nop
		}
	}

	return val;
 8005f3c:	697b      	ldr	r3, [r7, #20]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005f46:	b590      	push	{r4, r7, lr}
 8005f48:	b089      	sub	sp, #36	; 0x24
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005f52:	2302      	movs	r3, #2
 8005f54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	f240 8102 	bls.w	8006162 <put_fat+0x21c>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	f080 80fc 	bcs.w	8006162 <put_fat+0x21c>
		switch (fs->fs_type) {
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	f000 80b6 	beq.w	80060e0 <put_fat+0x19a>
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	f300 80fd 	bgt.w	8006174 <put_fat+0x22e>
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d003      	beq.n	8005f86 <put_fat+0x40>
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	f000 8083 	beq.w	800608a <put_fat+0x144>
 8005f84:	e0f6      	b.n	8006174 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4413      	add	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	899b      	ldrh	r3, [r3, #12]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fa4:	4413      	add	r3, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff fe3b 	bl	8005c24 <move_window>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005fb2:	7ffb      	ldrb	r3, [r7, #31]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 80d6 	bne.w	8006166 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	61ba      	str	r2, [r7, #24]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	8992      	ldrh	r2, [r2, #12]
 8005fca:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fce:	fb02 f200 	mul.w	r2, r2, r0
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00d      	beq.n	8005ffe <put_fat+0xb8>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b25b      	sxtb	r3, r3
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	b25a      	sxtb	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	b25b      	sxtb	r3, r3
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	b25b      	sxtb	r3, r3
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	e001      	b.n	8006002 <put_fat+0xbc>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	899b      	ldrh	r3, [r3, #12]
 8006014:	4619      	mov	r1, r3
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	fbb3 f3f1 	udiv	r3, r3, r1
 800601c:	4413      	add	r3, r2
 800601e:	4619      	mov	r1, r3
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fdff 	bl	8005c24 <move_window>
 8006026:	4603      	mov	r3, r0
 8006028:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800602a:	7ffb      	ldrb	r3, [r7, #31]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 809c 	bne.w	800616a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	899b      	ldrh	r3, [r3, #12]
 800603c:	461a      	mov	r2, r3
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	fbb3 f0f2 	udiv	r0, r3, r2
 8006044:	fb02 f200 	mul.w	r2, r2, r0
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	440b      	add	r3, r1
 800604c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <put_fat+0x11a>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	091b      	lsrs	r3, r3, #4
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e00e      	b.n	800607e <put_fat+0x138>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	b25b      	sxtb	r3, r3
 8006066:	f023 030f 	bic.w	r3, r3, #15
 800606a:	b25a      	sxtb	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	0a1b      	lsrs	r3, r3, #8
 8006070:	b25b      	sxtb	r3, r3
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	b25b      	sxtb	r3, r3
 8006078:	4313      	orrs	r3, r2
 800607a:	b25b      	sxtb	r3, r3
 800607c:	b2db      	uxtb	r3, r3
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	70da      	strb	r2, [r3, #3]
			break;
 8006088:	e074      	b.n	8006174 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	899b      	ldrh	r3, [r3, #12]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	b29b      	uxth	r3, r3
 8006096:	4619      	mov	r1, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	fbb3 f3f1 	udiv	r3, r3, r1
 800609e:	4413      	add	r3, r2
 80060a0:	4619      	mov	r1, r3
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff fdbe 	bl	8005c24 <move_window>
 80060a8:	4603      	mov	r3, r0
 80060aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060ac:	7ffb      	ldrb	r3, [r7, #31]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d15d      	bne.n	800616e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	8992      	ldrh	r2, [r2, #12]
 80060c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80060c4:	fb02 f200 	mul.w	r2, r2, r0
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	440b      	add	r3, r1
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	b292      	uxth	r2, r2
 80060d0:	4611      	mov	r1, r2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fb31 	bl	800573a <st_word>
			fs->wflag = 1;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	70da      	strb	r2, [r3, #3]
			break;
 80060de:	e049      	b.n	8006174 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	899b      	ldrh	r3, [r3, #12]
 80060e8:	089b      	lsrs	r3, r3, #2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	4619      	mov	r1, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80060f4:	4413      	add	r3, r2
 80060f6:	4619      	mov	r1, r3
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff fd93 	bl	8005c24 <move_window>
 80060fe:	4603      	mov	r3, r0
 8006100:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006102:	7ffb      	ldrb	r3, [r7, #31]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d134      	bne.n	8006172 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	8992      	ldrh	r2, [r2, #12]
 800611c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006120:	fb02 f200 	mul.w	r2, r2, r0
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	440b      	add	r3, r1
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fae3 	bl	80056f4 <ld_dword>
 800612e:	4603      	mov	r3, r0
 8006130:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006134:	4323      	orrs	r3, r4
 8006136:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	8992      	ldrh	r2, [r2, #12]
 8006146:	fbb3 f0f2 	udiv	r0, r3, r2
 800614a:	fb02 f200 	mul.w	r2, r2, r0
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	440b      	add	r3, r1
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fb0b 	bl	8005770 <st_dword>
			fs->wflag = 1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	70da      	strb	r2, [r3, #3]
			break;
 8006160:	e008      	b.n	8006174 <put_fat+0x22e>
		}
	}
 8006162:	bf00      	nop
 8006164:	e006      	b.n	8006174 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006166:	bf00      	nop
 8006168:	e004      	b.n	8006174 <put_fat+0x22e>
			if (res != FR_OK) break;
 800616a:	bf00      	nop
 800616c:	e002      	b.n	8006174 <put_fat+0x22e>
			if (res != FR_OK) break;
 800616e:	bf00      	nop
 8006170:	e000      	b.n	8006174 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006172:	bf00      	nop
	return res;
 8006174:	7ffb      	ldrb	r3, [r7, #31]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3724      	adds	r7, #36	; 0x24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd90      	pop	{r4, r7, pc}

0800617e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b088      	sub	sp, #32
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d904      	bls.n	80061a4 <remove_chain+0x26>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d301      	bcc.n	80061a8 <remove_chain+0x2a>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e04b      	b.n	8006240 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80061ae:	f04f 32ff 	mov.w	r2, #4294967295
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	69b8      	ldr	r0, [r7, #24]
 80061b6:	f7ff fec6 	bl	8005f46 <put_fat>
 80061ba:	4603      	mov	r3, r0
 80061bc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80061be:	7ffb      	ldrb	r3, [r7, #31]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <remove_chain+0x4a>
 80061c4:	7ffb      	ldrb	r3, [r7, #31]
 80061c6:	e03b      	b.n	8006240 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f7ff fde7 	bl	8005d9e <get_fat>
 80061d0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d031      	beq.n	800623c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <remove_chain+0x64>
 80061de:	2302      	movs	r3, #2
 80061e0:	e02e      	b.n	8006240 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d101      	bne.n	80061ee <remove_chain+0x70>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e028      	b.n	8006240 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80061ee:	2200      	movs	r2, #0
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	69b8      	ldr	r0, [r7, #24]
 80061f4:	f7ff fea7 	bl	8005f46 <put_fat>
 80061f8:	4603      	mov	r3, r0
 80061fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80061fc:	7ffb      	ldrb	r3, [r7, #31]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <remove_chain+0x88>
 8006202:	7ffb      	ldrb	r3, [r7, #31]
 8006204:	e01c      	b.n	8006240 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	3b02      	subs	r3, #2
 8006210:	429a      	cmp	r2, r3
 8006212:	d20b      	bcs.n	800622c <remove_chain+0xae>
			fs->free_clst++;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	791b      	ldrb	r3, [r3, #4]
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	b2da      	uxtb	r2, r3
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	d3c6      	bcc.n	80061c8 <remove_chain+0x4a>
 800623a:	e000      	b.n	800623e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800623c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10d      	bne.n	800627a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <create_chain+0x2c>
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	429a      	cmp	r2, r3
 8006272:	d31b      	bcc.n	80062ac <create_chain+0x64>
 8006274:	2301      	movs	r3, #1
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	e018      	b.n	80062ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff fd8e 	bl	8005d9e <get_fat>
 8006282:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d801      	bhi.n	800628e <create_chain+0x46>
 800628a:	2301      	movs	r3, #1
 800628c:	e070      	b.n	8006370 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d101      	bne.n	800629a <create_chain+0x52>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	e06a      	b.n	8006370 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d201      	bcs.n	80062a8 <create_chain+0x60>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	e063      	b.n	8006370 <create_chain+0x128>
		scl = clst;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	3301      	adds	r3, #1
 80062b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d307      	bcc.n	80062d0 <create_chain+0x88>
				ncl = 2;
 80062c0:	2302      	movs	r3, #2
 80062c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d901      	bls.n	80062d0 <create_chain+0x88>
 80062cc:	2300      	movs	r3, #0
 80062ce:	e04f      	b.n	8006370 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80062d0:	69f9      	ldr	r1, [r7, #28]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff fd63 	bl	8005d9e <get_fat>
 80062d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d003      	beq.n	80062ee <create_chain+0xa6>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d101      	bne.n	80062f2 <create_chain+0xaa>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	e03e      	b.n	8006370 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d1da      	bne.n	80062b0 <create_chain+0x68>
 80062fa:	2300      	movs	r3, #0
 80062fc:	e038      	b.n	8006370 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80062fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006300:	f04f 32ff 	mov.w	r2, #4294967295
 8006304:	69f9      	ldr	r1, [r7, #28]
 8006306:	6938      	ldr	r0, [r7, #16]
 8006308:	f7ff fe1d 	bl	8005f46 <put_fat>
 800630c:	4603      	mov	r3, r0
 800630e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <create_chain+0xe2>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d006      	beq.n	800632a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6938      	ldr	r0, [r7, #16]
 8006322:	f7ff fe10 	bl	8005f46 <put_fat>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d116      	bne.n	800635e <create_chain+0x116>
		fs->last_clst = ncl;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	695a      	ldr	r2, [r3, #20]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	3b02      	subs	r3, #2
 8006340:	429a      	cmp	r2, r3
 8006342:	d804      	bhi.n	800634e <create_chain+0x106>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	791b      	ldrb	r3, [r3, #4]
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	b2da      	uxtb	r2, r3
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	711a      	strb	r2, [r3, #4]
 800635c:	e007      	b.n	800636e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d102      	bne.n	800636a <create_chain+0x122>
 8006364:	f04f 33ff 	mov.w	r3, #4294967295
 8006368:	e000      	b.n	800636c <create_chain+0x124>
 800636a:	2301      	movs	r3, #1
 800636c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800636e:	69fb      	ldr	r3, [r7, #28]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3720      	adds	r7, #32
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	3304      	adds	r3, #4
 800638e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	899b      	ldrh	r3, [r3, #12]
 8006394:	461a      	mov	r2, r3
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	fbb3 f3f2 	udiv	r3, r3, r2
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	8952      	ldrh	r2, [r2, #10]
 80063a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1d1a      	adds	r2, r3, #4
 80063aa:	613a      	str	r2, [r7, #16]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <clmt_clust+0x42>
 80063b6:	2300      	movs	r3, #0
 80063b8:	e010      	b.n	80063dc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d307      	bcc.n	80063d2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	3304      	adds	r3, #4
 80063ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063d0:	e7e9      	b.n	80063a6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80063d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	4413      	add	r3, r2
}
 80063dc:	4618      	mov	r0, r3
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063fe:	d204      	bcs.n	800640a <dir_sdi+0x22>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <dir_sdi+0x26>
		return FR_INT_ERR;
 800640a:	2302      	movs	r3, #2
 800640c:	e071      	b.n	80064f2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <dir_sdi+0x46>
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d902      	bls.n	800642e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10c      	bne.n	800644e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	8912      	ldrh	r2, [r2, #8]
 800643c:	4293      	cmp	r3, r2
 800643e:	d301      	bcc.n	8006444 <dir_sdi+0x5c>
 8006440:	2302      	movs	r3, #2
 8006442:	e056      	b.n	80064f2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	61da      	str	r2, [r3, #28]
 800644c:	e02d      	b.n	80064aa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	895b      	ldrh	r3, [r3, #10]
 8006452:	461a      	mov	r2, r3
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	899b      	ldrh	r3, [r3, #12]
 8006458:	fb03 f302 	mul.w	r3, r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800645e:	e019      	b.n	8006494 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fc9a 	bl	8005d9e <get_fat>
 800646a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006472:	d101      	bne.n	8006478 <dir_sdi+0x90>
 8006474:	2301      	movs	r3, #1
 8006476:	e03c      	b.n	80064f2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d904      	bls.n	8006488 <dir_sdi+0xa0>
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	429a      	cmp	r2, r3
 8006486:	d301      	bcc.n	800648c <dir_sdi+0xa4>
 8006488:	2302      	movs	r3, #2
 800648a:	e032      	b.n	80064f2 <dir_sdi+0x10a>
			ofs -= csz;
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	429a      	cmp	r2, r3
 800649a:	d2e1      	bcs.n	8006460 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800649c:	6979      	ldr	r1, [r7, #20]
 800649e:	6938      	ldr	r0, [r7, #16]
 80064a0:	f7ff fc5e 	bl	8005d60 <clust2sect>
 80064a4:	4602      	mov	r2, r0
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <dir_sdi+0xd4>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e01a      	b.n	80064f2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	899b      	ldrh	r3, [r3, #12]
 80064c4:	4619      	mov	r1, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80064cc:	441a      	add	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	899b      	ldrh	r3, [r3, #12]
 80064dc:	461a      	mov	r2, r3
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80064e4:	fb02 f200 	mul.w	r2, r2, r0
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	18ca      	adds	r2, r1, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b086      	sub	sp, #24
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	3320      	adds	r3, #32
 8006510:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <dir_next+0x28>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006520:	d301      	bcc.n	8006526 <dir_next+0x2c>
 8006522:	2304      	movs	r3, #4
 8006524:	e0bb      	b.n	800669e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	899b      	ldrh	r3, [r3, #12]
 800652a:	461a      	mov	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006532:	fb02 f201 	mul.w	r2, r2, r1
 8006536:	1a9b      	subs	r3, r3, r2
 8006538:	2b00      	cmp	r3, #0
 800653a:	f040 809d 	bne.w	8006678 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10b      	bne.n	8006568 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	8912      	ldrh	r2, [r2, #8]
 8006558:	4293      	cmp	r3, r2
 800655a:	f0c0 808d 	bcc.w	8006678 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	61da      	str	r2, [r3, #28]
 8006564:	2304      	movs	r3, #4
 8006566:	e09a      	b.n	800669e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	899b      	ldrh	r3, [r3, #12]
 800656c:	461a      	mov	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	fbb3 f3f2 	udiv	r3, r3, r2
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	8952      	ldrh	r2, [r2, #10]
 8006578:	3a01      	subs	r2, #1
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d17b      	bne.n	8006678 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f7ff fc08 	bl	8005d9e <get_fat>
 800658e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d801      	bhi.n	800659a <dir_next+0xa0>
 8006596:	2302      	movs	r3, #2
 8006598:	e081      	b.n	800669e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d101      	bne.n	80065a6 <dir_next+0xac>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e07b      	b.n	800669e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d359      	bcc.n	8006664 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d104      	bne.n	80065c0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	61da      	str	r2, [r3, #28]
 80065bc:	2304      	movs	r3, #4
 80065be:	e06e      	b.n	800669e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f7ff fe3d 	bl	8006248 <create_chain>
 80065ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <dir_next+0xe0>
 80065d6:	2307      	movs	r3, #7
 80065d8:	e061      	b.n	800669e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <dir_next+0xea>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e05c      	b.n	800669e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d101      	bne.n	80065f0 <dir_next+0xf6>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e056      	b.n	800669e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff fad3 	bl	8005b9c <sync_window>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <dir_next+0x106>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e04e      	b.n	800669e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	899b      	ldrh	r3, [r3, #12]
 800660a:	461a      	mov	r2, r3
 800660c:	2100      	movs	r1, #0
 800660e:	f7ff f8fc 	bl	800580a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	6979      	ldr	r1, [r7, #20]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff fba1 	bl	8005d60 <clust2sect>
 800661e:	4602      	mov	r2, r0
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
 8006624:	e012      	b.n	800664c <dir_next+0x152>
						fs->wflag = 1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f7ff fab5 	bl	8005b9c <sync_window>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <dir_next+0x142>
 8006638:	2301      	movs	r3, #1
 800663a:	e030      	b.n	800669e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	3301      	adds	r3, #1
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	895b      	ldrh	r3, [r3, #10]
 8006650:	461a      	mov	r2, r3
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	4293      	cmp	r3, r2
 8006656:	d3e6      	bcc.n	8006626 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800666a:	6979      	ldr	r1, [r7, #20]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7ff fb77 	bl	8005d60 <clust2sect>
 8006672:	4602      	mov	r2, r0
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	899b      	ldrh	r3, [r3, #12]
 8006688:	461a      	mov	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006690:	fb02 f200 	mul.w	r2, r2, r0
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	18ca      	adds	r2, r1, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80066b6:	2100      	movs	r1, #0
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fe95 	bl	80063e8 <dir_sdi>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d12b      	bne.n	8006720 <dir_alloc+0x7a>
		n = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	4619      	mov	r1, r3
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff faa6 	bl	8005c24 <move_window>
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d11d      	bne.n	800671e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2be5      	cmp	r3, #229	; 0xe5
 80066ea:	d004      	beq.n	80066f6 <dir_alloc+0x50>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d107      	bne.n	8006706 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	3301      	adds	r3, #1
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d102      	bne.n	800670a <dir_alloc+0x64>
 8006704:	e00c      	b.n	8006720 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800670a:	2101      	movs	r1, #1
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fef4 	bl	80064fa <dir_next>
 8006712:	4603      	mov	r3, r0
 8006714:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0d7      	beq.n	80066cc <dir_alloc+0x26>
 800671c:	e000      	b.n	8006720 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800671e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	2b04      	cmp	r3, #4
 8006724:	d101      	bne.n	800672a <dir_alloc+0x84>
 8006726:	2307      	movs	r3, #7
 8006728:	75fb      	strb	r3, [r7, #23]
	return res;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	331a      	adds	r3, #26
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe ffbe 	bl	80056c4 <ld_word>
 8006748:	4603      	mov	r3, r0
 800674a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d109      	bne.n	8006768 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	3314      	adds	r3, #20
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe ffb3 	bl	80056c4 <ld_word>
 800675e:	4603      	mov	r3, r0
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006768:	68fb      	ldr	r3, [r7, #12]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	331a      	adds	r3, #26
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	b292      	uxth	r2, r2
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe ffd6 	bl	800573a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d109      	bne.n	80067aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f103 0214 	add.w	r2, r3, #20
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	0c1b      	lsrs	r3, r3, #16
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	4619      	mov	r1, r3
 80067a4:	4610      	mov	r0, r2
 80067a6:	f7fe ffc8 	bl	800573a <st_word>
	}
}
 80067aa:	bf00      	nop
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b086      	sub	sp, #24
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80067c0:	2100      	movs	r1, #0
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fe10 	bl	80063e8 <dir_sdi>
 80067c8:	4603      	mov	r3, r0
 80067ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <dir_find+0x24>
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	e03e      	b.n	8006854 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	4619      	mov	r1, r3
 80067dc:	6938      	ldr	r0, [r7, #16]
 80067de:	f7ff fa21 	bl	8005c24 <move_window>
 80067e2:	4603      	mov	r3, r0
 80067e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d12f      	bne.n	800684c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <dir_find+0x4e>
 80067fa:	2304      	movs	r3, #4
 80067fc:	75fb      	strb	r3, [r7, #23]
 80067fe:	e028      	b.n	8006852 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	330b      	adds	r3, #11
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800680c:	b2da      	uxtb	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	330b      	adds	r3, #11
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <dir_find+0x86>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a18      	ldr	r0, [r3, #32]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3324      	adds	r3, #36	; 0x24
 800682a:	220b      	movs	r2, #11
 800682c:	4619      	mov	r1, r3
 800682e:	f7ff f807 	bl	8005840 <mem_cmp>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006838:	2100      	movs	r1, #0
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff fe5d 	bl	80064fa <dir_next>
 8006840:	4603      	mov	r3, r0
 8006842:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0c5      	beq.n	80067d6 <dir_find+0x24>
 800684a:	e002      	b.n	8006852 <dir_find+0xa0>
		if (res != FR_OK) break;
 800684c:	bf00      	nop
 800684e:	e000      	b.n	8006852 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006850:	bf00      	nop

	return res;
 8006852:	7dfb      	ldrb	r3, [r7, #23]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800686a:	2101      	movs	r1, #1
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ff1a 	bl	80066a6 <dir_alloc>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d11c      	bne.n	80068b6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	4619      	mov	r1, r3
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	f7ff f9ce 	bl	8005c24 <move_window>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d111      	bne.n	80068b6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	2220      	movs	r2, #32
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe ffb5 	bl	800580a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a18      	ldr	r0, [r3, #32]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3324      	adds	r3, #36	; 0x24
 80068a8:	220b      	movs	r2, #11
 80068aa:	4619      	mov	r1, r3
 80068ac:	f7fe ff8c 	bl	80057c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2201      	movs	r2, #1
 80068b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3324      	adds	r3, #36	; 0x24
 80068d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80068d6:	220b      	movs	r2, #11
 80068d8:	2120      	movs	r1, #32
 80068da:	68b8      	ldr	r0, [r7, #8]
 80068dc:	f7fe ff95 	bl	800580a <mem_set>
	si = i = 0; ni = 8;
 80068e0:	2300      	movs	r3, #0
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	2308      	movs	r3, #8
 80068ea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	61fa      	str	r2, [r7, #28]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80068fa:	7efb      	ldrb	r3, [r7, #27]
 80068fc:	2b20      	cmp	r3, #32
 80068fe:	d94e      	bls.n	800699e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006900:	7efb      	ldrb	r3, [r7, #27]
 8006902:	2b2f      	cmp	r3, #47	; 0x2f
 8006904:	d006      	beq.n	8006914 <create_name+0x54>
 8006906:	7efb      	ldrb	r3, [r7, #27]
 8006908:	2b5c      	cmp	r3, #92	; 0x5c
 800690a:	d110      	bne.n	800692e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800690c:	e002      	b.n	8006914 <create_name+0x54>
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3301      	adds	r3, #1
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b2f      	cmp	r3, #47	; 0x2f
 800691e:	d0f6      	beq.n	800690e <create_name+0x4e>
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b5c      	cmp	r3, #92	; 0x5c
 800692a:	d0f0      	beq.n	800690e <create_name+0x4e>
			break;
 800692c:	e038      	b.n	80069a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800692e:	7efb      	ldrb	r3, [r7, #27]
 8006930:	2b2e      	cmp	r3, #46	; 0x2e
 8006932:	d003      	beq.n	800693c <create_name+0x7c>
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	429a      	cmp	r2, r3
 800693a:	d30c      	bcc.n	8006956 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2b0b      	cmp	r3, #11
 8006940:	d002      	beq.n	8006948 <create_name+0x88>
 8006942:	7efb      	ldrb	r3, [r7, #27]
 8006944:	2b2e      	cmp	r3, #46	; 0x2e
 8006946:	d001      	beq.n	800694c <create_name+0x8c>
 8006948:	2306      	movs	r3, #6
 800694a:	e044      	b.n	80069d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800694c:	2308      	movs	r3, #8
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	230b      	movs	r3, #11
 8006952:	617b      	str	r3, [r7, #20]
			continue;
 8006954:	e022      	b.n	800699c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006956:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800695a:	2b00      	cmp	r3, #0
 800695c:	da04      	bge.n	8006968 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800695e:	7efb      	ldrb	r3, [r7, #27]
 8006960:	3b80      	subs	r3, #128	; 0x80
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <create_name+0x120>)
 8006964:	5cd3      	ldrb	r3, [r2, r3]
 8006966:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006968:	7efb      	ldrb	r3, [r7, #27]
 800696a:	4619      	mov	r1, r3
 800696c:	481d      	ldr	r0, [pc, #116]	; (80069e4 <create_name+0x124>)
 800696e:	f7fe ff8e 	bl	800588e <chk_chr>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <create_name+0xbc>
 8006978:	2306      	movs	r3, #6
 800697a:	e02c      	b.n	80069d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800697c:	7efb      	ldrb	r3, [r7, #27]
 800697e:	2b60      	cmp	r3, #96	; 0x60
 8006980:	d905      	bls.n	800698e <create_name+0xce>
 8006982:	7efb      	ldrb	r3, [r7, #27]
 8006984:	2b7a      	cmp	r3, #122	; 0x7a
 8006986:	d802      	bhi.n	800698e <create_name+0xce>
 8006988:	7efb      	ldrb	r3, [r7, #27]
 800698a:	3b20      	subs	r3, #32
 800698c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	613a      	str	r2, [r7, #16]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	4413      	add	r3, r2
 8006998:	7efa      	ldrb	r2, [r7, #27]
 800699a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800699c:	e7a6      	b.n	80068ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800699e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	441a      	add	r2, r3
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <create_name+0xf4>
 80069b0:	2306      	movs	r3, #6
 80069b2:	e010      	b.n	80069d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2be5      	cmp	r3, #229	; 0xe5
 80069ba:	d102      	bne.n	80069c2 <create_name+0x102>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2205      	movs	r2, #5
 80069c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80069c2:	7efb      	ldrb	r3, [r7, #27]
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d801      	bhi.n	80069cc <create_name+0x10c>
 80069c8:	2204      	movs	r2, #4
 80069ca:	e000      	b.n	80069ce <create_name+0x10e>
 80069cc:	2200      	movs	r2, #0
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	330b      	adds	r3, #11
 80069d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80069d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	08008c6c 	.word	0x08008c6c
 80069e4:	08008bfc 	.word	0x08008bfc

080069e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80069fc:	e002      	b.n	8006a04 <follow_path+0x1c>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b2f      	cmp	r3, #47	; 0x2f
 8006a0a:	d0f8      	beq.n	80069fe <follow_path+0x16>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b5c      	cmp	r3, #92	; 0x5c
 8006a12:	d0f4      	beq.n	80069fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2200      	movs	r2, #0
 8006a18:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b1f      	cmp	r3, #31
 8006a20:	d80a      	bhi.n	8006a38 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2280      	movs	r2, #128	; 0x80
 8006a26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff fcdb 	bl	80063e8 <dir_sdi>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]
 8006a36:	e048      	b.n	8006aca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a38:	463b      	mov	r3, r7
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff ff3f 	bl	80068c0 <create_name>
 8006a42:	4603      	mov	r3, r0
 8006a44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d139      	bne.n	8006ac0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff feb0 	bl	80067b2 <dir_find>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a5c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d12c      	bne.n	8006ac4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d127      	bne.n	8006ac4 <follow_path+0xdc>
 8006a74:	2305      	movs	r3, #5
 8006a76:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006a78:	e024      	b.n	8006ac4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d121      	bne.n	8006ac8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	799b      	ldrb	r3, [r3, #6]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d102      	bne.n	8006a96 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006a90:	2305      	movs	r3, #5
 8006a92:	75fb      	strb	r3, [r7, #23]
 8006a94:	e019      	b.n	8006aca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	8992      	ldrh	r2, [r2, #12]
 8006aa4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006aa8:	fb02 f200 	mul.w	r2, r2, r0
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	440b      	add	r3, r1
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff fe3e 	bl	8006734 <ld_clust>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006abe:	e7bb      	b.n	8006a38 <follow_path+0x50>
			if (res != FR_OK) break;
 8006ac0:	bf00      	nop
 8006ac2:	e002      	b.n	8006aca <follow_path+0xe2>
				break;
 8006ac4:	bf00      	nop
 8006ac6:	e000      	b.n	8006aca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ac8:	bf00      	nop
			}
		}
	}

	return res;
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006adc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d031      	beq.n	8006b4e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e002      	b.n	8006af8 <get_ldnumber+0x24>
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	3301      	adds	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d903      	bls.n	8006b08 <get_ldnumber+0x34>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b3a      	cmp	r3, #58	; 0x3a
 8006b06:	d1f4      	bne.n	8006af2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b3a      	cmp	r3, #58	; 0x3a
 8006b0e:	d11c      	bne.n	8006b4a <get_ldnumber+0x76>
			tp = *path;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	60fa      	str	r2, [r7, #12]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	3b30      	subs	r3, #48	; 0x30
 8006b20:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b09      	cmp	r3, #9
 8006b26:	d80e      	bhi.n	8006b46 <get_ldnumber+0x72>
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d10a      	bne.n	8006b46 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <get_ldnumber+0x72>
					vol = (int)i;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	e002      	b.n	8006b50 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b4e:	693b      	ldr	r3, [r7, #16]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	70da      	strb	r2, [r3, #3]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff f854 	bl	8005c24 <move_window>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <check_fs+0x2a>
 8006b82:	2304      	movs	r3, #4
 8006b84:	e038      	b.n	8006bf8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3334      	adds	r3, #52	; 0x34
 8006b8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fe fd98 	bl	80056c4 <ld_word>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d001      	beq.n	8006ba4 <check_fs+0x48>
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e029      	b.n	8006bf8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006baa:	2be9      	cmp	r3, #233	; 0xe9
 8006bac:	d009      	beq.n	8006bc2 <check_fs+0x66>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bb4:	2beb      	cmp	r3, #235	; 0xeb
 8006bb6:	d11e      	bne.n	8006bf6 <check_fs+0x9a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006bbe:	2b90      	cmp	r3, #144	; 0x90
 8006bc0:	d119      	bne.n	8006bf6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3334      	adds	r3, #52	; 0x34
 8006bc6:	3336      	adds	r3, #54	; 0x36
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe fd93 	bl	80056f4 <ld_dword>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bd4:	4a0a      	ldr	r2, [pc, #40]	; (8006c00 <check_fs+0xa4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d101      	bne.n	8006bde <check_fs+0x82>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e00c      	b.n	8006bf8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3334      	adds	r3, #52	; 0x34
 8006be2:	3352      	adds	r3, #82	; 0x52
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe fd85 	bl	80056f4 <ld_dword>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4a05      	ldr	r2, [pc, #20]	; (8006c04 <check_fs+0xa8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d101      	bne.n	8006bf6 <check_fs+0x9a>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e000      	b.n	8006bf8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006bf6:	2302      	movs	r3, #2
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	00544146 	.word	0x00544146
 8006c04:	33544146 	.word	0x33544146

08006c08 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b096      	sub	sp, #88	; 0x58
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f7ff ff59 	bl	8006ad4 <get_ldnumber>
 8006c22:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	da01      	bge.n	8006c2e <find_volume+0x26>
 8006c2a:	230b      	movs	r3, #11
 8006c2c:	e265      	b.n	80070fa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c2e:	4ab0      	ldr	r2, [pc, #704]	; (8006ef0 <find_volume+0x2e8>)
 8006c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c36:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <find_volume+0x3a>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	e25b      	b.n	80070fa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01a      	beq.n	8006c8e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fc93 	bl	8005588 <disk_status>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006c68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10c      	bne.n	8006c8e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <find_volume+0x82>
 8006c7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006c86:	230a      	movs	r3, #10
 8006c88:	e237      	b.n	80070fa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e235      	b.n	80070fa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	785b      	ldrb	r3, [r3, #1]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe fc8b 	bl	80055bc <disk_initialize>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006cac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e21e      	b.n	80070fa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <find_volume+0xca>
 8006cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006cce:	230a      	movs	r3, #10
 8006cd0:	e213      	b.n	80070fa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	7858      	ldrb	r0, [r3, #1]
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	330c      	adds	r3, #12
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2102      	movs	r1, #2
 8006cde:	f7fe fcd3 	bl	8005688 <disk_ioctl>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <find_volume+0xe4>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e206      	b.n	80070fa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	899b      	ldrh	r3, [r3, #12]
 8006cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf4:	d80d      	bhi.n	8006d12 <find_volume+0x10a>
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	899b      	ldrh	r3, [r3, #12]
 8006cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cfe:	d308      	bcc.n	8006d12 <find_volume+0x10a>
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	899b      	ldrh	r3, [r3, #12]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d08:	899b      	ldrh	r3, [r3, #12]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <find_volume+0x10e>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e1f1      	b.n	80070fa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d1e:	f7ff ff1d 	bl	8006b5c <check_fs>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d14b      	bne.n	8006dc8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d30:	2300      	movs	r3, #0
 8006d32:	643b      	str	r3, [r7, #64]	; 0x40
 8006d34:	e01f      	b.n	8006d76 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006d44:	4413      	add	r3, r2
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d006      	beq.n	8006d60 <find_volume+0x158>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	3308      	adds	r3, #8
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fccc 	bl	80056f4 <ld_dword>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	e000      	b.n	8006d62 <find_volume+0x15a>
 8006d60:	2200      	movs	r2, #0
 8006d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006d6a:	440b      	add	r3, r1
 8006d6c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d72:	3301      	adds	r3, #1
 8006d74:	643b      	str	r3, [r7, #64]	; 0x40
 8006d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d9dc      	bls.n	8006d36 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <find_volume+0x184>
 8006d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006d94:	4413      	add	r3, r2
 8006d96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006d9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <find_volume+0x1a6>
 8006da2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006da4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006da6:	f7ff fed9 	bl	8006b5c <check_fs>
 8006daa:	4603      	mov	r3, r0
 8006dac:	e000      	b.n	8006db0 <find_volume+0x1a8>
 8006dae:	2303      	movs	r3, #3
 8006db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d905      	bls.n	8006dc8 <find_volume+0x1c0>
 8006dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8006dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d9e1      	bls.n	8006d8c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d101      	bne.n	8006dd4 <find_volume+0x1cc>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e192      	b.n	80070fa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d901      	bls.n	8006de0 <find_volume+0x1d8>
 8006ddc:	230d      	movs	r3, #13
 8006dde:	e18c      	b.n	80070fa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	3334      	adds	r3, #52	; 0x34
 8006de4:	330b      	adds	r3, #11
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fc6c 	bl	80056c4 <ld_word>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	899b      	ldrh	r3, [r3, #12]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d001      	beq.n	8006dfc <find_volume+0x1f4>
 8006df8:	230d      	movs	r3, #13
 8006dfa:	e17e      	b.n	80070fa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	3334      	adds	r3, #52	; 0x34
 8006e00:	3316      	adds	r3, #22
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fc5e 	bl	80056c4 <ld_word>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <find_volume+0x218>
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	3334      	adds	r3, #52	; 0x34
 8006e16:	3324      	adds	r3, #36	; 0x24
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fc6b 	bl	80056f4 <ld_dword>
 8006e1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e24:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	789b      	ldrb	r3, [r3, #2]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d005      	beq.n	8006e44 <find_volume+0x23c>
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	789b      	ldrb	r3, [r3, #2]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d001      	beq.n	8006e44 <find_volume+0x23c>
 8006e40:	230d      	movs	r3, #13
 8006e42:	e15a      	b.n	80070fa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	789b      	ldrb	r3, [r3, #2]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4c:	fb02 f303 	mul.w	r3, r2, r3
 8006e50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	895b      	ldrh	r3, [r3, #10]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <find_volume+0x270>
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	895b      	ldrh	r3, [r3, #10]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	895b      	ldrh	r3, [r3, #10]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <find_volume+0x274>
 8006e78:	230d      	movs	r3, #13
 8006e7a:	e13e      	b.n	80070fa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	3334      	adds	r3, #52	; 0x34
 8006e80:	3311      	adds	r3, #17
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe fc1e 	bl	80056c4 <ld_word>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	891b      	ldrh	r3, [r3, #8]
 8006e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e96:	8992      	ldrh	r2, [r2, #12]
 8006e98:	0952      	lsrs	r2, r2, #5
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ea0:	fb02 f201 	mul.w	r2, r2, r1
 8006ea4:	1a9b      	subs	r3, r3, r2
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <find_volume+0x2a8>
 8006eac:	230d      	movs	r3, #13
 8006eae:	e124      	b.n	80070fa <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	3334      	adds	r3, #52	; 0x34
 8006eb4:	3313      	adds	r3, #19
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fc04 	bl	80056c4 <ld_word>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <find_volume+0x2cc>
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec8:	3334      	adds	r3, #52	; 0x34
 8006eca:	3320      	adds	r3, #32
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fc11 	bl	80056f4 <ld_dword>
 8006ed2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	3334      	adds	r3, #52	; 0x34
 8006ed8:	330e      	adds	r3, #14
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fbf2 	bl	80056c4 <ld_word>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ee4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d104      	bne.n	8006ef4 <find_volume+0x2ec>
 8006eea:	230d      	movs	r3, #13
 8006eec:	e105      	b.n	80070fa <find_volume+0x4f2>
 8006eee:	bf00      	nop
 8006ef0:	200010f8 	.word	0x200010f8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006ef4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef8:	4413      	add	r3, r2
 8006efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006efc:	8911      	ldrh	r1, [r2, #8]
 8006efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f00:	8992      	ldrh	r2, [r2, #12]
 8006f02:	0952      	lsrs	r2, r2, #5
 8006f04:	b292      	uxth	r2, r2
 8006f06:	fbb1 f2f2 	udiv	r2, r1, r2
 8006f0a:	b292      	uxth	r2, r2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d201      	bcs.n	8006f1c <find_volume+0x314>
 8006f18:	230d      	movs	r3, #13
 8006f1a:	e0ee      	b.n	80070fa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f24:	8952      	ldrh	r2, [r2, #10]
 8006f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <find_volume+0x32e>
 8006f32:	230d      	movs	r3, #13
 8006f34:	e0e1      	b.n	80070fa <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006f36:	2303      	movs	r3, #3
 8006f38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d802      	bhi.n	8006f4c <find_volume+0x344>
 8006f46:	2302      	movs	r3, #2
 8006f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d802      	bhi.n	8006f5c <find_volume+0x354>
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	1c9a      	adds	r2, r3, #2
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f68:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006f6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f6e:	441a      	add	r2, r3
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006f74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	441a      	add	r2, r3
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006f7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d11e      	bne.n	8006fc4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	3334      	adds	r3, #52	; 0x34
 8006f8a:	332a      	adds	r3, #42	; 0x2a
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fb99 	bl	80056c4 <ld_word>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <find_volume+0x394>
 8006f98:	230d      	movs	r3, #13
 8006f9a:	e0ae      	b.n	80070fa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	891b      	ldrh	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <find_volume+0x3a0>
 8006fa4:	230d      	movs	r3, #13
 8006fa6:	e0a8      	b.n	80070fa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	3334      	adds	r3, #52	; 0x34
 8006fac:	332c      	adds	r3, #44	; 0x2c
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fba0 	bl	80056f4 <ld_dword>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc2:	e01f      	b.n	8007004 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	891b      	ldrh	r3, [r3, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <find_volume+0x3c8>
 8006fcc:	230d      	movs	r3, #13
 8006fce:	e094      	b.n	80070fa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd6:	441a      	add	r2, r3
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d103      	bne.n	8006fec <find_volume+0x3e4>
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	e00a      	b.n	8007002 <find_volume+0x3fa>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	699a      	ldr	r2, [r3, #24]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	4413      	add	r3, r2
 8006ff6:	085a      	lsrs	r2, r3, #1
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007002:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	69da      	ldr	r2, [r3, #28]
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	899b      	ldrh	r3, [r3, #12]
 800700c:	4619      	mov	r1, r3
 800700e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007010:	440b      	add	r3, r1
 8007012:	3b01      	subs	r3, #1
 8007014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007016:	8989      	ldrh	r1, [r1, #12]
 8007018:	fbb3 f3f1 	udiv	r3, r3, r1
 800701c:	429a      	cmp	r2, r3
 800701e:	d201      	bcs.n	8007024 <find_volume+0x41c>
 8007020:	230d      	movs	r3, #13
 8007022:	e06a      	b.n	80070fa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	f04f 32ff 	mov.w	r2, #4294967295
 800702a:	615a      	str	r2, [r3, #20]
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	695a      	ldr	r2, [r3, #20]
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	2280      	movs	r2, #128	; 0x80
 8007038:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800703a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800703e:	2b03      	cmp	r3, #3
 8007040:	d149      	bne.n	80070d6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	3334      	adds	r3, #52	; 0x34
 8007046:	3330      	adds	r3, #48	; 0x30
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe fb3b 	bl	80056c4 <ld_word>
 800704e:	4603      	mov	r3, r0
 8007050:	2b01      	cmp	r3, #1
 8007052:	d140      	bne.n	80070d6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007056:	3301      	adds	r3, #1
 8007058:	4619      	mov	r1, r3
 800705a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800705c:	f7fe fde2 	bl	8005c24 <move_window>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d137      	bne.n	80070d6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	2200      	movs	r2, #0
 800706a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	3334      	adds	r3, #52	; 0x34
 8007070:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe fb25 	bl	80056c4 <ld_word>
 800707a:	4603      	mov	r3, r0
 800707c:	461a      	mov	r2, r3
 800707e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007082:	429a      	cmp	r2, r3
 8007084:	d127      	bne.n	80070d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	3334      	adds	r3, #52	; 0x34
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fb32 	bl	80056f4 <ld_dword>
 8007090:	4603      	mov	r3, r0
 8007092:	4a1c      	ldr	r2, [pc, #112]	; (8007104 <find_volume+0x4fc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d11e      	bne.n	80070d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	3334      	adds	r3, #52	; 0x34
 800709c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe fb27 	bl	80056f4 <ld_dword>
 80070a6:	4603      	mov	r3, r0
 80070a8:	4a17      	ldr	r2, [pc, #92]	; (8007108 <find_volume+0x500>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d113      	bne.n	80070d6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80070ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b0:	3334      	adds	r3, #52	; 0x34
 80070b2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fb1c 	bl	80056f4 <ld_dword>
 80070bc:	4602      	mov	r2, r0
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	3334      	adds	r3, #52	; 0x34
 80070c6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fb12 	bl	80056f4 <ld_dword>
 80070d0:	4602      	mov	r2, r0
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80070dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <find_volume+0x504>)
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	3301      	adds	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <find_volume+0x504>)
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <find_volume+0x504>)
 80070ec:	881a      	ldrh	r2, [r3, #0]
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80070f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070f4:	f7fe fd2e 	bl	8005b54 <clear_lock>
#endif
	return FR_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3758      	adds	r7, #88	; 0x58
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	41615252 	.word	0x41615252
 8007108:	61417272 	.word	0x61417272
 800710c:	200010fc 	.word	0x200010fc

08007110 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800711a:	2309      	movs	r3, #9
 800711c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01c      	beq.n	800715e <validate+0x4e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d018      	beq.n	800715e <validate+0x4e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d013      	beq.n	800715e <validate+0x4e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	889a      	ldrh	r2, [r3, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	88db      	ldrh	r3, [r3, #6]
 8007140:	429a      	cmp	r2, r3
 8007142:	d10c      	bne.n	800715e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fa1c 	bl	8005588 <disk_status>
 8007150:	4603      	mov	r3, r0
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <validate+0x4e>
			res = FR_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800715e:	7bfb      	ldrb	r3, [r7, #15]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <validate+0x5a>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	e000      	b.n	800716c <validate+0x5c>
 800716a:	2300      	movs	r3, #0
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	6013      	str	r3, [r2, #0]
	return res;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800718e:	f107 0310 	add.w	r3, r7, #16
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff fc9e 	bl	8006ad4 <get_ldnumber>
 8007198:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	da01      	bge.n	80071a4 <f_mount+0x28>
 80071a0:	230b      	movs	r3, #11
 80071a2:	e02b      	b.n	80071fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80071a4:	4a17      	ldr	r2, [pc, #92]	; (8007204 <f_mount+0x88>)
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80071b4:	69b8      	ldr	r0, [r7, #24]
 80071b6:	f7fe fccd 	bl	8005b54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2200      	movs	r2, #0
 80071be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	490d      	ldr	r1, [pc, #52]	; (8007204 <f_mount+0x88>)
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <f_mount+0x66>
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d001      	beq.n	80071e6 <f_mount+0x6a>
 80071e2:	2300      	movs	r3, #0
 80071e4:	e00a      	b.n	80071fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80071e6:	f107 010c 	add.w	r1, r7, #12
 80071ea:	f107 0308 	add.w	r3, r7, #8
 80071ee:	2200      	movs	r2, #0
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff fd09 	bl	8006c08 <find_volume>
 80071f6:	4603      	mov	r3, r0
 80071f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3720      	adds	r7, #32
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	200010f8 	.word	0x200010f8

08007208 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b098      	sub	sp, #96	; 0x60
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <f_open+0x18>
 800721c:	2309      	movs	r3, #9
 800721e:	e1bb      	b.n	8007598 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007226:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007228:	79fa      	ldrb	r2, [r7, #7]
 800722a:	f107 0110 	add.w	r1, r7, #16
 800722e:	f107 0308 	add.w	r3, r7, #8
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fce8 	bl	8006c08 <find_volume>
 8007238:	4603      	mov	r3, r0
 800723a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800723e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007242:	2b00      	cmp	r3, #0
 8007244:	f040 819f 	bne.w	8007586 <f_open+0x37e>
		dj.obj.fs = fs;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	f107 0314 	add.w	r3, r7, #20
 8007252:	4611      	mov	r1, r2
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fbc7 	bl	80069e8 <follow_path>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007260:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007264:	2b00      	cmp	r3, #0
 8007266:	d11a      	bne.n	800729e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007268:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800726c:	b25b      	sxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	da03      	bge.n	800727a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007272:	2306      	movs	r3, #6
 8007274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007278:	e011      	b.n	800729e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	bf14      	ite	ne
 8007284:	2301      	movne	r3, #1
 8007286:	2300      	moveq	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	f107 0314 	add.w	r3, r7, #20
 8007290:	4611      	mov	r1, r2
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fb16 	bl	80058c4 <chk_lock>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	f003 031c 	and.w	r3, r3, #28
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d07f      	beq.n	80073a8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80072a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d017      	beq.n	80072e0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80072b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d10e      	bne.n	80072d6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80072b8:	f7fe fb60 	bl	800597c <enq_lock>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d006      	beq.n	80072d0 <f_open+0xc8>
 80072c2:	f107 0314 	add.w	r3, r7, #20
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fac8 	bl	800685c <dir_register>
 80072cc:	4603      	mov	r3, r0
 80072ce:	e000      	b.n	80072d2 <f_open+0xca>
 80072d0:	2312      	movs	r3, #18
 80072d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	f043 0308 	orr.w	r3, r3, #8
 80072dc:	71fb      	strb	r3, [r7, #7]
 80072de:	e010      	b.n	8007302 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80072e0:	7ebb      	ldrb	r3, [r7, #26]
 80072e2:	f003 0311 	and.w	r3, r3, #17
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <f_open+0xea>
					res = FR_DENIED;
 80072ea:	2307      	movs	r3, #7
 80072ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072f0:	e007      	b.n	8007302 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <f_open+0xfa>
 80072fc:	2308      	movs	r3, #8
 80072fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007306:	2b00      	cmp	r3, #0
 8007308:	d168      	bne.n	80073dc <f_open+0x1d4>
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d063      	beq.n	80073dc <f_open+0x1d4>
				dw = GET_FATTIME();
 8007314:	f7fd ff94 	bl	8005240 <get_fattime>
 8007318:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	330e      	adds	r3, #14
 800731e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fa25 	bl	8005770 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	3316      	adds	r3, #22
 800732a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe fa1f 	bl	8005770 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007334:	330b      	adds	r3, #11
 8007336:	2220      	movs	r2, #32
 8007338:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff f9f7 	bl	8006734 <ld_clust>
 8007346:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800734c:	2200      	movs	r2, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fa0f 	bl	8006772 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007356:	331c      	adds	r3, #28
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fa08 	bl	8005770 <st_dword>
					fs->wflag = 1;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2201      	movs	r2, #1
 8007364:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d037      	beq.n	80073dc <f_open+0x1d4>
						dw = fs->winsect;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007370:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007372:	f107 0314 	add.w	r3, r7, #20
 8007376:	2200      	movs	r2, #0
 8007378:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe feff 	bl	800617e <remove_chain>
 8007380:	4603      	mov	r3, r0
 8007382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800738a:	2b00      	cmp	r3, #0
 800738c:	d126      	bne.n	80073dc <f_open+0x1d4>
							res = move_window(fs, dw);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fc46 	bl	8005c24 <move_window>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073a2:	3a01      	subs	r2, #1
 80073a4:	611a      	str	r2, [r3, #16]
 80073a6:	e019      	b.n	80073dc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80073a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d115      	bne.n	80073dc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80073b0:	7ebb      	ldrb	r3, [r7, #26]
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80073ba:	2304      	movs	r3, #4
 80073bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80073c0:	e00c      	b.n	80073dc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d007      	beq.n	80073dc <f_open+0x1d4>
 80073cc:	7ebb      	ldrb	r3, [r7, #26]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <f_open+0x1d4>
						res = FR_DENIED;
 80073d6:	2307      	movs	r3, #7
 80073d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80073dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d128      	bne.n	8007436 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80073e4:	79fb      	ldrb	r3, [r7, #7]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80073fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	f023 0301 	bic.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	bf14      	ite	ne
 800740e:	2301      	movne	r3, #1
 8007410:	2300      	moveq	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	f107 0314 	add.w	r3, r7, #20
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe facf 	bl	80059c0 <inc_lock>
 8007422:	4602      	mov	r2, r0
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <f_open+0x22e>
 8007430:	2302      	movs	r3, #2
 8007432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800743a:	2b00      	cmp	r3, #0
 800743c:	f040 80a3 	bne.w	8007586 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff f974 	bl	8006734 <ld_clust>
 800744c:	4602      	mov	r2, r0
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007454:	331c      	adds	r3, #28
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe f94c 	bl	80056f4 <ld_dword>
 800745c:	4602      	mov	r2, r0
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	88da      	ldrh	r2, [r3, #6]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	79fa      	ldrb	r2, [r7, #7]
 800747a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3330      	adds	r3, #48	; 0x30
 8007492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe f9b6 	bl	800580a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d06e      	beq.n	8007586 <f_open+0x37e>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d06a      	beq.n	8007586 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	895b      	ldrh	r3, [r3, #10]
 80074bc:	461a      	mov	r2, r3
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	899b      	ldrh	r3, [r3, #12]
 80074c2:	fb03 f302 	mul.w	r3, r3, r2
 80074c6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	657b      	str	r3, [r7, #84]	; 0x54
 80074d4:	e016      	b.n	8007504 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fc5f 	bl	8005d9e <get_fat>
 80074e0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80074e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d802      	bhi.n	80074ee <f_open+0x2e6>
 80074e8:	2302      	movs	r3, #2
 80074ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80074ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d102      	bne.n	80074fc <f_open+0x2f4>
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80074fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	657b      	str	r3, [r7, #84]	; 0x54
 8007504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007508:	2b00      	cmp	r3, #0
 800750a:	d103      	bne.n	8007514 <f_open+0x30c>
 800750c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800750e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007510:	429a      	cmp	r2, r3
 8007512:	d8e0      	bhi.n	80074d6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007518:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800751a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800751e:	2b00      	cmp	r3, #0
 8007520:	d131      	bne.n	8007586 <f_open+0x37e>
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	899b      	ldrh	r3, [r3, #12]
 8007526:	461a      	mov	r2, r3
 8007528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800752a:	fbb3 f1f2 	udiv	r1, r3, r2
 800752e:	fb02 f201 	mul.w	r2, r2, r1
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d026      	beq.n	8007586 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe fc0f 	bl	8005d60 <clust2sect>
 8007542:	6478      	str	r0, [r7, #68]	; 0x44
 8007544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <f_open+0x34a>
						res = FR_INT_ERR;
 800754a:	2302      	movs	r3, #2
 800754c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007550:	e019      	b.n	8007586 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	899b      	ldrh	r3, [r3, #12]
 8007556:	461a      	mov	r2, r3
 8007558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800755a:	fbb3 f2f2 	udiv	r2, r3, r2
 800755e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007560:	441a      	add	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	7858      	ldrb	r0, [r3, #1]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a1a      	ldr	r2, [r3, #32]
 8007574:	2301      	movs	r3, #1
 8007576:	f7fe f847 	bl	8005608 <disk_read>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <f_open+0x37e>
 8007580:	2301      	movs	r3, #1
 8007582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <f_open+0x38c>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007598:	4618      	mov	r0, r3
 800759a:	3760      	adds	r7, #96	; 0x60
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	; 0x30
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f107 0210 	add.w	r2, r7, #16
 80075be:	4611      	mov	r1, r2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fda5 	bl	8007110 <validate>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80075cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d107      	bne.n	80075e4 <f_write+0x44>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	7d5b      	ldrb	r3, [r3, #21]
 80075d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80075dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <f_write+0x4a>
 80075e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075e8:	e16a      	b.n	80078c0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	7d1b      	ldrb	r3, [r3, #20]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <f_write+0x5a>
 80075f6:	2307      	movs	r3, #7
 80075f8:	e162      	b.n	80078c0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	699a      	ldr	r2, [r3, #24]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	429a      	cmp	r2, r3
 8007608:	f080 814c 	bcs.w	80078a4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	43db      	mvns	r3, r3
 8007612:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007614:	e146      	b.n	80078a4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	8992      	ldrh	r2, [r2, #12]
 800761e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007622:	fb02 f201 	mul.w	r2, r2, r1
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	2b00      	cmp	r3, #0
 800762a:	f040 80f1 	bne.w	8007810 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	8992      	ldrh	r2, [r2, #12]
 8007636:	fbb3 f3f2 	udiv	r3, r3, r2
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	8952      	ldrh	r2, [r2, #10]
 800763e:	3a01      	subs	r2, #1
 8007640:	4013      	ands	r3, r2
 8007642:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d143      	bne.n	80076d2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10c      	bne.n	800766c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d11a      	bne.n	8007694 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fdf0 	bl	8006248 <create_chain>
 8007668:	62b8      	str	r0, [r7, #40]	; 0x28
 800766a:	e013      	b.n	8007694 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	4619      	mov	r1, r3
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7fe fe7c 	bl	8006378 <clmt_clust>
 8007680:	62b8      	str	r0, [r7, #40]	; 0x28
 8007682:	e007      	b.n	8007694 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7fe fddb 	bl	8006248 <create_chain>
 8007692:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 8109 	beq.w	80078ae <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d104      	bne.n	80076ac <f_write+0x10c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2202      	movs	r2, #2
 80076a6:	755a      	strb	r2, [r3, #21]
 80076a8:	2302      	movs	r3, #2
 80076aa:	e109      	b.n	80078c0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b2:	d104      	bne.n	80076be <f_write+0x11e>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	755a      	strb	r2, [r3, #21]
 80076ba:	2301      	movs	r3, #1
 80076bc:	e100      	b.n	80078c0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076c2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <f_write+0x132>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	7d1b      	ldrb	r3, [r3, #20]
 80076d6:	b25b      	sxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	da18      	bge.n	800770e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	7858      	ldrb	r0, [r3, #1]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a1a      	ldr	r2, [r3, #32]
 80076ea:	2301      	movs	r3, #1
 80076ec:	f7fd ffac 	bl	8005648 <disk_write>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <f_write+0x160>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	755a      	strb	r2, [r3, #21]
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0df      	b.n	80078c0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	7d1b      	ldrb	r3, [r3, #20]
 8007704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	f7fe fb22 	bl	8005d60 <clust2sect>
 800771c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d104      	bne.n	800772e <f_write+0x18e>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2202      	movs	r2, #2
 8007728:	755a      	strb	r2, [r3, #21]
 800772a:	2302      	movs	r3, #2
 800772c:	e0c8      	b.n	80078c0 <f_write+0x320>
			sect += csect;
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	4413      	add	r3, r2
 8007734:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	899b      	ldrh	r3, [r3, #12]
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007742:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d043      	beq.n	80077d2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	4413      	add	r3, r2
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	8952      	ldrh	r2, [r2, #10]
 8007754:	4293      	cmp	r3, r2
 8007756:	d905      	bls.n	8007764 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	895b      	ldrh	r3, [r3, #10]
 800775c:	461a      	mov	r2, r3
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	7858      	ldrb	r0, [r3, #1]
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	69f9      	ldr	r1, [r7, #28]
 800776e:	f7fd ff6b 	bl	8005648 <disk_write>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d004      	beq.n	8007782 <f_write+0x1e2>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	755a      	strb	r2, [r3, #21]
 800777e:	2301      	movs	r3, #1
 8007780:	e09e      	b.n	80078c0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6a1a      	ldr	r2, [r3, #32]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	6a3a      	ldr	r2, [r7, #32]
 800778c:	429a      	cmp	r2, r3
 800778e:	d918      	bls.n	80077c2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a1a      	ldr	r2, [r3, #32]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	8992      	ldrh	r2, [r2, #12]
 80077a2:	fb02 f303 	mul.w	r3, r2, r3
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	18d1      	adds	r1, r2, r3
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	899b      	ldrh	r3, [r3, #12]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f7fe f80a 	bl	80057c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	7d1b      	ldrb	r3, [r3, #20]
 80077b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	899b      	ldrh	r3, [r3, #12]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	fb02 f303 	mul.w	r3, r2, r3
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80077d0:	e04b      	b.n	800786a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d016      	beq.n	800780a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	699a      	ldr	r2, [r3, #24]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d210      	bcs.n	800780a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	7858      	ldrb	r0, [r3, #1]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077f2:	2301      	movs	r3, #1
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	f7fd ff07 	bl	8005608 <disk_read>
 80077fa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	755a      	strb	r2, [r3, #21]
 8007806:	2301      	movs	r3, #1
 8007808:	e05a      	b.n	80078c0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	899b      	ldrh	r3, [r3, #12]
 8007814:	4618      	mov	r0, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	8992      	ldrh	r2, [r2, #12]
 800781e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007822:	fb02 f201 	mul.w	r2, r2, r1
 8007826:	1a9b      	subs	r3, r3, r2
 8007828:	1ac3      	subs	r3, r0, r3
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800782c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	429a      	cmp	r2, r3
 8007832:	d901      	bls.n	8007838 <f_write+0x298>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	8992      	ldrh	r2, [r2, #12]
 8007846:	fbb3 f0f2 	udiv	r0, r3, r2
 800784a:	fb02 f200 	mul.w	r2, r2, r0
 800784e:	1a9b      	subs	r3, r3, r2
 8007850:	440b      	add	r3, r1
 8007852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007854:	69f9      	ldr	r1, [r7, #28]
 8007856:	4618      	mov	r0, r3
 8007858:	f7fd ffb6 	bl	80057c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	7d1b      	ldrb	r3, [r3, #20]
 8007860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007864:	b2da      	uxtb	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800786a:	69fa      	ldr	r2, [r7, #28]
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	4413      	add	r3, r2
 8007870:	61fb      	str	r3, [r7, #28]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	441a      	add	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	619a      	str	r2, [r3, #24]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	429a      	cmp	r2, r3
 8007888:	bf38      	it	cc
 800788a:	461a      	movcc	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	60da      	str	r2, [r3, #12]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	441a      	add	r2, r3
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f47f aeb5 	bne.w	8007616 <f_write+0x76>
 80078ac:	e000      	b.n	80078b0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80078ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	7d1b      	ldrb	r3, [r3, #20]
 80078b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3730      	adds	r7, #48	; 0x30
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f107 0208 	add.w	r2, r7, #8
 80078d6:	4611      	mov	r1, r2
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff fc19 	bl	8007110 <validate>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d168      	bne.n	80079ba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7d1b      	ldrb	r3, [r3, #20]
 80078ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d062      	beq.n	80079ba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7d1b      	ldrb	r3, [r3, #20]
 80078f8:	b25b      	sxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da15      	bge.n	800792a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	7858      	ldrb	r0, [r3, #1]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a1a      	ldr	r2, [r3, #32]
 800790c:	2301      	movs	r3, #1
 800790e:	f7fd fe9b 	bl	8005648 <disk_write>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <f_sync+0x54>
 8007918:	2301      	movs	r3, #1
 800791a:	e04f      	b.n	80079bc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	7d1b      	ldrb	r3, [r3, #20]
 8007920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007924:	b2da      	uxtb	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800792a:	f7fd fc89 	bl	8005240 <get_fattime>
 800792e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	4619      	mov	r1, r3
 8007938:	4610      	mov	r0, r2
 800793a:	f7fe f973 	bl	8005c24 <move_window>
 800793e:	4603      	mov	r3, r0
 8007940:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d138      	bne.n	80079ba <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	330b      	adds	r3, #11
 8007952:	781a      	ldrb	r2, [r3, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	330b      	adds	r3, #11
 8007958:	f042 0220 	orr.w	r2, r2, #32
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	461a      	mov	r2, r3
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	f7fe ff01 	bl	8006772 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f103 021c 	add.w	r2, r3, #28
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f7fd fef7 	bl	8005770 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3316      	adds	r3, #22
 8007986:	6939      	ldr	r1, [r7, #16]
 8007988:	4618      	mov	r0, r3
 800798a:	f7fd fef1 	bl	8005770 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3312      	adds	r3, #18
 8007992:	2100      	movs	r1, #0
 8007994:	4618      	mov	r0, r3
 8007996:	f7fd fed0 	bl	800573a <st_word>
					fs->wflag = 1;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2201      	movs	r2, #1
 800799e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe f96c 	bl	8005c80 <sync_fs>
 80079a8:	4603      	mov	r3, r0
 80079aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	7d1b      	ldrb	r3, [r3, #20]
 80079b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ff7b 	bl	80078c8 <f_sync>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d118      	bne.n	8007a0e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f107 0208 	add.w	r2, r7, #8
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff fb93 	bl	8007110 <validate>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10c      	bne.n	8007a0e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe f86f 	bl	8005adc <dec_lock>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	4613      	mov	r3, r2
 8007a24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007a26:	2301      	movs	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007a2e:	4b1f      	ldr	r3, [pc, #124]	; (8007aac <FATFS_LinkDriverEx+0x94>)
 8007a30:	7a5b      	ldrb	r3, [r3, #9]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d131      	bne.n	8007a9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007a38:	4b1c      	ldr	r3, [pc, #112]	; (8007aac <FATFS_LinkDriverEx+0x94>)
 8007a3a:	7a5b      	ldrb	r3, [r3, #9]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <FATFS_LinkDriverEx+0x94>)
 8007a42:	2100      	movs	r1, #0
 8007a44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007a46:	4b19      	ldr	r3, [pc, #100]	; (8007aac <FATFS_LinkDriverEx+0x94>)
 8007a48:	7a5b      	ldrb	r3, [r3, #9]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	4a17      	ldr	r2, [pc, #92]	; (8007aac <FATFS_LinkDriverEx+0x94>)
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007a56:	4b15      	ldr	r3, [pc, #84]	; (8007aac <FATFS_LinkDriverEx+0x94>)
 8007a58:	7a5b      	ldrb	r3, [r3, #9]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4b13      	ldr	r3, [pc, #76]	; (8007aac <FATFS_LinkDriverEx+0x94>)
 8007a60:	4413      	add	r3, r2
 8007a62:	79fa      	ldrb	r2, [r7, #7]
 8007a64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007a66:	4b11      	ldr	r3, [pc, #68]	; (8007aac <FATFS_LinkDriverEx+0x94>)
 8007a68:	7a5b      	ldrb	r3, [r3, #9]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	b2d1      	uxtb	r1, r2
 8007a70:	4a0e      	ldr	r2, [pc, #56]	; (8007aac <FATFS_LinkDriverEx+0x94>)
 8007a72:	7251      	strb	r1, [r2, #9]
 8007a74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007a76:	7dbb      	ldrb	r3, [r7, #22]
 8007a78:	3330      	adds	r3, #48	; 0x30
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	3301      	adds	r3, #1
 8007a84:	223a      	movs	r2, #58	; 0x3a
 8007a86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	3302      	adds	r3, #2
 8007a8c:	222f      	movs	r2, #47	; 0x2f
 8007a8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	3303      	adds	r3, #3
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20001120 	.word	0x20001120

08007ab0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007aba:	2200      	movs	r2, #0
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff ffaa 	bl	8007a18 <FATFS_LinkDriverEx>
 8007ac4:	4603      	mov	r3, r0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <__errno>:
 8007ad0:	4b01      	ldr	r3, [pc, #4]	; (8007ad8 <__errno+0x8>)
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	2000000c 	.word	0x2000000c

08007adc <__libc_init_array>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	4d0d      	ldr	r5, [pc, #52]	; (8007b14 <__libc_init_array+0x38>)
 8007ae0:	4c0d      	ldr	r4, [pc, #52]	; (8007b18 <__libc_init_array+0x3c>)
 8007ae2:	1b64      	subs	r4, r4, r5
 8007ae4:	10a4      	asrs	r4, r4, #2
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	42a6      	cmp	r6, r4
 8007aea:	d109      	bne.n	8007b00 <__libc_init_array+0x24>
 8007aec:	4d0b      	ldr	r5, [pc, #44]	; (8007b1c <__libc_init_array+0x40>)
 8007aee:	4c0c      	ldr	r4, [pc, #48]	; (8007b20 <__libc_init_array+0x44>)
 8007af0:	f000 ffec 	bl	8008acc <_init>
 8007af4:	1b64      	subs	r4, r4, r5
 8007af6:	10a4      	asrs	r4, r4, #2
 8007af8:	2600      	movs	r6, #0
 8007afa:	42a6      	cmp	r6, r4
 8007afc:	d105      	bne.n	8007b0a <__libc_init_array+0x2e>
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b04:	4798      	blx	r3
 8007b06:	3601      	adds	r6, #1
 8007b08:	e7ee      	b.n	8007ae8 <__libc_init_array+0xc>
 8007b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0e:	4798      	blx	r3
 8007b10:	3601      	adds	r6, #1
 8007b12:	e7f2      	b.n	8007afa <__libc_init_array+0x1e>
 8007b14:	08008d8c 	.word	0x08008d8c
 8007b18:	08008d8c 	.word	0x08008d8c
 8007b1c:	08008d8c 	.word	0x08008d8c
 8007b20:	08008d90 	.word	0x08008d90

08007b24 <memset>:
 8007b24:	4402      	add	r2, r0
 8007b26:	4603      	mov	r3, r0
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d100      	bne.n	8007b2e <memset+0xa>
 8007b2c:	4770      	bx	lr
 8007b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b32:	e7f9      	b.n	8007b28 <memset+0x4>

08007b34 <iprintf>:
 8007b34:	b40f      	push	{r0, r1, r2, r3}
 8007b36:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <iprintf+0x2c>)
 8007b38:	b513      	push	{r0, r1, r4, lr}
 8007b3a:	681c      	ldr	r4, [r3, #0]
 8007b3c:	b124      	cbz	r4, 8007b48 <iprintf+0x14>
 8007b3e:	69a3      	ldr	r3, [r4, #24]
 8007b40:	b913      	cbnz	r3, 8007b48 <iprintf+0x14>
 8007b42:	4620      	mov	r0, r4
 8007b44:	f000 fa5e 	bl	8008004 <__sinit>
 8007b48:	ab05      	add	r3, sp, #20
 8007b4a:	9a04      	ldr	r2, [sp, #16]
 8007b4c:	68a1      	ldr	r1, [r4, #8]
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	4620      	mov	r0, r4
 8007b52:	f000 fc2f 	bl	80083b4 <_vfiprintf_r>
 8007b56:	b002      	add	sp, #8
 8007b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b5c:	b004      	add	sp, #16
 8007b5e:	4770      	bx	lr
 8007b60:	2000000c 	.word	0x2000000c

08007b64 <_puts_r>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	460e      	mov	r6, r1
 8007b68:	4605      	mov	r5, r0
 8007b6a:	b118      	cbz	r0, 8007b74 <_puts_r+0x10>
 8007b6c:	6983      	ldr	r3, [r0, #24]
 8007b6e:	b90b      	cbnz	r3, 8007b74 <_puts_r+0x10>
 8007b70:	f000 fa48 	bl	8008004 <__sinit>
 8007b74:	69ab      	ldr	r3, [r5, #24]
 8007b76:	68ac      	ldr	r4, [r5, #8]
 8007b78:	b913      	cbnz	r3, 8007b80 <_puts_r+0x1c>
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f000 fa42 	bl	8008004 <__sinit>
 8007b80:	4b2c      	ldr	r3, [pc, #176]	; (8007c34 <_puts_r+0xd0>)
 8007b82:	429c      	cmp	r4, r3
 8007b84:	d120      	bne.n	8007bc8 <_puts_r+0x64>
 8007b86:	686c      	ldr	r4, [r5, #4]
 8007b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b8a:	07db      	lsls	r3, r3, #31
 8007b8c:	d405      	bmi.n	8007b9a <_puts_r+0x36>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	0598      	lsls	r0, r3, #22
 8007b92:	d402      	bmi.n	8007b9a <_puts_r+0x36>
 8007b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b96:	f000 fad3 	bl	8008140 <__retarget_lock_acquire_recursive>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	0719      	lsls	r1, r3, #28
 8007b9e:	d51d      	bpl.n	8007bdc <_puts_r+0x78>
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	b1db      	cbz	r3, 8007bdc <_puts_r+0x78>
 8007ba4:	3e01      	subs	r6, #1
 8007ba6:	68a3      	ldr	r3, [r4, #8]
 8007ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bac:	3b01      	subs	r3, #1
 8007bae:	60a3      	str	r3, [r4, #8]
 8007bb0:	bb39      	cbnz	r1, 8007c02 <_puts_r+0x9e>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	da38      	bge.n	8007c28 <_puts_r+0xc4>
 8007bb6:	4622      	mov	r2, r4
 8007bb8:	210a      	movs	r1, #10
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f000 f848 	bl	8007c50 <__swbuf_r>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d011      	beq.n	8007be8 <_puts_r+0x84>
 8007bc4:	250a      	movs	r5, #10
 8007bc6:	e011      	b.n	8007bec <_puts_r+0x88>
 8007bc8:	4b1b      	ldr	r3, [pc, #108]	; (8007c38 <_puts_r+0xd4>)
 8007bca:	429c      	cmp	r4, r3
 8007bcc:	d101      	bne.n	8007bd2 <_puts_r+0x6e>
 8007bce:	68ac      	ldr	r4, [r5, #8]
 8007bd0:	e7da      	b.n	8007b88 <_puts_r+0x24>
 8007bd2:	4b1a      	ldr	r3, [pc, #104]	; (8007c3c <_puts_r+0xd8>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	bf08      	it	eq
 8007bd8:	68ec      	ldreq	r4, [r5, #12]
 8007bda:	e7d5      	b.n	8007b88 <_puts_r+0x24>
 8007bdc:	4621      	mov	r1, r4
 8007bde:	4628      	mov	r0, r5
 8007be0:	f000 f888 	bl	8007cf4 <__swsetup_r>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d0dd      	beq.n	8007ba4 <_puts_r+0x40>
 8007be8:	f04f 35ff 	mov.w	r5, #4294967295
 8007bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bee:	07da      	lsls	r2, r3, #31
 8007bf0:	d405      	bmi.n	8007bfe <_puts_r+0x9a>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	059b      	lsls	r3, r3, #22
 8007bf6:	d402      	bmi.n	8007bfe <_puts_r+0x9a>
 8007bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bfa:	f000 faa2 	bl	8008142 <__retarget_lock_release_recursive>
 8007bfe:	4628      	mov	r0, r5
 8007c00:	bd70      	pop	{r4, r5, r6, pc}
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	da04      	bge.n	8007c10 <_puts_r+0xac>
 8007c06:	69a2      	ldr	r2, [r4, #24]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	dc06      	bgt.n	8007c1a <_puts_r+0xb6>
 8007c0c:	290a      	cmp	r1, #10
 8007c0e:	d004      	beq.n	8007c1a <_puts_r+0xb6>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	6022      	str	r2, [r4, #0]
 8007c16:	7019      	strb	r1, [r3, #0]
 8007c18:	e7c5      	b.n	8007ba6 <_puts_r+0x42>
 8007c1a:	4622      	mov	r2, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 f817 	bl	8007c50 <__swbuf_r>
 8007c22:	3001      	adds	r0, #1
 8007c24:	d1bf      	bne.n	8007ba6 <_puts_r+0x42>
 8007c26:	e7df      	b.n	8007be8 <_puts_r+0x84>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	250a      	movs	r5, #10
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	6022      	str	r2, [r4, #0]
 8007c30:	701d      	strb	r5, [r3, #0]
 8007c32:	e7db      	b.n	8007bec <_puts_r+0x88>
 8007c34:	08008d10 	.word	0x08008d10
 8007c38:	08008d30 	.word	0x08008d30
 8007c3c:	08008cf0 	.word	0x08008cf0

08007c40 <puts>:
 8007c40:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <puts+0xc>)
 8007c42:	4601      	mov	r1, r0
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	f7ff bf8d 	b.w	8007b64 <_puts_r>
 8007c4a:	bf00      	nop
 8007c4c:	2000000c 	.word	0x2000000c

08007c50 <__swbuf_r>:
 8007c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c52:	460e      	mov	r6, r1
 8007c54:	4614      	mov	r4, r2
 8007c56:	4605      	mov	r5, r0
 8007c58:	b118      	cbz	r0, 8007c62 <__swbuf_r+0x12>
 8007c5a:	6983      	ldr	r3, [r0, #24]
 8007c5c:	b90b      	cbnz	r3, 8007c62 <__swbuf_r+0x12>
 8007c5e:	f000 f9d1 	bl	8008004 <__sinit>
 8007c62:	4b21      	ldr	r3, [pc, #132]	; (8007ce8 <__swbuf_r+0x98>)
 8007c64:	429c      	cmp	r4, r3
 8007c66:	d12b      	bne.n	8007cc0 <__swbuf_r+0x70>
 8007c68:	686c      	ldr	r4, [r5, #4]
 8007c6a:	69a3      	ldr	r3, [r4, #24]
 8007c6c:	60a3      	str	r3, [r4, #8]
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	071a      	lsls	r2, r3, #28
 8007c72:	d52f      	bpl.n	8007cd4 <__swbuf_r+0x84>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	b36b      	cbz	r3, 8007cd4 <__swbuf_r+0x84>
 8007c78:	6923      	ldr	r3, [r4, #16]
 8007c7a:	6820      	ldr	r0, [r4, #0]
 8007c7c:	1ac0      	subs	r0, r0, r3
 8007c7e:	6963      	ldr	r3, [r4, #20]
 8007c80:	b2f6      	uxtb	r6, r6
 8007c82:	4283      	cmp	r3, r0
 8007c84:	4637      	mov	r7, r6
 8007c86:	dc04      	bgt.n	8007c92 <__swbuf_r+0x42>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 f926 	bl	8007edc <_fflush_r>
 8007c90:	bb30      	cbnz	r0, 8007ce0 <__swbuf_r+0x90>
 8007c92:	68a3      	ldr	r3, [r4, #8]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	60a3      	str	r3, [r4, #8]
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	6022      	str	r2, [r4, #0]
 8007c9e:	701e      	strb	r6, [r3, #0]
 8007ca0:	6963      	ldr	r3, [r4, #20]
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	4283      	cmp	r3, r0
 8007ca6:	d004      	beq.n	8007cb2 <__swbuf_r+0x62>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	07db      	lsls	r3, r3, #31
 8007cac:	d506      	bpl.n	8007cbc <__swbuf_r+0x6c>
 8007cae:	2e0a      	cmp	r6, #10
 8007cb0:	d104      	bne.n	8007cbc <__swbuf_r+0x6c>
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	f000 f911 	bl	8007edc <_fflush_r>
 8007cba:	b988      	cbnz	r0, 8007ce0 <__swbuf_r+0x90>
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc0:	4b0a      	ldr	r3, [pc, #40]	; (8007cec <__swbuf_r+0x9c>)
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d101      	bne.n	8007cca <__swbuf_r+0x7a>
 8007cc6:	68ac      	ldr	r4, [r5, #8]
 8007cc8:	e7cf      	b.n	8007c6a <__swbuf_r+0x1a>
 8007cca:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <__swbuf_r+0xa0>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	bf08      	it	eq
 8007cd0:	68ec      	ldreq	r4, [r5, #12]
 8007cd2:	e7ca      	b.n	8007c6a <__swbuf_r+0x1a>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 f80c 	bl	8007cf4 <__swsetup_r>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d0cb      	beq.n	8007c78 <__swbuf_r+0x28>
 8007ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ce4:	e7ea      	b.n	8007cbc <__swbuf_r+0x6c>
 8007ce6:	bf00      	nop
 8007ce8:	08008d10 	.word	0x08008d10
 8007cec:	08008d30 	.word	0x08008d30
 8007cf0:	08008cf0 	.word	0x08008cf0

08007cf4 <__swsetup_r>:
 8007cf4:	4b32      	ldr	r3, [pc, #200]	; (8007dc0 <__swsetup_r+0xcc>)
 8007cf6:	b570      	push	{r4, r5, r6, lr}
 8007cf8:	681d      	ldr	r5, [r3, #0]
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	b125      	cbz	r5, 8007d0a <__swsetup_r+0x16>
 8007d00:	69ab      	ldr	r3, [r5, #24]
 8007d02:	b913      	cbnz	r3, 8007d0a <__swsetup_r+0x16>
 8007d04:	4628      	mov	r0, r5
 8007d06:	f000 f97d 	bl	8008004 <__sinit>
 8007d0a:	4b2e      	ldr	r3, [pc, #184]	; (8007dc4 <__swsetup_r+0xd0>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	d10f      	bne.n	8007d30 <__swsetup_r+0x3c>
 8007d10:	686c      	ldr	r4, [r5, #4]
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d18:	0719      	lsls	r1, r3, #28
 8007d1a:	d42c      	bmi.n	8007d76 <__swsetup_r+0x82>
 8007d1c:	06dd      	lsls	r5, r3, #27
 8007d1e:	d411      	bmi.n	8007d44 <__swsetup_r+0x50>
 8007d20:	2309      	movs	r3, #9
 8007d22:	6033      	str	r3, [r6, #0]
 8007d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d28:	81a3      	strh	r3, [r4, #12]
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	e03e      	b.n	8007dae <__swsetup_r+0xba>
 8007d30:	4b25      	ldr	r3, [pc, #148]	; (8007dc8 <__swsetup_r+0xd4>)
 8007d32:	429c      	cmp	r4, r3
 8007d34:	d101      	bne.n	8007d3a <__swsetup_r+0x46>
 8007d36:	68ac      	ldr	r4, [r5, #8]
 8007d38:	e7eb      	b.n	8007d12 <__swsetup_r+0x1e>
 8007d3a:	4b24      	ldr	r3, [pc, #144]	; (8007dcc <__swsetup_r+0xd8>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	bf08      	it	eq
 8007d40:	68ec      	ldreq	r4, [r5, #12]
 8007d42:	e7e6      	b.n	8007d12 <__swsetup_r+0x1e>
 8007d44:	0758      	lsls	r0, r3, #29
 8007d46:	d512      	bpl.n	8007d6e <__swsetup_r+0x7a>
 8007d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d4a:	b141      	cbz	r1, 8007d5e <__swsetup_r+0x6a>
 8007d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d50:	4299      	cmp	r1, r3
 8007d52:	d002      	beq.n	8007d5a <__swsetup_r+0x66>
 8007d54:	4630      	mov	r0, r6
 8007d56:	f000 fa59 	bl	800820c <_free_r>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	2300      	movs	r3, #0
 8007d68:	6063      	str	r3, [r4, #4]
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	f043 0308 	orr.w	r3, r3, #8
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	b94b      	cbnz	r3, 8007d8e <__swsetup_r+0x9a>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d84:	d003      	beq.n	8007d8e <__swsetup_r+0x9a>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f000 f9ff 	bl	800818c <__smakebuf_r>
 8007d8e:	89a0      	ldrh	r0, [r4, #12]
 8007d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d94:	f010 0301 	ands.w	r3, r0, #1
 8007d98:	d00a      	beq.n	8007db0 <__swsetup_r+0xbc>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	6963      	ldr	r3, [r4, #20]
 8007da0:	425b      	negs	r3, r3
 8007da2:	61a3      	str	r3, [r4, #24]
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	b943      	cbnz	r3, 8007dba <__swsetup_r+0xc6>
 8007da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007dac:	d1ba      	bne.n	8007d24 <__swsetup_r+0x30>
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	0781      	lsls	r1, r0, #30
 8007db2:	bf58      	it	pl
 8007db4:	6963      	ldrpl	r3, [r4, #20]
 8007db6:	60a3      	str	r3, [r4, #8]
 8007db8:	e7f4      	b.n	8007da4 <__swsetup_r+0xb0>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e7f7      	b.n	8007dae <__swsetup_r+0xba>
 8007dbe:	bf00      	nop
 8007dc0:	2000000c 	.word	0x2000000c
 8007dc4:	08008d10 	.word	0x08008d10
 8007dc8:	08008d30 	.word	0x08008d30
 8007dcc:	08008cf0 	.word	0x08008cf0

08007dd0 <__sflush_r>:
 8007dd0:	898a      	ldrh	r2, [r1, #12]
 8007dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	0710      	lsls	r0, r2, #28
 8007dda:	460c      	mov	r4, r1
 8007ddc:	d458      	bmi.n	8007e90 <__sflush_r+0xc0>
 8007dde:	684b      	ldr	r3, [r1, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dc05      	bgt.n	8007df0 <__sflush_r+0x20>
 8007de4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dc02      	bgt.n	8007df0 <__sflush_r+0x20>
 8007dea:	2000      	movs	r0, #0
 8007dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007df2:	2e00      	cmp	r6, #0
 8007df4:	d0f9      	beq.n	8007dea <__sflush_r+0x1a>
 8007df6:	2300      	movs	r3, #0
 8007df8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dfc:	682f      	ldr	r7, [r5, #0]
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	d032      	beq.n	8007e68 <__sflush_r+0x98>
 8007e02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	075a      	lsls	r2, r3, #29
 8007e08:	d505      	bpl.n	8007e16 <__sflush_r+0x46>
 8007e0a:	6863      	ldr	r3, [r4, #4]
 8007e0c:	1ac0      	subs	r0, r0, r3
 8007e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e10:	b10b      	cbz	r3, 8007e16 <__sflush_r+0x46>
 8007e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e14:	1ac0      	subs	r0, r0, r3
 8007e16:	2300      	movs	r3, #0
 8007e18:	4602      	mov	r2, r0
 8007e1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e1c:	6a21      	ldr	r1, [r4, #32]
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47b0      	blx	r6
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	d106      	bne.n	8007e36 <__sflush_r+0x66>
 8007e28:	6829      	ldr	r1, [r5, #0]
 8007e2a:	291d      	cmp	r1, #29
 8007e2c:	d82c      	bhi.n	8007e88 <__sflush_r+0xb8>
 8007e2e:	4a2a      	ldr	r2, [pc, #168]	; (8007ed8 <__sflush_r+0x108>)
 8007e30:	40ca      	lsrs	r2, r1
 8007e32:	07d6      	lsls	r6, r2, #31
 8007e34:	d528      	bpl.n	8007e88 <__sflush_r+0xb8>
 8007e36:	2200      	movs	r2, #0
 8007e38:	6062      	str	r2, [r4, #4]
 8007e3a:	04d9      	lsls	r1, r3, #19
 8007e3c:	6922      	ldr	r2, [r4, #16]
 8007e3e:	6022      	str	r2, [r4, #0]
 8007e40:	d504      	bpl.n	8007e4c <__sflush_r+0x7c>
 8007e42:	1c42      	adds	r2, r0, #1
 8007e44:	d101      	bne.n	8007e4a <__sflush_r+0x7a>
 8007e46:	682b      	ldr	r3, [r5, #0]
 8007e48:	b903      	cbnz	r3, 8007e4c <__sflush_r+0x7c>
 8007e4a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e4e:	602f      	str	r7, [r5, #0]
 8007e50:	2900      	cmp	r1, #0
 8007e52:	d0ca      	beq.n	8007dea <__sflush_r+0x1a>
 8007e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e58:	4299      	cmp	r1, r3
 8007e5a:	d002      	beq.n	8007e62 <__sflush_r+0x92>
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f000 f9d5 	bl	800820c <_free_r>
 8007e62:	2000      	movs	r0, #0
 8007e64:	6360      	str	r0, [r4, #52]	; 0x34
 8007e66:	e7c1      	b.n	8007dec <__sflush_r+0x1c>
 8007e68:	6a21      	ldr	r1, [r4, #32]
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	47b0      	blx	r6
 8007e70:	1c41      	adds	r1, r0, #1
 8007e72:	d1c7      	bne.n	8007e04 <__sflush_r+0x34>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0c4      	beq.n	8007e04 <__sflush_r+0x34>
 8007e7a:	2b1d      	cmp	r3, #29
 8007e7c:	d001      	beq.n	8007e82 <__sflush_r+0xb2>
 8007e7e:	2b16      	cmp	r3, #22
 8007e80:	d101      	bne.n	8007e86 <__sflush_r+0xb6>
 8007e82:	602f      	str	r7, [r5, #0]
 8007e84:	e7b1      	b.n	8007dea <__sflush_r+0x1a>
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8c:	81a3      	strh	r3, [r4, #12]
 8007e8e:	e7ad      	b.n	8007dec <__sflush_r+0x1c>
 8007e90:	690f      	ldr	r7, [r1, #16]
 8007e92:	2f00      	cmp	r7, #0
 8007e94:	d0a9      	beq.n	8007dea <__sflush_r+0x1a>
 8007e96:	0793      	lsls	r3, r2, #30
 8007e98:	680e      	ldr	r6, [r1, #0]
 8007e9a:	bf08      	it	eq
 8007e9c:	694b      	ldreq	r3, [r1, #20]
 8007e9e:	600f      	str	r7, [r1, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	eba6 0807 	sub.w	r8, r6, r7
 8007ea8:	608b      	str	r3, [r1, #8]
 8007eaa:	f1b8 0f00 	cmp.w	r8, #0
 8007eae:	dd9c      	ble.n	8007dea <__sflush_r+0x1a>
 8007eb0:	6a21      	ldr	r1, [r4, #32]
 8007eb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007eb4:	4643      	mov	r3, r8
 8007eb6:	463a      	mov	r2, r7
 8007eb8:	4628      	mov	r0, r5
 8007eba:	47b0      	blx	r6
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	dc06      	bgt.n	8007ece <__sflush_r+0xfe>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	e78e      	b.n	8007dec <__sflush_r+0x1c>
 8007ece:	4407      	add	r7, r0
 8007ed0:	eba8 0800 	sub.w	r8, r8, r0
 8007ed4:	e7e9      	b.n	8007eaa <__sflush_r+0xda>
 8007ed6:	bf00      	nop
 8007ed8:	20400001 	.word	0x20400001

08007edc <_fflush_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	690b      	ldr	r3, [r1, #16]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	b913      	cbnz	r3, 8007eec <_fflush_r+0x10>
 8007ee6:	2500      	movs	r5, #0
 8007ee8:	4628      	mov	r0, r5
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	b118      	cbz	r0, 8007ef6 <_fflush_r+0x1a>
 8007eee:	6983      	ldr	r3, [r0, #24]
 8007ef0:	b90b      	cbnz	r3, 8007ef6 <_fflush_r+0x1a>
 8007ef2:	f000 f887 	bl	8008004 <__sinit>
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <_fflush_r+0x6c>)
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	d11b      	bne.n	8007f34 <_fflush_r+0x58>
 8007efc:	686c      	ldr	r4, [r5, #4]
 8007efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0ef      	beq.n	8007ee6 <_fflush_r+0xa>
 8007f06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f08:	07d0      	lsls	r0, r2, #31
 8007f0a:	d404      	bmi.n	8007f16 <_fflush_r+0x3a>
 8007f0c:	0599      	lsls	r1, r3, #22
 8007f0e:	d402      	bmi.n	8007f16 <_fflush_r+0x3a>
 8007f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f12:	f000 f915 	bl	8008140 <__retarget_lock_acquire_recursive>
 8007f16:	4628      	mov	r0, r5
 8007f18:	4621      	mov	r1, r4
 8007f1a:	f7ff ff59 	bl	8007dd0 <__sflush_r>
 8007f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f20:	07da      	lsls	r2, r3, #31
 8007f22:	4605      	mov	r5, r0
 8007f24:	d4e0      	bmi.n	8007ee8 <_fflush_r+0xc>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	059b      	lsls	r3, r3, #22
 8007f2a:	d4dd      	bmi.n	8007ee8 <_fflush_r+0xc>
 8007f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f2e:	f000 f908 	bl	8008142 <__retarget_lock_release_recursive>
 8007f32:	e7d9      	b.n	8007ee8 <_fflush_r+0xc>
 8007f34:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <_fflush_r+0x70>)
 8007f36:	429c      	cmp	r4, r3
 8007f38:	d101      	bne.n	8007f3e <_fflush_r+0x62>
 8007f3a:	68ac      	ldr	r4, [r5, #8]
 8007f3c:	e7df      	b.n	8007efe <_fflush_r+0x22>
 8007f3e:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <_fflush_r+0x74>)
 8007f40:	429c      	cmp	r4, r3
 8007f42:	bf08      	it	eq
 8007f44:	68ec      	ldreq	r4, [r5, #12]
 8007f46:	e7da      	b.n	8007efe <_fflush_r+0x22>
 8007f48:	08008d10 	.word	0x08008d10
 8007f4c:	08008d30 	.word	0x08008d30
 8007f50:	08008cf0 	.word	0x08008cf0

08007f54 <std>:
 8007f54:	2300      	movs	r3, #0
 8007f56:	b510      	push	{r4, lr}
 8007f58:	4604      	mov	r4, r0
 8007f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f62:	6083      	str	r3, [r0, #8]
 8007f64:	8181      	strh	r1, [r0, #12]
 8007f66:	6643      	str	r3, [r0, #100]	; 0x64
 8007f68:	81c2      	strh	r2, [r0, #14]
 8007f6a:	6183      	str	r3, [r0, #24]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	2208      	movs	r2, #8
 8007f70:	305c      	adds	r0, #92	; 0x5c
 8007f72:	f7ff fdd7 	bl	8007b24 <memset>
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <std+0x38>)
 8007f78:	6263      	str	r3, [r4, #36]	; 0x24
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <std+0x3c>)
 8007f7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f7e:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <std+0x40>)
 8007f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f82:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <std+0x44>)
 8007f84:	6224      	str	r4, [r4, #32]
 8007f86:	6323      	str	r3, [r4, #48]	; 0x30
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	bf00      	nop
 8007f8c:	0800895d 	.word	0x0800895d
 8007f90:	0800897f 	.word	0x0800897f
 8007f94:	080089b7 	.word	0x080089b7
 8007f98:	080089db 	.word	0x080089db

08007f9c <_cleanup_r>:
 8007f9c:	4901      	ldr	r1, [pc, #4]	; (8007fa4 <_cleanup_r+0x8>)
 8007f9e:	f000 b8af 	b.w	8008100 <_fwalk_reent>
 8007fa2:	bf00      	nop
 8007fa4:	08007edd 	.word	0x08007edd

08007fa8 <__sfmoreglue>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	1e4a      	subs	r2, r1, #1
 8007fac:	2568      	movs	r5, #104	; 0x68
 8007fae:	4355      	muls	r5, r2
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fb6:	f000 f979 	bl	80082ac <_malloc_r>
 8007fba:	4604      	mov	r4, r0
 8007fbc:	b140      	cbz	r0, 8007fd0 <__sfmoreglue+0x28>
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	e9c0 1600 	strd	r1, r6, [r0]
 8007fc4:	300c      	adds	r0, #12
 8007fc6:	60a0      	str	r0, [r4, #8]
 8007fc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fcc:	f7ff fdaa 	bl	8007b24 <memset>
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}

08007fd4 <__sfp_lock_acquire>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	; (8007fdc <__sfp_lock_acquire+0x8>)
 8007fd6:	f000 b8b3 	b.w	8008140 <__retarget_lock_acquire_recursive>
 8007fda:	bf00      	nop
 8007fdc:	200023a4 	.word	0x200023a4

08007fe0 <__sfp_lock_release>:
 8007fe0:	4801      	ldr	r0, [pc, #4]	; (8007fe8 <__sfp_lock_release+0x8>)
 8007fe2:	f000 b8ae 	b.w	8008142 <__retarget_lock_release_recursive>
 8007fe6:	bf00      	nop
 8007fe8:	200023a4 	.word	0x200023a4

08007fec <__sinit_lock_acquire>:
 8007fec:	4801      	ldr	r0, [pc, #4]	; (8007ff4 <__sinit_lock_acquire+0x8>)
 8007fee:	f000 b8a7 	b.w	8008140 <__retarget_lock_acquire_recursive>
 8007ff2:	bf00      	nop
 8007ff4:	2000239f 	.word	0x2000239f

08007ff8 <__sinit_lock_release>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__sinit_lock_release+0x8>)
 8007ffa:	f000 b8a2 	b.w	8008142 <__retarget_lock_release_recursive>
 8007ffe:	bf00      	nop
 8008000:	2000239f 	.word	0x2000239f

08008004 <__sinit>:
 8008004:	b510      	push	{r4, lr}
 8008006:	4604      	mov	r4, r0
 8008008:	f7ff fff0 	bl	8007fec <__sinit_lock_acquire>
 800800c:	69a3      	ldr	r3, [r4, #24]
 800800e:	b11b      	cbz	r3, 8008018 <__sinit+0x14>
 8008010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008014:	f7ff bff0 	b.w	8007ff8 <__sinit_lock_release>
 8008018:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800801c:	6523      	str	r3, [r4, #80]	; 0x50
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <__sinit+0x68>)
 8008020:	4a13      	ldr	r2, [pc, #76]	; (8008070 <__sinit+0x6c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	62a2      	str	r2, [r4, #40]	; 0x28
 8008026:	42a3      	cmp	r3, r4
 8008028:	bf04      	itt	eq
 800802a:	2301      	moveq	r3, #1
 800802c:	61a3      	streq	r3, [r4, #24]
 800802e:	4620      	mov	r0, r4
 8008030:	f000 f820 	bl	8008074 <__sfp>
 8008034:	6060      	str	r0, [r4, #4]
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f81c 	bl	8008074 <__sfp>
 800803c:	60a0      	str	r0, [r4, #8]
 800803e:	4620      	mov	r0, r4
 8008040:	f000 f818 	bl	8008074 <__sfp>
 8008044:	2200      	movs	r2, #0
 8008046:	60e0      	str	r0, [r4, #12]
 8008048:	2104      	movs	r1, #4
 800804a:	6860      	ldr	r0, [r4, #4]
 800804c:	f7ff ff82 	bl	8007f54 <std>
 8008050:	68a0      	ldr	r0, [r4, #8]
 8008052:	2201      	movs	r2, #1
 8008054:	2109      	movs	r1, #9
 8008056:	f7ff ff7d 	bl	8007f54 <std>
 800805a:	68e0      	ldr	r0, [r4, #12]
 800805c:	2202      	movs	r2, #2
 800805e:	2112      	movs	r1, #18
 8008060:	f7ff ff78 	bl	8007f54 <std>
 8008064:	2301      	movs	r3, #1
 8008066:	61a3      	str	r3, [r4, #24]
 8008068:	e7d2      	b.n	8008010 <__sinit+0xc>
 800806a:	bf00      	nop
 800806c:	08008cec 	.word	0x08008cec
 8008070:	08007f9d 	.word	0x08007f9d

08008074 <__sfp>:
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	4607      	mov	r7, r0
 8008078:	f7ff ffac 	bl	8007fd4 <__sfp_lock_acquire>
 800807c:	4b1e      	ldr	r3, [pc, #120]	; (80080f8 <__sfp+0x84>)
 800807e:	681e      	ldr	r6, [r3, #0]
 8008080:	69b3      	ldr	r3, [r6, #24]
 8008082:	b913      	cbnz	r3, 800808a <__sfp+0x16>
 8008084:	4630      	mov	r0, r6
 8008086:	f7ff ffbd 	bl	8008004 <__sinit>
 800808a:	3648      	adds	r6, #72	; 0x48
 800808c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008090:	3b01      	subs	r3, #1
 8008092:	d503      	bpl.n	800809c <__sfp+0x28>
 8008094:	6833      	ldr	r3, [r6, #0]
 8008096:	b30b      	cbz	r3, 80080dc <__sfp+0x68>
 8008098:	6836      	ldr	r6, [r6, #0]
 800809a:	e7f7      	b.n	800808c <__sfp+0x18>
 800809c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080a0:	b9d5      	cbnz	r5, 80080d8 <__sfp+0x64>
 80080a2:	4b16      	ldr	r3, [pc, #88]	; (80080fc <__sfp+0x88>)
 80080a4:	60e3      	str	r3, [r4, #12]
 80080a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080aa:	6665      	str	r5, [r4, #100]	; 0x64
 80080ac:	f000 f847 	bl	800813e <__retarget_lock_init_recursive>
 80080b0:	f7ff ff96 	bl	8007fe0 <__sfp_lock_release>
 80080b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080bc:	6025      	str	r5, [r4, #0]
 80080be:	61a5      	str	r5, [r4, #24]
 80080c0:	2208      	movs	r2, #8
 80080c2:	4629      	mov	r1, r5
 80080c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080c8:	f7ff fd2c 	bl	8007b24 <memset>
 80080cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080d4:	4620      	mov	r0, r4
 80080d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d8:	3468      	adds	r4, #104	; 0x68
 80080da:	e7d9      	b.n	8008090 <__sfp+0x1c>
 80080dc:	2104      	movs	r1, #4
 80080de:	4638      	mov	r0, r7
 80080e0:	f7ff ff62 	bl	8007fa8 <__sfmoreglue>
 80080e4:	4604      	mov	r4, r0
 80080e6:	6030      	str	r0, [r6, #0]
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1d5      	bne.n	8008098 <__sfp+0x24>
 80080ec:	f7ff ff78 	bl	8007fe0 <__sfp_lock_release>
 80080f0:	230c      	movs	r3, #12
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	e7ee      	b.n	80080d4 <__sfp+0x60>
 80080f6:	bf00      	nop
 80080f8:	08008cec 	.word	0x08008cec
 80080fc:	ffff0001 	.word	0xffff0001

08008100 <_fwalk_reent>:
 8008100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008104:	4606      	mov	r6, r0
 8008106:	4688      	mov	r8, r1
 8008108:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800810c:	2700      	movs	r7, #0
 800810e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008112:	f1b9 0901 	subs.w	r9, r9, #1
 8008116:	d505      	bpl.n	8008124 <_fwalk_reent+0x24>
 8008118:	6824      	ldr	r4, [r4, #0]
 800811a:	2c00      	cmp	r4, #0
 800811c:	d1f7      	bne.n	800810e <_fwalk_reent+0xe>
 800811e:	4638      	mov	r0, r7
 8008120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008124:	89ab      	ldrh	r3, [r5, #12]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d907      	bls.n	800813a <_fwalk_reent+0x3a>
 800812a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800812e:	3301      	adds	r3, #1
 8008130:	d003      	beq.n	800813a <_fwalk_reent+0x3a>
 8008132:	4629      	mov	r1, r5
 8008134:	4630      	mov	r0, r6
 8008136:	47c0      	blx	r8
 8008138:	4307      	orrs	r7, r0
 800813a:	3568      	adds	r5, #104	; 0x68
 800813c:	e7e9      	b.n	8008112 <_fwalk_reent+0x12>

0800813e <__retarget_lock_init_recursive>:
 800813e:	4770      	bx	lr

08008140 <__retarget_lock_acquire_recursive>:
 8008140:	4770      	bx	lr

08008142 <__retarget_lock_release_recursive>:
 8008142:	4770      	bx	lr

08008144 <__swhatbuf_r>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	460e      	mov	r6, r1
 8008148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814c:	2900      	cmp	r1, #0
 800814e:	b096      	sub	sp, #88	; 0x58
 8008150:	4614      	mov	r4, r2
 8008152:	461d      	mov	r5, r3
 8008154:	da07      	bge.n	8008166 <__swhatbuf_r+0x22>
 8008156:	2300      	movs	r3, #0
 8008158:	602b      	str	r3, [r5, #0]
 800815a:	89b3      	ldrh	r3, [r6, #12]
 800815c:	061a      	lsls	r2, r3, #24
 800815e:	d410      	bmi.n	8008182 <__swhatbuf_r+0x3e>
 8008160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008164:	e00e      	b.n	8008184 <__swhatbuf_r+0x40>
 8008166:	466a      	mov	r2, sp
 8008168:	f000 fc5e 	bl	8008a28 <_fstat_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	dbf2      	blt.n	8008156 <__swhatbuf_r+0x12>
 8008170:	9a01      	ldr	r2, [sp, #4]
 8008172:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008176:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800817a:	425a      	negs	r2, r3
 800817c:	415a      	adcs	r2, r3
 800817e:	602a      	str	r2, [r5, #0]
 8008180:	e7ee      	b.n	8008160 <__swhatbuf_r+0x1c>
 8008182:	2340      	movs	r3, #64	; 0x40
 8008184:	2000      	movs	r0, #0
 8008186:	6023      	str	r3, [r4, #0]
 8008188:	b016      	add	sp, #88	; 0x58
 800818a:	bd70      	pop	{r4, r5, r6, pc}

0800818c <__smakebuf_r>:
 800818c:	898b      	ldrh	r3, [r1, #12]
 800818e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008190:	079d      	lsls	r5, r3, #30
 8008192:	4606      	mov	r6, r0
 8008194:	460c      	mov	r4, r1
 8008196:	d507      	bpl.n	80081a8 <__smakebuf_r+0x1c>
 8008198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	6123      	str	r3, [r4, #16]
 80081a0:	2301      	movs	r3, #1
 80081a2:	6163      	str	r3, [r4, #20]
 80081a4:	b002      	add	sp, #8
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	ab01      	add	r3, sp, #4
 80081aa:	466a      	mov	r2, sp
 80081ac:	f7ff ffca 	bl	8008144 <__swhatbuf_r>
 80081b0:	9900      	ldr	r1, [sp, #0]
 80081b2:	4605      	mov	r5, r0
 80081b4:	4630      	mov	r0, r6
 80081b6:	f000 f879 	bl	80082ac <_malloc_r>
 80081ba:	b948      	cbnz	r0, 80081d0 <__smakebuf_r+0x44>
 80081bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c0:	059a      	lsls	r2, r3, #22
 80081c2:	d4ef      	bmi.n	80081a4 <__smakebuf_r+0x18>
 80081c4:	f023 0303 	bic.w	r3, r3, #3
 80081c8:	f043 0302 	orr.w	r3, r3, #2
 80081cc:	81a3      	strh	r3, [r4, #12]
 80081ce:	e7e3      	b.n	8008198 <__smakebuf_r+0xc>
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <__smakebuf_r+0x7c>)
 80081d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	6020      	str	r0, [r4, #0]
 80081d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	9b00      	ldr	r3, [sp, #0]
 80081e0:	6163      	str	r3, [r4, #20]
 80081e2:	9b01      	ldr	r3, [sp, #4]
 80081e4:	6120      	str	r0, [r4, #16]
 80081e6:	b15b      	cbz	r3, 8008200 <__smakebuf_r+0x74>
 80081e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ec:	4630      	mov	r0, r6
 80081ee:	f000 fc2d 	bl	8008a4c <_isatty_r>
 80081f2:	b128      	cbz	r0, 8008200 <__smakebuf_r+0x74>
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	f023 0303 	bic.w	r3, r3, #3
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	89a0      	ldrh	r0, [r4, #12]
 8008202:	4305      	orrs	r5, r0
 8008204:	81a5      	strh	r5, [r4, #12]
 8008206:	e7cd      	b.n	80081a4 <__smakebuf_r+0x18>
 8008208:	08007f9d 	.word	0x08007f9d

0800820c <_free_r>:
 800820c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800820e:	2900      	cmp	r1, #0
 8008210:	d048      	beq.n	80082a4 <_free_r+0x98>
 8008212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008216:	9001      	str	r0, [sp, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f1a1 0404 	sub.w	r4, r1, #4
 800821e:	bfb8      	it	lt
 8008220:	18e4      	addlt	r4, r4, r3
 8008222:	f000 fc35 	bl	8008a90 <__malloc_lock>
 8008226:	4a20      	ldr	r2, [pc, #128]	; (80082a8 <_free_r+0x9c>)
 8008228:	9801      	ldr	r0, [sp, #4]
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	4615      	mov	r5, r2
 800822e:	b933      	cbnz	r3, 800823e <_free_r+0x32>
 8008230:	6063      	str	r3, [r4, #4]
 8008232:	6014      	str	r4, [r2, #0]
 8008234:	b003      	add	sp, #12
 8008236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800823a:	f000 bc2f 	b.w	8008a9c <__malloc_unlock>
 800823e:	42a3      	cmp	r3, r4
 8008240:	d90b      	bls.n	800825a <_free_r+0x4e>
 8008242:	6821      	ldr	r1, [r4, #0]
 8008244:	1862      	adds	r2, r4, r1
 8008246:	4293      	cmp	r3, r2
 8008248:	bf04      	itt	eq
 800824a:	681a      	ldreq	r2, [r3, #0]
 800824c:	685b      	ldreq	r3, [r3, #4]
 800824e:	6063      	str	r3, [r4, #4]
 8008250:	bf04      	itt	eq
 8008252:	1852      	addeq	r2, r2, r1
 8008254:	6022      	streq	r2, [r4, #0]
 8008256:	602c      	str	r4, [r5, #0]
 8008258:	e7ec      	b.n	8008234 <_free_r+0x28>
 800825a:	461a      	mov	r2, r3
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	b10b      	cbz	r3, 8008264 <_free_r+0x58>
 8008260:	42a3      	cmp	r3, r4
 8008262:	d9fa      	bls.n	800825a <_free_r+0x4e>
 8008264:	6811      	ldr	r1, [r2, #0]
 8008266:	1855      	adds	r5, r2, r1
 8008268:	42a5      	cmp	r5, r4
 800826a:	d10b      	bne.n	8008284 <_free_r+0x78>
 800826c:	6824      	ldr	r4, [r4, #0]
 800826e:	4421      	add	r1, r4
 8008270:	1854      	adds	r4, r2, r1
 8008272:	42a3      	cmp	r3, r4
 8008274:	6011      	str	r1, [r2, #0]
 8008276:	d1dd      	bne.n	8008234 <_free_r+0x28>
 8008278:	681c      	ldr	r4, [r3, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	6053      	str	r3, [r2, #4]
 800827e:	4421      	add	r1, r4
 8008280:	6011      	str	r1, [r2, #0]
 8008282:	e7d7      	b.n	8008234 <_free_r+0x28>
 8008284:	d902      	bls.n	800828c <_free_r+0x80>
 8008286:	230c      	movs	r3, #12
 8008288:	6003      	str	r3, [r0, #0]
 800828a:	e7d3      	b.n	8008234 <_free_r+0x28>
 800828c:	6825      	ldr	r5, [r4, #0]
 800828e:	1961      	adds	r1, r4, r5
 8008290:	428b      	cmp	r3, r1
 8008292:	bf04      	itt	eq
 8008294:	6819      	ldreq	r1, [r3, #0]
 8008296:	685b      	ldreq	r3, [r3, #4]
 8008298:	6063      	str	r3, [r4, #4]
 800829a:	bf04      	itt	eq
 800829c:	1949      	addeq	r1, r1, r5
 800829e:	6021      	streq	r1, [r4, #0]
 80082a0:	6054      	str	r4, [r2, #4]
 80082a2:	e7c7      	b.n	8008234 <_free_r+0x28>
 80082a4:	b003      	add	sp, #12
 80082a6:	bd30      	pop	{r4, r5, pc}
 80082a8:	2000112c 	.word	0x2000112c

080082ac <_malloc_r>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	1ccd      	adds	r5, r1, #3
 80082b0:	f025 0503 	bic.w	r5, r5, #3
 80082b4:	3508      	adds	r5, #8
 80082b6:	2d0c      	cmp	r5, #12
 80082b8:	bf38      	it	cc
 80082ba:	250c      	movcc	r5, #12
 80082bc:	2d00      	cmp	r5, #0
 80082be:	4606      	mov	r6, r0
 80082c0:	db01      	blt.n	80082c6 <_malloc_r+0x1a>
 80082c2:	42a9      	cmp	r1, r5
 80082c4:	d903      	bls.n	80082ce <_malloc_r+0x22>
 80082c6:	230c      	movs	r3, #12
 80082c8:	6033      	str	r3, [r6, #0]
 80082ca:	2000      	movs	r0, #0
 80082cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ce:	f000 fbdf 	bl	8008a90 <__malloc_lock>
 80082d2:	4921      	ldr	r1, [pc, #132]	; (8008358 <_malloc_r+0xac>)
 80082d4:	680a      	ldr	r2, [r1, #0]
 80082d6:	4614      	mov	r4, r2
 80082d8:	b99c      	cbnz	r4, 8008302 <_malloc_r+0x56>
 80082da:	4f20      	ldr	r7, [pc, #128]	; (800835c <_malloc_r+0xb0>)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	b923      	cbnz	r3, 80082ea <_malloc_r+0x3e>
 80082e0:	4621      	mov	r1, r4
 80082e2:	4630      	mov	r0, r6
 80082e4:	f000 fb2a 	bl	800893c <_sbrk_r>
 80082e8:	6038      	str	r0, [r7, #0]
 80082ea:	4629      	mov	r1, r5
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 fb25 	bl	800893c <_sbrk_r>
 80082f2:	1c43      	adds	r3, r0, #1
 80082f4:	d123      	bne.n	800833e <_malloc_r+0x92>
 80082f6:	230c      	movs	r3, #12
 80082f8:	6033      	str	r3, [r6, #0]
 80082fa:	4630      	mov	r0, r6
 80082fc:	f000 fbce 	bl	8008a9c <__malloc_unlock>
 8008300:	e7e3      	b.n	80082ca <_malloc_r+0x1e>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	1b5b      	subs	r3, r3, r5
 8008306:	d417      	bmi.n	8008338 <_malloc_r+0x8c>
 8008308:	2b0b      	cmp	r3, #11
 800830a:	d903      	bls.n	8008314 <_malloc_r+0x68>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	441c      	add	r4, r3
 8008310:	6025      	str	r5, [r4, #0]
 8008312:	e004      	b.n	800831e <_malloc_r+0x72>
 8008314:	6863      	ldr	r3, [r4, #4]
 8008316:	42a2      	cmp	r2, r4
 8008318:	bf0c      	ite	eq
 800831a:	600b      	streq	r3, [r1, #0]
 800831c:	6053      	strne	r3, [r2, #4]
 800831e:	4630      	mov	r0, r6
 8008320:	f000 fbbc 	bl	8008a9c <__malloc_unlock>
 8008324:	f104 000b 	add.w	r0, r4, #11
 8008328:	1d23      	adds	r3, r4, #4
 800832a:	f020 0007 	bic.w	r0, r0, #7
 800832e:	1ac2      	subs	r2, r0, r3
 8008330:	d0cc      	beq.n	80082cc <_malloc_r+0x20>
 8008332:	1a1b      	subs	r3, r3, r0
 8008334:	50a3      	str	r3, [r4, r2]
 8008336:	e7c9      	b.n	80082cc <_malloc_r+0x20>
 8008338:	4622      	mov	r2, r4
 800833a:	6864      	ldr	r4, [r4, #4]
 800833c:	e7cc      	b.n	80082d8 <_malloc_r+0x2c>
 800833e:	1cc4      	adds	r4, r0, #3
 8008340:	f024 0403 	bic.w	r4, r4, #3
 8008344:	42a0      	cmp	r0, r4
 8008346:	d0e3      	beq.n	8008310 <_malloc_r+0x64>
 8008348:	1a21      	subs	r1, r4, r0
 800834a:	4630      	mov	r0, r6
 800834c:	f000 faf6 	bl	800893c <_sbrk_r>
 8008350:	3001      	adds	r0, #1
 8008352:	d1dd      	bne.n	8008310 <_malloc_r+0x64>
 8008354:	e7cf      	b.n	80082f6 <_malloc_r+0x4a>
 8008356:	bf00      	nop
 8008358:	2000112c 	.word	0x2000112c
 800835c:	20001130 	.word	0x20001130

08008360 <__sfputc_r>:
 8008360:	6893      	ldr	r3, [r2, #8]
 8008362:	3b01      	subs	r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	b410      	push	{r4}
 8008368:	6093      	str	r3, [r2, #8]
 800836a:	da08      	bge.n	800837e <__sfputc_r+0x1e>
 800836c:	6994      	ldr	r4, [r2, #24]
 800836e:	42a3      	cmp	r3, r4
 8008370:	db01      	blt.n	8008376 <__sfputc_r+0x16>
 8008372:	290a      	cmp	r1, #10
 8008374:	d103      	bne.n	800837e <__sfputc_r+0x1e>
 8008376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800837a:	f7ff bc69 	b.w	8007c50 <__swbuf_r>
 800837e:	6813      	ldr	r3, [r2, #0]
 8008380:	1c58      	adds	r0, r3, #1
 8008382:	6010      	str	r0, [r2, #0]
 8008384:	7019      	strb	r1, [r3, #0]
 8008386:	4608      	mov	r0, r1
 8008388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800838c:	4770      	bx	lr

0800838e <__sfputs_r>:
 800838e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008390:	4606      	mov	r6, r0
 8008392:	460f      	mov	r7, r1
 8008394:	4614      	mov	r4, r2
 8008396:	18d5      	adds	r5, r2, r3
 8008398:	42ac      	cmp	r4, r5
 800839a:	d101      	bne.n	80083a0 <__sfputs_r+0x12>
 800839c:	2000      	movs	r0, #0
 800839e:	e007      	b.n	80083b0 <__sfputs_r+0x22>
 80083a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a4:	463a      	mov	r2, r7
 80083a6:	4630      	mov	r0, r6
 80083a8:	f7ff ffda 	bl	8008360 <__sfputc_r>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d1f3      	bne.n	8008398 <__sfputs_r+0xa>
 80083b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083b4 <_vfiprintf_r>:
 80083b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b8:	460d      	mov	r5, r1
 80083ba:	b09d      	sub	sp, #116	; 0x74
 80083bc:	4614      	mov	r4, r2
 80083be:	4698      	mov	r8, r3
 80083c0:	4606      	mov	r6, r0
 80083c2:	b118      	cbz	r0, 80083cc <_vfiprintf_r+0x18>
 80083c4:	6983      	ldr	r3, [r0, #24]
 80083c6:	b90b      	cbnz	r3, 80083cc <_vfiprintf_r+0x18>
 80083c8:	f7ff fe1c 	bl	8008004 <__sinit>
 80083cc:	4b89      	ldr	r3, [pc, #548]	; (80085f4 <_vfiprintf_r+0x240>)
 80083ce:	429d      	cmp	r5, r3
 80083d0:	d11b      	bne.n	800840a <_vfiprintf_r+0x56>
 80083d2:	6875      	ldr	r5, [r6, #4]
 80083d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083d6:	07d9      	lsls	r1, r3, #31
 80083d8:	d405      	bmi.n	80083e6 <_vfiprintf_r+0x32>
 80083da:	89ab      	ldrh	r3, [r5, #12]
 80083dc:	059a      	lsls	r2, r3, #22
 80083de:	d402      	bmi.n	80083e6 <_vfiprintf_r+0x32>
 80083e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083e2:	f7ff fead 	bl	8008140 <__retarget_lock_acquire_recursive>
 80083e6:	89ab      	ldrh	r3, [r5, #12]
 80083e8:	071b      	lsls	r3, r3, #28
 80083ea:	d501      	bpl.n	80083f0 <_vfiprintf_r+0x3c>
 80083ec:	692b      	ldr	r3, [r5, #16]
 80083ee:	b9eb      	cbnz	r3, 800842c <_vfiprintf_r+0x78>
 80083f0:	4629      	mov	r1, r5
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff fc7e 	bl	8007cf4 <__swsetup_r>
 80083f8:	b1c0      	cbz	r0, 800842c <_vfiprintf_r+0x78>
 80083fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083fc:	07dc      	lsls	r4, r3, #31
 80083fe:	d50e      	bpl.n	800841e <_vfiprintf_r+0x6a>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	b01d      	add	sp, #116	; 0x74
 8008406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840a:	4b7b      	ldr	r3, [pc, #492]	; (80085f8 <_vfiprintf_r+0x244>)
 800840c:	429d      	cmp	r5, r3
 800840e:	d101      	bne.n	8008414 <_vfiprintf_r+0x60>
 8008410:	68b5      	ldr	r5, [r6, #8]
 8008412:	e7df      	b.n	80083d4 <_vfiprintf_r+0x20>
 8008414:	4b79      	ldr	r3, [pc, #484]	; (80085fc <_vfiprintf_r+0x248>)
 8008416:	429d      	cmp	r5, r3
 8008418:	bf08      	it	eq
 800841a:	68f5      	ldreq	r5, [r6, #12]
 800841c:	e7da      	b.n	80083d4 <_vfiprintf_r+0x20>
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	0598      	lsls	r0, r3, #22
 8008422:	d4ed      	bmi.n	8008400 <_vfiprintf_r+0x4c>
 8008424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008426:	f7ff fe8c 	bl	8008142 <__retarget_lock_release_recursive>
 800842a:	e7e9      	b.n	8008400 <_vfiprintf_r+0x4c>
 800842c:	2300      	movs	r3, #0
 800842e:	9309      	str	r3, [sp, #36]	; 0x24
 8008430:	2320      	movs	r3, #32
 8008432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008436:	f8cd 800c 	str.w	r8, [sp, #12]
 800843a:	2330      	movs	r3, #48	; 0x30
 800843c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008600 <_vfiprintf_r+0x24c>
 8008440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008444:	f04f 0901 	mov.w	r9, #1
 8008448:	4623      	mov	r3, r4
 800844a:	469a      	mov	sl, r3
 800844c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008450:	b10a      	cbz	r2, 8008456 <_vfiprintf_r+0xa2>
 8008452:	2a25      	cmp	r2, #37	; 0x25
 8008454:	d1f9      	bne.n	800844a <_vfiprintf_r+0x96>
 8008456:	ebba 0b04 	subs.w	fp, sl, r4
 800845a:	d00b      	beq.n	8008474 <_vfiprintf_r+0xc0>
 800845c:	465b      	mov	r3, fp
 800845e:	4622      	mov	r2, r4
 8008460:	4629      	mov	r1, r5
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff ff93 	bl	800838e <__sfputs_r>
 8008468:	3001      	adds	r0, #1
 800846a:	f000 80aa 	beq.w	80085c2 <_vfiprintf_r+0x20e>
 800846e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008470:	445a      	add	r2, fp
 8008472:	9209      	str	r2, [sp, #36]	; 0x24
 8008474:	f89a 3000 	ldrb.w	r3, [sl]
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 80a2 	beq.w	80085c2 <_vfiprintf_r+0x20e>
 800847e:	2300      	movs	r3, #0
 8008480:	f04f 32ff 	mov.w	r2, #4294967295
 8008484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008488:	f10a 0a01 	add.w	sl, sl, #1
 800848c:	9304      	str	r3, [sp, #16]
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008494:	931a      	str	r3, [sp, #104]	; 0x68
 8008496:	4654      	mov	r4, sl
 8008498:	2205      	movs	r2, #5
 800849a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849e:	4858      	ldr	r0, [pc, #352]	; (8008600 <_vfiprintf_r+0x24c>)
 80084a0:	f7f7 fea6 	bl	80001f0 <memchr>
 80084a4:	9a04      	ldr	r2, [sp, #16]
 80084a6:	b9d8      	cbnz	r0, 80084e0 <_vfiprintf_r+0x12c>
 80084a8:	06d1      	lsls	r1, r2, #27
 80084aa:	bf44      	itt	mi
 80084ac:	2320      	movmi	r3, #32
 80084ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b2:	0713      	lsls	r3, r2, #28
 80084b4:	bf44      	itt	mi
 80084b6:	232b      	movmi	r3, #43	; 0x2b
 80084b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084bc:	f89a 3000 	ldrb.w	r3, [sl]
 80084c0:	2b2a      	cmp	r3, #42	; 0x2a
 80084c2:	d015      	beq.n	80084f0 <_vfiprintf_r+0x13c>
 80084c4:	9a07      	ldr	r2, [sp, #28]
 80084c6:	4654      	mov	r4, sl
 80084c8:	2000      	movs	r0, #0
 80084ca:	f04f 0c0a 	mov.w	ip, #10
 80084ce:	4621      	mov	r1, r4
 80084d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084d4:	3b30      	subs	r3, #48	; 0x30
 80084d6:	2b09      	cmp	r3, #9
 80084d8:	d94e      	bls.n	8008578 <_vfiprintf_r+0x1c4>
 80084da:	b1b0      	cbz	r0, 800850a <_vfiprintf_r+0x156>
 80084dc:	9207      	str	r2, [sp, #28]
 80084de:	e014      	b.n	800850a <_vfiprintf_r+0x156>
 80084e0:	eba0 0308 	sub.w	r3, r0, r8
 80084e4:	fa09 f303 	lsl.w	r3, r9, r3
 80084e8:	4313      	orrs	r3, r2
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	46a2      	mov	sl, r4
 80084ee:	e7d2      	b.n	8008496 <_vfiprintf_r+0xe2>
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	1d19      	adds	r1, r3, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	9103      	str	r1, [sp, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bfbb      	ittet	lt
 80084fc:	425b      	neglt	r3, r3
 80084fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008502:	9307      	strge	r3, [sp, #28]
 8008504:	9307      	strlt	r3, [sp, #28]
 8008506:	bfb8      	it	lt
 8008508:	9204      	strlt	r2, [sp, #16]
 800850a:	7823      	ldrb	r3, [r4, #0]
 800850c:	2b2e      	cmp	r3, #46	; 0x2e
 800850e:	d10c      	bne.n	800852a <_vfiprintf_r+0x176>
 8008510:	7863      	ldrb	r3, [r4, #1]
 8008512:	2b2a      	cmp	r3, #42	; 0x2a
 8008514:	d135      	bne.n	8008582 <_vfiprintf_r+0x1ce>
 8008516:	9b03      	ldr	r3, [sp, #12]
 8008518:	1d1a      	adds	r2, r3, #4
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	9203      	str	r2, [sp, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	bfb8      	it	lt
 8008522:	f04f 33ff 	movlt.w	r3, #4294967295
 8008526:	3402      	adds	r4, #2
 8008528:	9305      	str	r3, [sp, #20]
 800852a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008610 <_vfiprintf_r+0x25c>
 800852e:	7821      	ldrb	r1, [r4, #0]
 8008530:	2203      	movs	r2, #3
 8008532:	4650      	mov	r0, sl
 8008534:	f7f7 fe5c 	bl	80001f0 <memchr>
 8008538:	b140      	cbz	r0, 800854c <_vfiprintf_r+0x198>
 800853a:	2340      	movs	r3, #64	; 0x40
 800853c:	eba0 000a 	sub.w	r0, r0, sl
 8008540:	fa03 f000 	lsl.w	r0, r3, r0
 8008544:	9b04      	ldr	r3, [sp, #16]
 8008546:	4303      	orrs	r3, r0
 8008548:	3401      	adds	r4, #1
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008550:	482c      	ldr	r0, [pc, #176]	; (8008604 <_vfiprintf_r+0x250>)
 8008552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008556:	2206      	movs	r2, #6
 8008558:	f7f7 fe4a 	bl	80001f0 <memchr>
 800855c:	2800      	cmp	r0, #0
 800855e:	d03f      	beq.n	80085e0 <_vfiprintf_r+0x22c>
 8008560:	4b29      	ldr	r3, [pc, #164]	; (8008608 <_vfiprintf_r+0x254>)
 8008562:	bb1b      	cbnz	r3, 80085ac <_vfiprintf_r+0x1f8>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	3307      	adds	r3, #7
 8008568:	f023 0307 	bic.w	r3, r3, #7
 800856c:	3308      	adds	r3, #8
 800856e:	9303      	str	r3, [sp, #12]
 8008570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008572:	443b      	add	r3, r7
 8008574:	9309      	str	r3, [sp, #36]	; 0x24
 8008576:	e767      	b.n	8008448 <_vfiprintf_r+0x94>
 8008578:	fb0c 3202 	mla	r2, ip, r2, r3
 800857c:	460c      	mov	r4, r1
 800857e:	2001      	movs	r0, #1
 8008580:	e7a5      	b.n	80084ce <_vfiprintf_r+0x11a>
 8008582:	2300      	movs	r3, #0
 8008584:	3401      	adds	r4, #1
 8008586:	9305      	str	r3, [sp, #20]
 8008588:	4619      	mov	r1, r3
 800858a:	f04f 0c0a 	mov.w	ip, #10
 800858e:	4620      	mov	r0, r4
 8008590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008594:	3a30      	subs	r2, #48	; 0x30
 8008596:	2a09      	cmp	r2, #9
 8008598:	d903      	bls.n	80085a2 <_vfiprintf_r+0x1ee>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0c5      	beq.n	800852a <_vfiprintf_r+0x176>
 800859e:	9105      	str	r1, [sp, #20]
 80085a0:	e7c3      	b.n	800852a <_vfiprintf_r+0x176>
 80085a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a6:	4604      	mov	r4, r0
 80085a8:	2301      	movs	r3, #1
 80085aa:	e7f0      	b.n	800858e <_vfiprintf_r+0x1da>
 80085ac:	ab03      	add	r3, sp, #12
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	462a      	mov	r2, r5
 80085b2:	4b16      	ldr	r3, [pc, #88]	; (800860c <_vfiprintf_r+0x258>)
 80085b4:	a904      	add	r1, sp, #16
 80085b6:	4630      	mov	r0, r6
 80085b8:	f3af 8000 	nop.w
 80085bc:	4607      	mov	r7, r0
 80085be:	1c78      	adds	r0, r7, #1
 80085c0:	d1d6      	bne.n	8008570 <_vfiprintf_r+0x1bc>
 80085c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085c4:	07d9      	lsls	r1, r3, #31
 80085c6:	d405      	bmi.n	80085d4 <_vfiprintf_r+0x220>
 80085c8:	89ab      	ldrh	r3, [r5, #12]
 80085ca:	059a      	lsls	r2, r3, #22
 80085cc:	d402      	bmi.n	80085d4 <_vfiprintf_r+0x220>
 80085ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085d0:	f7ff fdb7 	bl	8008142 <__retarget_lock_release_recursive>
 80085d4:	89ab      	ldrh	r3, [r5, #12]
 80085d6:	065b      	lsls	r3, r3, #25
 80085d8:	f53f af12 	bmi.w	8008400 <_vfiprintf_r+0x4c>
 80085dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085de:	e711      	b.n	8008404 <_vfiprintf_r+0x50>
 80085e0:	ab03      	add	r3, sp, #12
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	462a      	mov	r2, r5
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <_vfiprintf_r+0x258>)
 80085e8:	a904      	add	r1, sp, #16
 80085ea:	4630      	mov	r0, r6
 80085ec:	f000 f880 	bl	80086f0 <_printf_i>
 80085f0:	e7e4      	b.n	80085bc <_vfiprintf_r+0x208>
 80085f2:	bf00      	nop
 80085f4:	08008d10 	.word	0x08008d10
 80085f8:	08008d30 	.word	0x08008d30
 80085fc:	08008cf0 	.word	0x08008cf0
 8008600:	08008d50 	.word	0x08008d50
 8008604:	08008d5a 	.word	0x08008d5a
 8008608:	00000000 	.word	0x00000000
 800860c:	0800838f 	.word	0x0800838f
 8008610:	08008d56 	.word	0x08008d56

08008614 <_printf_common>:
 8008614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008618:	4616      	mov	r6, r2
 800861a:	4699      	mov	r9, r3
 800861c:	688a      	ldr	r2, [r1, #8]
 800861e:	690b      	ldr	r3, [r1, #16]
 8008620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008624:	4293      	cmp	r3, r2
 8008626:	bfb8      	it	lt
 8008628:	4613      	movlt	r3, r2
 800862a:	6033      	str	r3, [r6, #0]
 800862c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008630:	4607      	mov	r7, r0
 8008632:	460c      	mov	r4, r1
 8008634:	b10a      	cbz	r2, 800863a <_printf_common+0x26>
 8008636:	3301      	adds	r3, #1
 8008638:	6033      	str	r3, [r6, #0]
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	0699      	lsls	r1, r3, #26
 800863e:	bf42      	ittt	mi
 8008640:	6833      	ldrmi	r3, [r6, #0]
 8008642:	3302      	addmi	r3, #2
 8008644:	6033      	strmi	r3, [r6, #0]
 8008646:	6825      	ldr	r5, [r4, #0]
 8008648:	f015 0506 	ands.w	r5, r5, #6
 800864c:	d106      	bne.n	800865c <_printf_common+0x48>
 800864e:	f104 0a19 	add.w	sl, r4, #25
 8008652:	68e3      	ldr	r3, [r4, #12]
 8008654:	6832      	ldr	r2, [r6, #0]
 8008656:	1a9b      	subs	r3, r3, r2
 8008658:	42ab      	cmp	r3, r5
 800865a:	dc26      	bgt.n	80086aa <_printf_common+0x96>
 800865c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008660:	1e13      	subs	r3, r2, #0
 8008662:	6822      	ldr	r2, [r4, #0]
 8008664:	bf18      	it	ne
 8008666:	2301      	movne	r3, #1
 8008668:	0692      	lsls	r2, r2, #26
 800866a:	d42b      	bmi.n	80086c4 <_printf_common+0xb0>
 800866c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008670:	4649      	mov	r1, r9
 8008672:	4638      	mov	r0, r7
 8008674:	47c0      	blx	r8
 8008676:	3001      	adds	r0, #1
 8008678:	d01e      	beq.n	80086b8 <_printf_common+0xa4>
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	68e5      	ldr	r5, [r4, #12]
 800867e:	6832      	ldr	r2, [r6, #0]
 8008680:	f003 0306 	and.w	r3, r3, #6
 8008684:	2b04      	cmp	r3, #4
 8008686:	bf08      	it	eq
 8008688:	1aad      	subeq	r5, r5, r2
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	6922      	ldr	r2, [r4, #16]
 800868e:	bf0c      	ite	eq
 8008690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008694:	2500      	movne	r5, #0
 8008696:	4293      	cmp	r3, r2
 8008698:	bfc4      	itt	gt
 800869a:	1a9b      	subgt	r3, r3, r2
 800869c:	18ed      	addgt	r5, r5, r3
 800869e:	2600      	movs	r6, #0
 80086a0:	341a      	adds	r4, #26
 80086a2:	42b5      	cmp	r5, r6
 80086a4:	d11a      	bne.n	80086dc <_printf_common+0xc8>
 80086a6:	2000      	movs	r0, #0
 80086a8:	e008      	b.n	80086bc <_printf_common+0xa8>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4652      	mov	r2, sl
 80086ae:	4649      	mov	r1, r9
 80086b0:	4638      	mov	r0, r7
 80086b2:	47c0      	blx	r8
 80086b4:	3001      	adds	r0, #1
 80086b6:	d103      	bne.n	80086c0 <_printf_common+0xac>
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c0:	3501      	adds	r5, #1
 80086c2:	e7c6      	b.n	8008652 <_printf_common+0x3e>
 80086c4:	18e1      	adds	r1, r4, r3
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	2030      	movs	r0, #48	; 0x30
 80086ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086ce:	4422      	add	r2, r4
 80086d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086d8:	3302      	adds	r3, #2
 80086da:	e7c7      	b.n	800866c <_printf_common+0x58>
 80086dc:	2301      	movs	r3, #1
 80086de:	4622      	mov	r2, r4
 80086e0:	4649      	mov	r1, r9
 80086e2:	4638      	mov	r0, r7
 80086e4:	47c0      	blx	r8
 80086e6:	3001      	adds	r0, #1
 80086e8:	d0e6      	beq.n	80086b8 <_printf_common+0xa4>
 80086ea:	3601      	adds	r6, #1
 80086ec:	e7d9      	b.n	80086a2 <_printf_common+0x8e>
	...

080086f0 <_printf_i>:
 80086f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	460c      	mov	r4, r1
 80086f6:	4691      	mov	r9, r2
 80086f8:	7e27      	ldrb	r7, [r4, #24]
 80086fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086fc:	2f78      	cmp	r7, #120	; 0x78
 80086fe:	4680      	mov	r8, r0
 8008700:	469a      	mov	sl, r3
 8008702:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008706:	d807      	bhi.n	8008718 <_printf_i+0x28>
 8008708:	2f62      	cmp	r7, #98	; 0x62
 800870a:	d80a      	bhi.n	8008722 <_printf_i+0x32>
 800870c:	2f00      	cmp	r7, #0
 800870e:	f000 80d8 	beq.w	80088c2 <_printf_i+0x1d2>
 8008712:	2f58      	cmp	r7, #88	; 0x58
 8008714:	f000 80a3 	beq.w	800885e <_printf_i+0x16e>
 8008718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800871c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008720:	e03a      	b.n	8008798 <_printf_i+0xa8>
 8008722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008726:	2b15      	cmp	r3, #21
 8008728:	d8f6      	bhi.n	8008718 <_printf_i+0x28>
 800872a:	a001      	add	r0, pc, #4	; (adr r0, 8008730 <_printf_i+0x40>)
 800872c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008730:	08008789 	.word	0x08008789
 8008734:	0800879d 	.word	0x0800879d
 8008738:	08008719 	.word	0x08008719
 800873c:	08008719 	.word	0x08008719
 8008740:	08008719 	.word	0x08008719
 8008744:	08008719 	.word	0x08008719
 8008748:	0800879d 	.word	0x0800879d
 800874c:	08008719 	.word	0x08008719
 8008750:	08008719 	.word	0x08008719
 8008754:	08008719 	.word	0x08008719
 8008758:	08008719 	.word	0x08008719
 800875c:	080088a9 	.word	0x080088a9
 8008760:	080087cd 	.word	0x080087cd
 8008764:	0800888b 	.word	0x0800888b
 8008768:	08008719 	.word	0x08008719
 800876c:	08008719 	.word	0x08008719
 8008770:	080088cb 	.word	0x080088cb
 8008774:	08008719 	.word	0x08008719
 8008778:	080087cd 	.word	0x080087cd
 800877c:	08008719 	.word	0x08008719
 8008780:	08008719 	.word	0x08008719
 8008784:	08008893 	.word	0x08008893
 8008788:	680b      	ldr	r3, [r1, #0]
 800878a:	1d1a      	adds	r2, r3, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	600a      	str	r2, [r1, #0]
 8008790:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008798:	2301      	movs	r3, #1
 800879a:	e0a3      	b.n	80088e4 <_printf_i+0x1f4>
 800879c:	6825      	ldr	r5, [r4, #0]
 800879e:	6808      	ldr	r0, [r1, #0]
 80087a0:	062e      	lsls	r6, r5, #24
 80087a2:	f100 0304 	add.w	r3, r0, #4
 80087a6:	d50a      	bpl.n	80087be <_printf_i+0xce>
 80087a8:	6805      	ldr	r5, [r0, #0]
 80087aa:	600b      	str	r3, [r1, #0]
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	da03      	bge.n	80087b8 <_printf_i+0xc8>
 80087b0:	232d      	movs	r3, #45	; 0x2d
 80087b2:	426d      	negs	r5, r5
 80087b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b8:	485e      	ldr	r0, [pc, #376]	; (8008934 <_printf_i+0x244>)
 80087ba:	230a      	movs	r3, #10
 80087bc:	e019      	b.n	80087f2 <_printf_i+0x102>
 80087be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80087c2:	6805      	ldr	r5, [r0, #0]
 80087c4:	600b      	str	r3, [r1, #0]
 80087c6:	bf18      	it	ne
 80087c8:	b22d      	sxthne	r5, r5
 80087ca:	e7ef      	b.n	80087ac <_printf_i+0xbc>
 80087cc:	680b      	ldr	r3, [r1, #0]
 80087ce:	6825      	ldr	r5, [r4, #0]
 80087d0:	1d18      	adds	r0, r3, #4
 80087d2:	6008      	str	r0, [r1, #0]
 80087d4:	0628      	lsls	r0, r5, #24
 80087d6:	d501      	bpl.n	80087dc <_printf_i+0xec>
 80087d8:	681d      	ldr	r5, [r3, #0]
 80087da:	e002      	b.n	80087e2 <_printf_i+0xf2>
 80087dc:	0669      	lsls	r1, r5, #25
 80087de:	d5fb      	bpl.n	80087d8 <_printf_i+0xe8>
 80087e0:	881d      	ldrh	r5, [r3, #0]
 80087e2:	4854      	ldr	r0, [pc, #336]	; (8008934 <_printf_i+0x244>)
 80087e4:	2f6f      	cmp	r7, #111	; 0x6f
 80087e6:	bf0c      	ite	eq
 80087e8:	2308      	moveq	r3, #8
 80087ea:	230a      	movne	r3, #10
 80087ec:	2100      	movs	r1, #0
 80087ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087f2:	6866      	ldr	r6, [r4, #4]
 80087f4:	60a6      	str	r6, [r4, #8]
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	bfa2      	ittt	ge
 80087fa:	6821      	ldrge	r1, [r4, #0]
 80087fc:	f021 0104 	bicge.w	r1, r1, #4
 8008800:	6021      	strge	r1, [r4, #0]
 8008802:	b90d      	cbnz	r5, 8008808 <_printf_i+0x118>
 8008804:	2e00      	cmp	r6, #0
 8008806:	d04d      	beq.n	80088a4 <_printf_i+0x1b4>
 8008808:	4616      	mov	r6, r2
 800880a:	fbb5 f1f3 	udiv	r1, r5, r3
 800880e:	fb03 5711 	mls	r7, r3, r1, r5
 8008812:	5dc7      	ldrb	r7, [r0, r7]
 8008814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008818:	462f      	mov	r7, r5
 800881a:	42bb      	cmp	r3, r7
 800881c:	460d      	mov	r5, r1
 800881e:	d9f4      	bls.n	800880a <_printf_i+0x11a>
 8008820:	2b08      	cmp	r3, #8
 8008822:	d10b      	bne.n	800883c <_printf_i+0x14c>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	07df      	lsls	r7, r3, #31
 8008828:	d508      	bpl.n	800883c <_printf_i+0x14c>
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	6861      	ldr	r1, [r4, #4]
 800882e:	4299      	cmp	r1, r3
 8008830:	bfde      	ittt	le
 8008832:	2330      	movle	r3, #48	; 0x30
 8008834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800883c:	1b92      	subs	r2, r2, r6
 800883e:	6122      	str	r2, [r4, #16]
 8008840:	f8cd a000 	str.w	sl, [sp]
 8008844:	464b      	mov	r3, r9
 8008846:	aa03      	add	r2, sp, #12
 8008848:	4621      	mov	r1, r4
 800884a:	4640      	mov	r0, r8
 800884c:	f7ff fee2 	bl	8008614 <_printf_common>
 8008850:	3001      	adds	r0, #1
 8008852:	d14c      	bne.n	80088ee <_printf_i+0x1fe>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	b004      	add	sp, #16
 800885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885e:	4835      	ldr	r0, [pc, #212]	; (8008934 <_printf_i+0x244>)
 8008860:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	680e      	ldr	r6, [r1, #0]
 8008868:	061f      	lsls	r7, r3, #24
 800886a:	f856 5b04 	ldr.w	r5, [r6], #4
 800886e:	600e      	str	r6, [r1, #0]
 8008870:	d514      	bpl.n	800889c <_printf_i+0x1ac>
 8008872:	07d9      	lsls	r1, r3, #31
 8008874:	bf44      	itt	mi
 8008876:	f043 0320 	orrmi.w	r3, r3, #32
 800887a:	6023      	strmi	r3, [r4, #0]
 800887c:	b91d      	cbnz	r5, 8008886 <_printf_i+0x196>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	f023 0320 	bic.w	r3, r3, #32
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	2310      	movs	r3, #16
 8008888:	e7b0      	b.n	80087ec <_printf_i+0xfc>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	f043 0320 	orr.w	r3, r3, #32
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	2378      	movs	r3, #120	; 0x78
 8008894:	4828      	ldr	r0, [pc, #160]	; (8008938 <_printf_i+0x248>)
 8008896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800889a:	e7e3      	b.n	8008864 <_printf_i+0x174>
 800889c:	065e      	lsls	r6, r3, #25
 800889e:	bf48      	it	mi
 80088a0:	b2ad      	uxthmi	r5, r5
 80088a2:	e7e6      	b.n	8008872 <_printf_i+0x182>
 80088a4:	4616      	mov	r6, r2
 80088a6:	e7bb      	b.n	8008820 <_printf_i+0x130>
 80088a8:	680b      	ldr	r3, [r1, #0]
 80088aa:	6826      	ldr	r6, [r4, #0]
 80088ac:	6960      	ldr	r0, [r4, #20]
 80088ae:	1d1d      	adds	r5, r3, #4
 80088b0:	600d      	str	r5, [r1, #0]
 80088b2:	0635      	lsls	r5, r6, #24
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	d501      	bpl.n	80088bc <_printf_i+0x1cc>
 80088b8:	6018      	str	r0, [r3, #0]
 80088ba:	e002      	b.n	80088c2 <_printf_i+0x1d2>
 80088bc:	0671      	lsls	r1, r6, #25
 80088be:	d5fb      	bpl.n	80088b8 <_printf_i+0x1c8>
 80088c0:	8018      	strh	r0, [r3, #0]
 80088c2:	2300      	movs	r3, #0
 80088c4:	6123      	str	r3, [r4, #16]
 80088c6:	4616      	mov	r6, r2
 80088c8:	e7ba      	b.n	8008840 <_printf_i+0x150>
 80088ca:	680b      	ldr	r3, [r1, #0]
 80088cc:	1d1a      	adds	r2, r3, #4
 80088ce:	600a      	str	r2, [r1, #0]
 80088d0:	681e      	ldr	r6, [r3, #0]
 80088d2:	6862      	ldr	r2, [r4, #4]
 80088d4:	2100      	movs	r1, #0
 80088d6:	4630      	mov	r0, r6
 80088d8:	f7f7 fc8a 	bl	80001f0 <memchr>
 80088dc:	b108      	cbz	r0, 80088e2 <_printf_i+0x1f2>
 80088de:	1b80      	subs	r0, r0, r6
 80088e0:	6060      	str	r0, [r4, #4]
 80088e2:	6863      	ldr	r3, [r4, #4]
 80088e4:	6123      	str	r3, [r4, #16]
 80088e6:	2300      	movs	r3, #0
 80088e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ec:	e7a8      	b.n	8008840 <_printf_i+0x150>
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	4632      	mov	r2, r6
 80088f2:	4649      	mov	r1, r9
 80088f4:	4640      	mov	r0, r8
 80088f6:	47d0      	blx	sl
 80088f8:	3001      	adds	r0, #1
 80088fa:	d0ab      	beq.n	8008854 <_printf_i+0x164>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	079b      	lsls	r3, r3, #30
 8008900:	d413      	bmi.n	800892a <_printf_i+0x23a>
 8008902:	68e0      	ldr	r0, [r4, #12]
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	4298      	cmp	r0, r3
 8008908:	bfb8      	it	lt
 800890a:	4618      	movlt	r0, r3
 800890c:	e7a4      	b.n	8008858 <_printf_i+0x168>
 800890e:	2301      	movs	r3, #1
 8008910:	4632      	mov	r2, r6
 8008912:	4649      	mov	r1, r9
 8008914:	4640      	mov	r0, r8
 8008916:	47d0      	blx	sl
 8008918:	3001      	adds	r0, #1
 800891a:	d09b      	beq.n	8008854 <_printf_i+0x164>
 800891c:	3501      	adds	r5, #1
 800891e:	68e3      	ldr	r3, [r4, #12]
 8008920:	9903      	ldr	r1, [sp, #12]
 8008922:	1a5b      	subs	r3, r3, r1
 8008924:	42ab      	cmp	r3, r5
 8008926:	dcf2      	bgt.n	800890e <_printf_i+0x21e>
 8008928:	e7eb      	b.n	8008902 <_printf_i+0x212>
 800892a:	2500      	movs	r5, #0
 800892c:	f104 0619 	add.w	r6, r4, #25
 8008930:	e7f5      	b.n	800891e <_printf_i+0x22e>
 8008932:	bf00      	nop
 8008934:	08008d61 	.word	0x08008d61
 8008938:	08008d72 	.word	0x08008d72

0800893c <_sbrk_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4d06      	ldr	r5, [pc, #24]	; (8008958 <_sbrk_r+0x1c>)
 8008940:	2300      	movs	r3, #0
 8008942:	4604      	mov	r4, r0
 8008944:	4608      	mov	r0, r1
 8008946:	602b      	str	r3, [r5, #0]
 8008948:	f7f8 fa12 	bl	8000d70 <_sbrk>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_sbrk_r+0x1a>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_sbrk_r+0x1a>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	200023a8 	.word	0x200023a8

0800895c <__sread>:
 800895c:	b510      	push	{r4, lr}
 800895e:	460c      	mov	r4, r1
 8008960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008964:	f000 f8a0 	bl	8008aa8 <_read_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	bfab      	itete	ge
 800896c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800896e:	89a3      	ldrhlt	r3, [r4, #12]
 8008970:	181b      	addge	r3, r3, r0
 8008972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008976:	bfac      	ite	ge
 8008978:	6563      	strge	r3, [r4, #84]	; 0x54
 800897a:	81a3      	strhlt	r3, [r4, #12]
 800897c:	bd10      	pop	{r4, pc}

0800897e <__swrite>:
 800897e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008982:	461f      	mov	r7, r3
 8008984:	898b      	ldrh	r3, [r1, #12]
 8008986:	05db      	lsls	r3, r3, #23
 8008988:	4605      	mov	r5, r0
 800898a:	460c      	mov	r4, r1
 800898c:	4616      	mov	r6, r2
 800898e:	d505      	bpl.n	800899c <__swrite+0x1e>
 8008990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008994:	2302      	movs	r3, #2
 8008996:	2200      	movs	r2, #0
 8008998:	f000 f868 	bl	8008a6c <_lseek_r>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	4632      	mov	r2, r6
 80089aa:	463b      	mov	r3, r7
 80089ac:	4628      	mov	r0, r5
 80089ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089b2:	f000 b817 	b.w	80089e4 <_write_r>

080089b6 <__sseek>:
 80089b6:	b510      	push	{r4, lr}
 80089b8:	460c      	mov	r4, r1
 80089ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089be:	f000 f855 	bl	8008a6c <_lseek_r>
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	bf15      	itete	ne
 80089c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089d2:	81a3      	strheq	r3, [r4, #12]
 80089d4:	bf18      	it	ne
 80089d6:	81a3      	strhne	r3, [r4, #12]
 80089d8:	bd10      	pop	{r4, pc}

080089da <__sclose>:
 80089da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089de:	f000 b813 	b.w	8008a08 <_close_r>
	...

080089e4 <_write_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4d07      	ldr	r5, [pc, #28]	; (8008a04 <_write_r+0x20>)
 80089e8:	4604      	mov	r4, r0
 80089ea:	4608      	mov	r0, r1
 80089ec:	4611      	mov	r1, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	602a      	str	r2, [r5, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	f7f7 ffaa 	bl	800094c <_write>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_write_r+0x1e>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_write_r+0x1e>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	200023a8 	.word	0x200023a8

08008a08 <_close_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d06      	ldr	r5, [pc, #24]	; (8008a24 <_close_r+0x1c>)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7f8 f977 	bl	8000d06 <_close>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_close_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_close_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	200023a8 	.word	0x200023a8

08008a28 <_fstat_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4d07      	ldr	r5, [pc, #28]	; (8008a48 <_fstat_r+0x20>)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	4611      	mov	r1, r2
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	f7f8 f972 	bl	8000d1e <_fstat>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	d102      	bne.n	8008a44 <_fstat_r+0x1c>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	b103      	cbz	r3, 8008a44 <_fstat_r+0x1c>
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
 8008a46:	bf00      	nop
 8008a48:	200023a8 	.word	0x200023a8

08008a4c <_isatty_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4d06      	ldr	r5, [pc, #24]	; (8008a68 <_isatty_r+0x1c>)
 8008a50:	2300      	movs	r3, #0
 8008a52:	4604      	mov	r4, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	602b      	str	r3, [r5, #0]
 8008a58:	f7f8 f971 	bl	8000d3e <_isatty>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_isatty_r+0x1a>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_isatty_r+0x1a>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	200023a8 	.word	0x200023a8

08008a6c <_lseek_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4d07      	ldr	r5, [pc, #28]	; (8008a8c <_lseek_r+0x20>)
 8008a70:	4604      	mov	r4, r0
 8008a72:	4608      	mov	r0, r1
 8008a74:	4611      	mov	r1, r2
 8008a76:	2200      	movs	r2, #0
 8008a78:	602a      	str	r2, [r5, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f7f8 f96a 	bl	8000d54 <_lseek>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_lseek_r+0x1e>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_lseek_r+0x1e>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	200023a8 	.word	0x200023a8

08008a90 <__malloc_lock>:
 8008a90:	4801      	ldr	r0, [pc, #4]	; (8008a98 <__malloc_lock+0x8>)
 8008a92:	f7ff bb55 	b.w	8008140 <__retarget_lock_acquire_recursive>
 8008a96:	bf00      	nop
 8008a98:	200023a0 	.word	0x200023a0

08008a9c <__malloc_unlock>:
 8008a9c:	4801      	ldr	r0, [pc, #4]	; (8008aa4 <__malloc_unlock+0x8>)
 8008a9e:	f7ff bb50 	b.w	8008142 <__retarget_lock_release_recursive>
 8008aa2:	bf00      	nop
 8008aa4:	200023a0 	.word	0x200023a0

08008aa8 <_read_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d07      	ldr	r5, [pc, #28]	; (8008ac8 <_read_r+0x20>)
 8008aac:	4604      	mov	r4, r0
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f7f8 f908 	bl	8000ccc <_read>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_read_r+0x1e>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_read_r+0x1e>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	200023a8 	.word	0x200023a8

08008acc <_init>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	bf00      	nop
 8008ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad2:	bc08      	pop	{r3}
 8008ad4:	469e      	mov	lr, r3
 8008ad6:	4770      	bx	lr

08008ad8 <_fini>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	bf00      	nop
 8008adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ade:	bc08      	pop	{r3}
 8008ae0:	469e      	mov	lr, r3
 8008ae2:	4770      	bx	lr
